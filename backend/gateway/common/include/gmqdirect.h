// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `gmqdirect.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __gmqdirect_h__
#define __gmqdirect_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GMQDirect
{

class GMQDirectSend;

}

}

namespace GMQDirect
{

class GMQDirectSend;
bool operator==(const GMQDirectSend&, const GMQDirectSend&);
bool operator<(const GMQDirectSend&, const GMQDirectSend&);

}

namespace IceInternal
{

::Ice::Object* upCast(::GMQDirect::GMQDirectSend*);
::IceProxy::Ice::Object* upCast(::IceProxy::GMQDirect::GMQDirectSend*);

}

namespace GMQDirect
{

typedef ::IceInternal::Handle< ::GMQDirect::GMQDirectSend> GMQDirectSendPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GMQDirect::GMQDirectSend> GMQDirectSendPrx;

void __read(::IceInternal::BasicStream*, GMQDirectSendPrx&);
void __patch__GMQDirectSendPtr(void*, ::Ice::ObjectPtr&);

}

namespace GMQDirect
{

typedef ::std::vector< ::Ice::Byte> Line;

typedef ::std::vector< ::GMQDirect::Line> Table;
void __writeTable(::IceInternal::BasicStream*, const ::GMQDirect::Line*, const ::GMQDirect::Line*);
void __readTable(::IceInternal::BasicStream*, Table&);

typedef ::std::vector< ::std::string> StrSeq;

}

namespace GMQDirect
{

class AMI_GMQDirectSend_writeStringsToIPPort : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::GMQDirect::AMI_GMQDirectSend_writeStringsToIPPort> AMI_GMQDirectSend_writeStringsToIPPortPtr;

}

namespace GMQDirect
{

class Callback_GMQDirectSend_writeMessages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeMessages_Base> Callback_GMQDirectSend_writeMessagesPtr;

class Callback_GMQDirectSend_writeMessagesToIPPort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeMessagesToIPPort_Base> Callback_GMQDirectSend_writeMessagesToIPPortPtr;

class Callback_GMQDirectSend_writeMessagesFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeMessagesFromTo_Base> Callback_GMQDirectSend_writeMessagesFromToPtr;

class Callback_GMQDirectSend_writeMessagesFrom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeMessagesFrom_Base> Callback_GMQDirectSend_writeMessagesFromPtr;

class Callback_GMQDirectSend_writeStringsFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeStringsFromTo_Base> Callback_GMQDirectSend_writeStringsFromToPtr;

class Callback_GMQDirectSend_writeStringsToIPPort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMQDirectSend_writeStringsToIPPort_Base> Callback_GMQDirectSend_writeStringsToIPPortPtr;

}

namespace IceProxy
{

namespace GMQDirect
{

class GMQDirectSend : virtual public ::IceProxy::Ice::Object
{
public:

    bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl)
    {
        return writeMessages(tbl, 0);
    }
    bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::Ice::Context& __ctx)
    {
        return writeMessages(tbl, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl)
    {
        return begin_writeMessages(tbl, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::Ice::Context& __ctx)
    {
        return begin_writeMessages(tbl, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(tbl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(tbl, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(tbl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(tbl, &__ctx, __del, __cookie);
    }

    bool end_writeMessages(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0);
    }
    bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesToIPPort(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee)
    {
        return writeMessagesFromTo(tbl, caller, callee, 0);
    }
    bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx)
    {
        return writeMessagesFromTo(tbl, caller, callee, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesFromTo(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller)
    {
        return writeMessagesFrom(queue, tbl, caller, 0);
    }
    bool writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx)
    {
        return writeMessagesFrom(queue, tbl, caller, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesFromPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeMessagesFromPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesFrom(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version)
    {
        return writeStringsFromTo(strs, caller, callee, shareid, version, 0);
    }
    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx)
    {
        return writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::GMQDirect::Callback_GMQDirectSend_writeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_writeStringsFromTo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, 0);
    }
    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::GMQDirect::Callback_GMQDirectSend_writeStringsToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::GMQDirect::Callback_GMQDirectSend_writeStringsToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_writeStringsToIPPort(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool writeStringsToIPPort_async(const ::GMQDirect::AMI_GMQDirectSend_writeStringsToIPPortPtr&, const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    bool writeStringsToIPPort_async(const ::GMQDirect::AMI_GMQDirectSend_writeStringsToIPPortPtr&, const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMQDirectSend> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMQDirectSend*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<GMQDirectSend*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace GMQDirect
{

class GMQDirectSend : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Context*) = 0;

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace GMQDirect
{

class GMQDirectSend : virtual public ::IceDelegate::GMQDirect::GMQDirectSend,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Context*);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace GMQDirect
{

class GMQDirectSend : virtual public ::IceDelegate::GMQDirect::GMQDirectSend,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Context*);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
};

}

}

namespace GMQDirect
{

class GMQDirectSend : virtual public ::Ice::Object
{
public:

    typedef GMQDirectSendPrx ProxyType;
    typedef GMQDirectSendPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool writeMessages(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesToIPPort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQDirect::Table::const_iterator,  ::GMQDirect::Table::const_iterator>&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesFrom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeStringsFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQDirect::StrSeq::const_iterator,  ::GMQDirect::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeStringsToIPPort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const GMQDirectSend& l, const GMQDirectSend& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GMQDirectSend& l, const GMQDirectSend& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GMQDirect
{

template<class T>
class CallbackNC_GMQDirectSend_writeMessages : public Callback_GMQDirectSend_writeMessages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMQDirectSend_writeMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessages(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeMessagesPtr
newCallback_GMQDirectSend_writeMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeMessagesPtr
newCallback_GMQDirectSend_writeMessages(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeMessages : public Callback_GMQDirectSend_writeMessages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMQDirectSend_writeMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessages(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesPtr
newCallback_GMQDirectSend_writeMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesPtr
newCallback_GMQDirectSend_writeMessages(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMQDirectSend_writeMessagesToIPPort : public Callback_GMQDirectSend_writeMessagesToIPPort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMQDirectSend_writeMessagesToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeMessagesToIPPortPtr
newCallback_GMQDirectSend_writeMessagesToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeMessagesToIPPortPtr
newCallback_GMQDirectSend_writeMessagesToIPPort(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeMessagesToIPPort : public Callback_GMQDirectSend_writeMessagesToIPPort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMQDirectSend_writeMessagesToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesToIPPortPtr
newCallback_GMQDirectSend_writeMessagesToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesToIPPortPtr
newCallback_GMQDirectSend_writeMessagesToIPPort(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMQDirectSend_writeMessagesFromTo : public Callback_GMQDirectSend_writeMessagesFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMQDirectSend_writeMessagesFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeMessagesFromToPtr
newCallback_GMQDirectSend_writeMessagesFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeMessagesFromToPtr
newCallback_GMQDirectSend_writeMessagesFromTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeMessagesFromTo : public Callback_GMQDirectSend_writeMessagesFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMQDirectSend_writeMessagesFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesFromToPtr
newCallback_GMQDirectSend_writeMessagesFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesFromToPtr
newCallback_GMQDirectSend_writeMessagesFromTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMQDirectSend_writeMessagesFrom : public Callback_GMQDirectSend_writeMessagesFrom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMQDirectSend_writeMessagesFrom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFrom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeMessagesFromPtr
newCallback_GMQDirectSend_writeMessagesFrom(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesFrom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeMessagesFromPtr
newCallback_GMQDirectSend_writeMessagesFrom(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeMessagesFrom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeMessagesFrom : public Callback_GMQDirectSend_writeMessagesFrom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMQDirectSend_writeMessagesFrom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFrom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesFromPtr
newCallback_GMQDirectSend_writeMessagesFrom(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesFrom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeMessagesFromPtr
newCallback_GMQDirectSend_writeMessagesFrom(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeMessagesFrom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMQDirectSend_writeStringsFromTo : public Callback_GMQDirectSend_writeStringsFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_GMQDirectSend_writeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeStringsFromToPtr
newCallback_GMQDirectSend_writeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeStringsFromToPtr
newCallback_GMQDirectSend_writeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeStringsFromTo : public Callback_GMQDirectSend_writeStringsFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_GMQDirectSend_writeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeStringsFromToPtr
newCallback_GMQDirectSend_writeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeStringsFromToPtr
newCallback_GMQDirectSend_writeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMQDirectSend_writeStringsToIPPort : public Callback_GMQDirectSend_writeStringsToIPPort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_GMQDirectSend_writeStringsToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMQDirectSend_writeStringsToIPPortPtr
newCallback_GMQDirectSend_writeStringsToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeStringsToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMQDirectSend_writeStringsToIPPortPtr
newCallback_GMQDirectSend_writeStringsToIPPort(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMQDirectSend_writeStringsToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMQDirectSend_writeStringsToIPPort : public Callback_GMQDirectSend_writeStringsToIPPort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_GMQDirectSend_writeStringsToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQDirect::GMQDirectSendPrx __proxy = ::GMQDirect::GMQDirectSendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMQDirectSend_writeStringsToIPPortPtr
newCallback_GMQDirectSend_writeStringsToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeStringsToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMQDirectSend_writeStringsToIPPortPtr
newCallback_GMQDirectSend_writeStringsToIPPort(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMQDirectSend_writeStringsToIPPort<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
