// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `gmci.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __gmci_h__
#define __gmci_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GMC
{

class GMCMgmt;

}

}

namespace GMC
{

class GMCMgmt;
bool operator==(const GMCMgmt&, const GMCMgmt&);
bool operator<(const GMCMgmt&, const GMCMgmt&);

}

namespace IceInternal
{

::Ice::Object* upCast(::GMC::GMCMgmt*);
::IceProxy::Ice::Object* upCast(::IceProxy::GMC::GMCMgmt*);

}

namespace GMC
{

typedef ::IceInternal::Handle< ::GMC::GMCMgmt> GMCMgmtPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GMC::GMCMgmt> GMCMgmtPrx;

void __read(::IceInternal::BasicStream*, GMCMgmtPrx&);
void __patch__GMCMgmtPtr(void*, ::Ice::ObjectPtr&);

}

namespace GMC
{

typedef ::std::map< ::std::string, ::std::string> Prop;
void __writeProp(::IceInternal::BasicStream*, const Prop&);
void __readProp(::IceInternal::BasicStream*, Prop&);

typedef ::std::vector< ::std::string> PropName;

typedef ::std::vector< ::std::string> StringVector;

typedef ::std::vector< ::Ice::Byte> BYTES;

typedef ::std::vector< ::Ice::Long> UIDSEQ;

typedef ::std::vector< ::GMC::BYTES> GPSONES;
void __writeGPSONES(::IceInternal::BasicStream*, const ::GMC::BYTES*, const ::GMC::BYTES*);
void __readGPSONES(::IceInternal::BasicStream*, GPSONES&);

}

namespace GMC
{

class Callback_GMCMgmt_set_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_set_Base> Callback_GMCMgmt_setPtr;

class Callback_GMCMgmt_get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_get_Base> Callback_GMCMgmt_getPtr;

class Callback_GMCMgmt_getLatest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getLatest_Base> Callback_GMCMgmt_getLatestPtr;

class Callback_GMCMgmt_rectSearch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_rectSearch_Base> Callback_GMCMgmt_rectSearchPtr;

class Callback_GMCMgmt_rectSearchWithType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_rectSearchWithType_Base> Callback_GMCMgmt_rectSearchWithTypePtr;

class Callback_GMCMgmt_getOnLineNum_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getOnLineNum_Base> Callback_GMCMgmt_getOnLineNumPtr;

class Callback_GMCMgmt_getWithTimeRange_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getWithTimeRange_Base> Callback_GMCMgmt_getWithTimeRangePtr;

class Callback_GMCMgmt_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getStatus_Base> Callback_GMCMgmt_getStatusPtr;

class Callback_GMCMgmt_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_setStatus_Base> Callback_GMCMgmt_setStatusPtr;

class Callback_GMCMgmt_getRunningStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getRunningStatus_Base> Callback_GMCMgmt_getRunningStatusPtr;

class Callback_GMCMgmt_setRunningStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_setRunningStatus_Base> Callback_GMCMgmt_setRunningStatusPtr;

class Callback_GMCMgmt_getProps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_getProps_Base> Callback_GMCMgmt_getPropsPtr;

class Callback_GMCMgmt_setProps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_setProps_Base> Callback_GMCMgmt_setPropsPtr;

class Callback_GMCMgmt_syncFullData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GMCMgmt_syncFullData_Base> Callback_GMCMgmt_syncFullDataPtr;

}

namespace IceProxy
{

namespace GMC
{

class GMCMgmt : virtual public ::IceProxy::Ice::Object
{
public:

    bool set(const ::GMC::GPSONES& ones)
    {
        return set(ones, 0);
    }
    bool set(const ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        return set(ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones)
    {
        return begin_set(ones, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        return begin_set(ones, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(ones, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(ones, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones, const ::GMC::Callback_GMCMgmt_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(ones, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES& ones, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(ones, &__ctx, __del, __cookie);
    }

    bool end_set(const ::Ice::AsyncResultPtr&);
    
private:

    bool set(const ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_set(const ::GMC::GPSONES&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void get(const ::GMC::UIDSEQ& uids, ::GMC::GPSONES& ones)
    {
        get(uids, ones, 0);
    }
    void get(const ::GMC::UIDSEQ& uids, ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        get(uids, ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids)
    {
        return begin_get(uids, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids, const ::Ice::Context& __ctx)
    {
        return begin_get(uids, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(uids, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids, const ::GMC::Callback_GMCMgmt_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ& uids, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(uids, &__ctx, __del, __cookie);
    }

    void end_get(::GMC::GPSONES& ones, const ::Ice::AsyncResultPtr&);
    
private:

    void get(const ::GMC::UIDSEQ&, ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_get(const ::GMC::UIDSEQ&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getLatest(::Ice::Long hBTime, ::GMC::GPSONES& ones)
    {
        getLatest(hBTime, ones, 0);
    }
    void getLatest(::Ice::Long hBTime, ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        getLatest(hBTime, ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime)
    {
        return begin_getLatest(hBTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime, const ::Ice::Context& __ctx)
    {
        return begin_getLatest(hBTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLatest(hBTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLatest(hBTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime, const ::GMC::Callback_GMCMgmt_getLatestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLatest(hBTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long hBTime, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getLatestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLatest(hBTime, &__ctx, __del, __cookie);
    }

    void end_getLatest(::GMC::GPSONES& ones, const ::Ice::AsyncResultPtr&);
    
private:

    void getLatest(::Ice::Long, ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLatest(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, ::GMC::GPSONES& ones)
    {
        rectSearch(x1, y1, x2, y2, dur, limit, ones, 0);
    }
    void rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        rectSearch(x1, y1, x2, y2, dur, limit, ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::Ice::Context& __ctx)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::Callback_GMCMgmt_rectSearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_rectSearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearch(x1, y1, x2, y2, dur, limit, &__ctx, __del, __cookie);
    }

    void end_rectSearch(::GMC::GPSONES& ones, const ::Ice::AsyncResultPtr&);
    
private:

    void rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, ::GMC::GPSONES& ones)
    {
        rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, ones, 0);
    }
    void rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, const ::Ice::Context& __ctx)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, const ::GMC::Callback_GMCMgmt_rectSearchWithTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int x1, ::Ice::Int y1, ::Ice::Int x2, ::Ice::Int y2, ::Ice::Int dur, ::Ice::Int limit, const ::GMC::StringVector& devtype, ::Ice::Int devflag, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_rectSearchWithTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rectSearchWithType(x1, y1, x2, y2, dur, limit, devtype, devflag, &__ctx, __del, __cookie);
    }

    void end_rectSearchWithType(::GMC::GPSONES& ones, const ::Ice::AsyncResultPtr&);
    
private:

    void rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getOnLineNum(::Ice::Int dur, ::Ice::Int& num)
    {
        getOnLineNum(dur, num, 0);
    }
    void getOnLineNum(::Ice::Int dur, ::Ice::Int& num, const ::Ice::Context& __ctx)
    {
        getOnLineNum(dur, num, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur)
    {
        return begin_getOnLineNum(dur, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur, const ::Ice::Context& __ctx)
    {
        return begin_getOnLineNum(dur, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOnLineNum(dur, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOnLineNum(dur, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur, const ::GMC::Callback_GMCMgmt_getOnLineNumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOnLineNum(dur, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int dur, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getOnLineNumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOnLineNum(dur, &__ctx, __del, __cookie);
    }

    void end_getOnLineNum(::Ice::Int& num, const ::Ice::AsyncResultPtr&);
    
private:

    void getOnLineNum(::Ice::Int, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOnLineNum(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, ::GMC::GPSONES& ones)
    {
        getWithTimeRange(begin, end, limit, ones, 0);
    }
    void getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, ::GMC::GPSONES& ones, const ::Ice::Context& __ctx)
    {
        getWithTimeRange(begin, end, limit, ones, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit)
    {
        return begin_getWithTimeRange(begin, end, limit, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, const ::Ice::Context& __ctx)
    {
        return begin_getWithTimeRange(begin, end, limit, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWithTimeRange(begin, end, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWithTimeRange(begin, end, limit, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, const ::GMC::Callback_GMCMgmt_getWithTimeRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWithTimeRange(begin, end, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long begin, ::Ice::Long end, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getWithTimeRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWithTimeRange(begin, end, limit, &__ctx, __del, __cookie);
    }

    void end_getWithTimeRange(::GMC::GPSONES& ones, const ::Ice::AsyncResultPtr&);
    
private:

    void getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getStatus(::std::string& status)
    {
        getStatus(status, 0);
    }
    void getStatus(::std::string& status, const ::Ice::Context& __ctx)
    {
        getStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::GMC::Callback_GMCMgmt_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    void end_getStatus(::std::string& status, const ::Ice::AsyncResultPtr&);
    
private:

    void getStatus(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(const ::std::string& status)
    {
        setStatus(status, 0);
    }
    void setStatus(const ::std::string& status, const ::Ice::Context& __ctx)
    {
        setStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status)
    {
        return begin_setStatus(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::GMC::Callback_GMCMgmt_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getRunningStatus(const ::GMC::PropName& status, ::GMC::Prop& result)
    {
        getRunningStatus(status, result, 0);
    }
    void getRunningStatus(const ::GMC::PropName& status, ::GMC::Prop& result, const ::Ice::Context& __ctx)
    {
        getRunningStatus(status, result, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status)
    {
        return begin_getRunningStatus(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status, const ::Ice::Context& __ctx)
    {
        return begin_getRunningStatus(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRunningStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRunningStatus(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status, const ::GMC::Callback_GMCMgmt_getRunningStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRunningStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName& status, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getRunningStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRunningStatus(status, &__ctx, __del, __cookie);
    }

    void end_getRunningStatus(::GMC::Prop& result, const ::Ice::AsyncResultPtr&);
    
private:

    void getRunningStatus(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRunningStatus(const ::GMC::PropName&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRunningStatus(const ::GMC::Prop& status)
    {
        setRunningStatus(status, 0);
    }
    void setRunningStatus(const ::GMC::Prop& status, const ::Ice::Context& __ctx)
    {
        setRunningStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status)
    {
        return begin_setRunningStatus(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status, const ::Ice::Context& __ctx)
    {
        return begin_setRunningStatus(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRunningStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRunningStatus(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status, const ::GMC::Callback_GMCMgmt_setRunningStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRunningStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop& status, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_setRunningStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRunningStatus(status, &__ctx, __del, __cookie);
    }

    void end_setRunningStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setRunningStatus(const ::GMC::Prop&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRunningStatus(const ::GMC::Prop&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getProps(const ::GMC::PropName& names, ::GMC::Prop& props)
    {
        getProps(names, props, 0);
    }
    void getProps(const ::GMC::PropName& names, ::GMC::Prop& props, const ::Ice::Context& __ctx)
    {
        getProps(names, props, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names)
    {
        return begin_getProps(names, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names, const ::Ice::Context& __ctx)
    {
        return begin_getProps(names, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProps(names, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProps(names, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names, const ::GMC::Callback_GMCMgmt_getPropsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProps(names, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName& names, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_getPropsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProps(names, &__ctx, __del, __cookie);
    }

    void end_getProps(::GMC::Prop& props, const ::Ice::AsyncResultPtr&);
    
private:

    void getProps(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getProps(const ::GMC::PropName&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setProps(const ::GMC::Prop& props)
    {
        setProps(props, 0);
    }
    void setProps(const ::GMC::Prop& props, const ::Ice::Context& __ctx)
    {
        setProps(props, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props)
    {
        return begin_setProps(props, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props, const ::Ice::Context& __ctx)
    {
        return begin_setProps(props, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProps(props, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProps(props, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props, const ::GMC::Callback_GMCMgmt_setPropsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProps(props, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop& props, const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_setPropsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProps(props, &__ctx, __del, __cookie);
    }

    void end_setProps(const ::Ice::AsyncResultPtr&);
    
private:

    void setProps(const ::GMC::Prop&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setProps(const ::GMC::Prop&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool syncFullData()
    {
        return syncFullData(0);
    }
    bool syncFullData(const ::Ice::Context& __ctx)
    {
        return syncFullData(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_syncFullData()
    {
        return begin_syncFullData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_syncFullData(const ::Ice::Context& __ctx)
    {
        return begin_syncFullData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_syncFullData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncFullData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncFullData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncFullData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncFullData(const ::GMC::Callback_GMCMgmt_syncFullDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncFullData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncFullData(const ::Ice::Context& __ctx, const ::GMC::Callback_GMCMgmt_syncFullDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncFullData(&__ctx, __del, __cookie);
    }

    bool end_syncFullData(const ::Ice::AsyncResultPtr&);
    
private:

    bool syncFullData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_syncFullData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GMCMgmt> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GMCMgmt*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<GMCMgmt*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace GMC
{

class GMCMgmt : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool set(const ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void get(const ::GMC::UIDSEQ&, ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void getLatest(::Ice::Long, ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void getOnLineNum(::Ice::Int, ::Ice::Int&, const ::Ice::Context*) = 0;

    virtual void getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*) = 0;

    virtual void getStatus(::std::string&, const ::Ice::Context*) = 0;

    virtual void setStatus(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void getRunningStatus(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*) = 0;

    virtual void setRunningStatus(const ::GMC::Prop&, const ::Ice::Context*) = 0;

    virtual void getProps(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*) = 0;

    virtual void setProps(const ::GMC::Prop&, const ::Ice::Context*) = 0;

    virtual bool syncFullData(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace GMC
{

class GMCMgmt : virtual public ::IceDelegate::GMC::GMCMgmt,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool set(const ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void get(const ::GMC::UIDSEQ&, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getLatest(::Ice::Long, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getOnLineNum(::Ice::Int, ::Ice::Int&, const ::Ice::Context*);

    virtual void getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getStatus(::std::string&, const ::Ice::Context*);

    virtual void setStatus(const ::std::string&, const ::Ice::Context*);

    virtual void getRunningStatus(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);

    virtual void setRunningStatus(const ::GMC::Prop&, const ::Ice::Context*);

    virtual void getProps(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);

    virtual void setProps(const ::GMC::Prop&, const ::Ice::Context*);

    virtual bool syncFullData(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace GMC
{

class GMCMgmt : virtual public ::IceDelegate::GMC::GMCMgmt,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool set(const ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void get(const ::GMC::UIDSEQ&, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getLatest(::Ice::Long, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getOnLineNum(::Ice::Int, ::Ice::Int&, const ::Ice::Context*);

    virtual void getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Context*);

    virtual void getStatus(::std::string&, const ::Ice::Context*);

    virtual void setStatus(const ::std::string&, const ::Ice::Context*);

    virtual void getRunningStatus(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);

    virtual void setRunningStatus(const ::GMC::Prop&, const ::Ice::Context*);

    virtual void getProps(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Context*);

    virtual void setProps(const ::GMC::Prop&, const ::Ice::Context*);

    virtual bool syncFullData(const ::Ice::Context*);
};

}

}

namespace GMC
{

class GMCMgmt : virtual public ::Ice::Object
{
public:

    typedef GMCMgmtPrx ProxyType;
    typedef GMCMgmtPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool set(const ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___set(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void get(const ::GMC::UIDSEQ&, ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getLatest(::Ice::Long, ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLatest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void rectSearch(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rectSearch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void rectSearchWithType(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::GMC::StringVector&, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rectSearchWithType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getOnLineNum(::Ice::Int, ::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOnLineNum(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getWithTimeRange(::Ice::Long, ::Ice::Long, ::Ice::Int, ::GMC::GPSONES&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWithTimeRange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStatus(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRunningStatus(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRunningStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRunningStatus(const ::GMC::Prop&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRunningStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getProps(const ::GMC::PropName&, ::GMC::Prop&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getProps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setProps(const ::GMC::Prop&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setProps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool syncFullData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___syncFullData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const GMCMgmt& l, const GMCMgmt& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GMCMgmt& l, const GMCMgmt& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GMC
{

template<class T>
class CallbackNC_GMCMgmt_set : public Callback_GMCMgmt_set_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMCMgmt_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_set(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_setPtr
newCallback_GMCMgmt_set(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_set<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setPtr
newCallback_GMCMgmt_set(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_set<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_set : public Callback_GMCMgmt_set_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMCMgmt_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_set(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_setPtr
newCallback_GMCMgmt_set(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setPtr
newCallback_GMCMgmt_set(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_get : public Callback_GMCMgmt_get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::GPSONES&);

    CallbackNC_GMCMgmt_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_get(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(ones);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getPtr
newCallback_GMCMgmt_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getPtr
newCallback_GMCMgmt_get(T* instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_get : public Callback_GMCMgmt_get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::GPSONES&, const CT&);

    Callback_GMCMgmt_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_get(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getPtr
newCallback_GMCMgmt_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getPtr
newCallback_GMCMgmt_get(T* instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getLatest : public Callback_GMCMgmt_getLatest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::GPSONES&);

    CallbackNC_GMCMgmt_getLatest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_getLatest(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(ones);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getLatestPtr
newCallback_GMCMgmt_getLatest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getLatest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getLatestPtr
newCallback_GMCMgmt_getLatest(T* instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getLatest<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getLatest : public Callback_GMCMgmt_getLatest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::GPSONES&, const CT&);

    Callback_GMCMgmt_getLatest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_getLatest(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getLatestPtr
newCallback_GMCMgmt_getLatest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getLatest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getLatestPtr
newCallback_GMCMgmt_getLatest(T* instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getLatest<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_rectSearch : public Callback_GMCMgmt_rectSearch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::GPSONES&);

    CallbackNC_GMCMgmt_rectSearch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_rectSearch(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(ones);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_rectSearchPtr
newCallback_GMCMgmt_rectSearch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_rectSearch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_rectSearchPtr
newCallback_GMCMgmt_rectSearch(T* instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_rectSearch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_rectSearch : public Callback_GMCMgmt_rectSearch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::GPSONES&, const CT&);

    Callback_GMCMgmt_rectSearch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_rectSearch(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_rectSearchPtr
newCallback_GMCMgmt_rectSearch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_rectSearch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_rectSearchPtr
newCallback_GMCMgmt_rectSearch(T* instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_rectSearch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_rectSearchWithType : public Callback_GMCMgmt_rectSearchWithType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::GPSONES&);

    CallbackNC_GMCMgmt_rectSearchWithType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_rectSearchWithType(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(ones);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_rectSearchWithTypePtr
newCallback_GMCMgmt_rectSearchWithType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_rectSearchWithType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_rectSearchWithTypePtr
newCallback_GMCMgmt_rectSearchWithType(T* instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_rectSearchWithType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_rectSearchWithType : public Callback_GMCMgmt_rectSearchWithType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::GPSONES&, const CT&);

    Callback_GMCMgmt_rectSearchWithType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_rectSearchWithType(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_rectSearchWithTypePtr
newCallback_GMCMgmt_rectSearchWithType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_rectSearchWithType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_rectSearchWithTypePtr
newCallback_GMCMgmt_rectSearchWithType(T* instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_rectSearchWithType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getOnLineNum : public Callback_GMCMgmt_getOnLineNum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_GMCMgmt_getOnLineNum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int num;
        try
        {
            __proxy->end_getOnLineNum(num, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(num);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(num);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getOnLineNumPtr
newCallback_GMCMgmt_getOnLineNum(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getOnLineNum<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getOnLineNumPtr
newCallback_GMCMgmt_getOnLineNum(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getOnLineNum<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getOnLineNum : public Callback_GMCMgmt_getOnLineNum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_GMCMgmt_getOnLineNum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int num;
        try
        {
            __proxy->end_getOnLineNum(num, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(num, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(num, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getOnLineNumPtr
newCallback_GMCMgmt_getOnLineNum(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getOnLineNum<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getOnLineNumPtr
newCallback_GMCMgmt_getOnLineNum(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getOnLineNum<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getWithTimeRange : public Callback_GMCMgmt_getWithTimeRange_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::GPSONES&);

    CallbackNC_GMCMgmt_getWithTimeRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_getWithTimeRange(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(ones);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getWithTimeRangePtr
newCallback_GMCMgmt_getWithTimeRange(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getWithTimeRange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getWithTimeRangePtr
newCallback_GMCMgmt_getWithTimeRange(T* instance, void (T::*cb)(const ::GMC::GPSONES&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getWithTimeRange<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getWithTimeRange : public Callback_GMCMgmt_getWithTimeRange_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::GPSONES&, const CT&);

    Callback_GMCMgmt_getWithTimeRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::GPSONES ones;
        try
        {
            __proxy->end_getWithTimeRange(ones, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(ones, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getWithTimeRangePtr
newCallback_GMCMgmt_getWithTimeRange(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getWithTimeRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getWithTimeRangePtr
newCallback_GMCMgmt_getWithTimeRange(T* instance, void (T::*cb)(const ::GMC::GPSONES&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getWithTimeRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getStatus : public Callback_GMCMgmt_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GMCMgmt_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::std::string status;
        try
        {
            __proxy->end_getStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(status);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getStatusPtr
newCallback_GMCMgmt_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getStatusPtr
newCallback_GMCMgmt_getStatus(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getStatus : public Callback_GMCMgmt_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GMCMgmt_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::std::string status;
        try
        {
            __proxy->end_getStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getStatusPtr
newCallback_GMCMgmt_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getStatusPtr
newCallback_GMCMgmt_getStatus(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_setStatus : public Callback_GMCMgmt_setStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GMCMgmt_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_setStatus : public Callback_GMCMgmt_setStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GMCMgmt_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setStatusPtr
newCallback_GMCMgmt_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getRunningStatus : public Callback_GMCMgmt_getRunningStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::Prop&);

    CallbackNC_GMCMgmt_getRunningStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::Prop result;
        try
        {
            __proxy->end_getRunningStatus(result, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(result);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(result);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getRunningStatusPtr
newCallback_GMCMgmt_getRunningStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::Prop&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getRunningStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getRunningStatusPtr
newCallback_GMCMgmt_getRunningStatus(T* instance, void (T::*cb)(const ::GMC::Prop&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getRunningStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getRunningStatus : public Callback_GMCMgmt_getRunningStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::Prop&, const CT&);

    Callback_GMCMgmt_getRunningStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::Prop result;
        try
        {
            __proxy->end_getRunningStatus(result, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(result, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(result, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getRunningStatusPtr
newCallback_GMCMgmt_getRunningStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::Prop&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getRunningStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getRunningStatusPtr
newCallback_GMCMgmt_getRunningStatus(T* instance, void (T::*cb)(const ::GMC::Prop&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getRunningStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_setRunningStatus : public Callback_GMCMgmt_setRunningStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GMCMgmt_setRunningStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setRunningStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setRunningStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setRunningStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setRunningStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_setRunningStatus : public Callback_GMCMgmt_setRunningStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GMCMgmt_setRunningStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setRunningStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setRunningStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setRunningStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setRunningStatusPtr
newCallback_GMCMgmt_setRunningStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setRunningStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_getProps : public Callback_GMCMgmt_getProps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMC::Prop&);

    CallbackNC_GMCMgmt_getProps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::Prop props;
        try
        {
            __proxy->end_getProps(props, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(props);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(props);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_getPropsPtr
newCallback_GMCMgmt_getProps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::Prop&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getProps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_getPropsPtr
newCallback_GMCMgmt_getProps(T* instance, void (T::*cb)(const ::GMC::Prop&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_getProps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_getProps : public Callback_GMCMgmt_getProps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMC::Prop&, const CT&);

    Callback_GMCMgmt_getProps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        ::GMC::Prop props;
        try
        {
            __proxy->end_getProps(props, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(props, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(props, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_getPropsPtr
newCallback_GMCMgmt_getProps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMC::Prop&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getProps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_getPropsPtr
newCallback_GMCMgmt_getProps(T* instance, void (T::*cb)(const ::GMC::Prop&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_getProps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_setProps : public Callback_GMCMgmt_setProps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GMCMgmt_setProps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setProps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setProps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setProps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_setProps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_setProps : public Callback_GMCMgmt_setProps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GMCMgmt_setProps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setProps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setProps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setProps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_setPropsPtr
newCallback_GMCMgmt_setProps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_setProps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GMCMgmt_syncFullData : public Callback_GMCMgmt_syncFullData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GMCMgmt_syncFullData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_syncFullData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GMCMgmt_syncFullDataPtr
newCallback_GMCMgmt_syncFullData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_syncFullData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GMCMgmt_syncFullDataPtr
newCallback_GMCMgmt_syncFullData(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GMCMgmt_syncFullData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GMCMgmt_syncFullData : public Callback_GMCMgmt_syncFullData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GMCMgmt_syncFullData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMC::GMCMgmtPrx __proxy = ::GMC::GMCMgmtPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_syncFullData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GMCMgmt_syncFullDataPtr
newCallback_GMCMgmt_syncFullData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_syncFullData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GMCMgmt_syncFullDataPtr
newCallback_GMCMgmt_syncFullData(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GMCMgmt_syncFullData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
