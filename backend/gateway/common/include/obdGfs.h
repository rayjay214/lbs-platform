// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `obdGfs.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __obdGfs_h__
#define __obdGfs_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GfsOBD
{

class ObdGfs;

}

}

namespace GfsOBD
{

class ObdGfs;
bool operator==(const ObdGfs&, const ObdGfs&);
bool operator<(const ObdGfs&, const ObdGfs&);

}

namespace IceInternal
{

::Ice::Object* upCast(::GfsOBD::ObdGfs*);
::IceProxy::Ice::Object* upCast(::IceProxy::GfsOBD::ObdGfs*);

}

namespace GfsOBD
{

typedef ::IceInternal::Handle< ::GfsOBD::ObdGfs> ObdGfsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GfsOBD::ObdGfs> ObdGfsPrx;

void __read(::IceInternal::BasicStream*, ObdGfsPrx&);
void __patch__ObdGfsPtr(void*, ::Ice::ObjectPtr&);

}

namespace GfsOBD
{

typedef ::std::vector< ::Ice::Byte> ObdRecordStream;

typedef ::std::vector< ::GfsOBD::ObdRecordStream> ObdRecordStreams;
void __writeObdRecordStreams(::IceInternal::BasicStream*, const ::GfsOBD::ObdRecordStream*, const ::GfsOBD::ObdRecordStream*);
void __readObdRecordStreams(::IceInternal::BasicStream*, ObdRecordStreams&);

struct Request
{
    ::Ice::Long uid;
    ::Ice::Long beginTime;
    ::Ice::Long endTime;
    ::Ice::Int count;

    bool operator==(const Request& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(uid != __rhs.uid)
        {
            return false;
        }
        if(beginTime != __rhs.beginTime)
        {
            return false;
        }
        if(endTime != __rhs.endTime)
        {
            return false;
        }
        if(count != __rhs.count)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Request& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(uid < __rhs.uid)
        {
            return true;
        }
        else if(__rhs.uid < uid)
        {
            return false;
        }
        if(beginTime < __rhs.beginTime)
        {
            return true;
        }
        else if(__rhs.beginTime < beginTime)
        {
            return false;
        }
        if(endTime < __rhs.endTime)
        {
            return true;
        }
        else if(__rhs.endTime < endTime)
        {
            return false;
        }
        if(count < __rhs.count)
        {
            return true;
        }
        else if(__rhs.count < count)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Request& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Request& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Request& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Request& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Response
{
    ::GfsOBD::Request req;
    ::GfsOBD::ObdRecordStreams records;

    bool operator==(const Response& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(req != __rhs.req)
        {
            return false;
        }
        if(records != __rhs.records)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Response& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(req < __rhs.req)
        {
            return true;
        }
        else if(__rhs.req < req)
        {
            return false;
        }
        if(records < __rhs.records)
        {
            return true;
        }
        else if(__rhs.records < records)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Response& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Response& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Response& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Response& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace GfsOBD
{

class Callback_ObdGfs_getRecords_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ObdGfs_getRecords_Base> Callback_ObdGfs_getRecordsPtr;

}

namespace IceProxy
{

namespace GfsOBD
{

class ObdGfs : virtual public ::IceProxy::Ice::Object
{
public:

    bool getRecords(const ::GfsOBD::Request& req, ::GfsOBD::Response& res)
    {
        return getRecords(req, res, 0);
    }
    bool getRecords(const ::GfsOBD::Request& req, ::GfsOBD::Response& res, const ::Ice::Context& __ctx)
    {
        return getRecords(req, res, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req)
    {
        return begin_getRecords(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req, const ::Ice::Context& __ctx)
    {
        return begin_getRecords(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecords(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecords(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req, const ::GfsOBD::Callback_ObdGfs_getRecordsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecords(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request& req, const ::Ice::Context& __ctx, const ::GfsOBD::Callback_ObdGfs_getRecordsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecords(req, &__ctx, __del, __cookie);
    }

    bool end_getRecords(::GfsOBD::Response& res, const ::Ice::AsyncResultPtr&);
    
private:

    bool getRecords(const ::GfsOBD::Request&, ::GfsOBD::Response&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRecords(const ::GfsOBD::Request&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ObdGfs> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ObdGfs*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ObdGfs*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace GfsOBD
{

class ObdGfs : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool getRecords(const ::GfsOBD::Request&, ::GfsOBD::Response&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace GfsOBD
{

class ObdGfs : virtual public ::IceDelegate::GfsOBD::ObdGfs,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool getRecords(const ::GfsOBD::Request&, ::GfsOBD::Response&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace GfsOBD
{

class ObdGfs : virtual public ::IceDelegate::GfsOBD::ObdGfs,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool getRecords(const ::GfsOBD::Request&, ::GfsOBD::Response&, const ::Ice::Context*);
};

}

}

namespace GfsOBD
{

class ObdGfs : virtual public ::Ice::Object
{
public:

    typedef ObdGfsPrx ProxyType;
    typedef ObdGfsPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool getRecords(const ::GfsOBD::Request&, ::GfsOBD::Response&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRecords(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ObdGfs& l, const ObdGfs& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ObdGfs& l, const ObdGfs& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GfsOBD
{

template<class T>
class CallbackNC_ObdGfs_getRecords : public Callback_ObdGfs_getRecords_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::GfsOBD::Response&);

    CallbackNC_ObdGfs_getRecords(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GfsOBD::ObdGfsPrx __proxy = ::GfsOBD::ObdGfsPrx::uncheckedCast(__result->getProxy());
        ::GfsOBD::Response res;
        bool __ret;
        try
        {
            __ret = __proxy->end_getRecords(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, res);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ObdGfs_getRecordsPtr
newCallback_ObdGfs_getRecords(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::GfsOBD::Response&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObdGfs_getRecords<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObdGfs_getRecordsPtr
newCallback_ObdGfs_getRecords(T* instance, void (T::*cb)(bool, const ::GfsOBD::Response&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObdGfs_getRecords<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ObdGfs_getRecords : public Callback_ObdGfs_getRecords_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::GfsOBD::Response&, const CT&);

    Callback_ObdGfs_getRecords(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GfsOBD::ObdGfsPrx __proxy = ::GfsOBD::ObdGfsPrx::uncheckedCast(__result->getProxy());
        ::GfsOBD::Response res;
        bool __ret;
        try
        {
            __ret = __proxy->end_getRecords(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ObdGfs_getRecordsPtr
newCallback_ObdGfs_getRecords(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::GfsOBD::Response&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObdGfs_getRecords<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObdGfs_getRecordsPtr
newCallback_ObdGfs_getRecords(T* instance, void (T::*cb)(bool, const ::GfsOBD::Response&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObdGfs_getRecords<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
