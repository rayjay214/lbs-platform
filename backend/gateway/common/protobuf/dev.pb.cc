// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dev.proto

#include "dev.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandReq_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandRsp_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GpsMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HbMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IccidMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LbsMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LbsMsg_LbsInfo_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WifiMsg_dev_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dev_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiMsg_WifiInfo_dev_2eproto;
namespace YunJi {
class GpsMsg_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsMsg_ExtEntry_DoNotUse> _instance;
} _GpsMsg_ExtEntry_DoNotUse_default_instance_;
class GpsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsMsg> _instance;
} _GpsMsg_default_instance_;
class HbMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HbMsg> _instance;
} _HbMsg_default_instance_;
class AlarmMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmMsg> _instance;
} _AlarmMsg_default_instance_;
class CommandReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandReq> _instance;
} _CommandReq_default_instance_;
class CommandRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandRsp> _instance;
} _CommandRsp_default_instance_;
class IccidMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IccidMsg> _instance;
} _IccidMsg_default_instance_;
class LbsMsg_LbsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LbsMsg_LbsInfo> _instance;
} _LbsMsg_LbsInfo_default_instance_;
class LbsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LbsMsg> _instance;
} _LbsMsg_default_instance_;
class WifiMsg_WifiInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiMsg_WifiInfo> _instance;
} _WifiMsg_WifiInfo_default_instance_;
class WifiMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiMsg> _instance;
} _WifiMsg_default_instance_;
class UpDevMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpDevMsg> _instance;
  const ::YunJi::GpsMsg* gps_;
  const ::YunJi::HbMsg* hb_;
  const ::YunJi::AlarmMsg* alarm_;
  const ::YunJi::CommandRsp* cmdrsp_;
  const ::YunJi::IccidMsg* iccid_;
  const ::YunJi::LbsMsg* lbs_;
  const ::YunJi::WifiMsg* wifi_;
} _UpDevMsg_default_instance_;
class DownDevMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownDevMsg> _instance;
} _DownDevMsg_default_instance_;
}  // namespace YunJi
static void InitDefaultsscc_info_AlarmMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_AlarmMsg_default_instance_;
    new (ptr) ::YunJi::AlarmMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::AlarmMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmMsg_dev_2eproto}, {}};

static void InitDefaultsscc_info_CommandReq_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_CommandReq_default_instance_;
    new (ptr) ::YunJi::CommandReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::CommandReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandReq_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandReq_dev_2eproto}, {}};

static void InitDefaultsscc_info_CommandRsp_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_CommandRsp_default_instance_;
    new (ptr) ::YunJi::CommandRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::CommandRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandRsp_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandRsp_dev_2eproto}, {}};

static void InitDefaultsscc_info_DownDevMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_DownDevMsg_default_instance_;
    new (ptr) ::YunJi::DownDevMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::DownDevMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownDevMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DownDevMsg_dev_2eproto}, {
      &scc_info_CommandReq_dev_2eproto.base,}};

static void InitDefaultsscc_info_GpsMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_GpsMsg_default_instance_;
    new (ptr) ::YunJi::GpsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::GpsMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GpsMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GpsMsg_dev_2eproto}, {
      &scc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto.base,}};

static void InitDefaultsscc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_GpsMsg_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::YunJi::GpsMsg_ExtEntry_DoNotUse();
  }
  ::YunJi::GpsMsg_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto}, {}};

static void InitDefaultsscc_info_HbMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_HbMsg_default_instance_;
    new (ptr) ::YunJi::HbMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::HbMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HbMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HbMsg_dev_2eproto}, {}};

static void InitDefaultsscc_info_IccidMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_IccidMsg_default_instance_;
    new (ptr) ::YunJi::IccidMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::IccidMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IccidMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IccidMsg_dev_2eproto}, {}};

static void InitDefaultsscc_info_LbsMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_LbsMsg_default_instance_;
    new (ptr) ::YunJi::LbsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::LbsMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LbsMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LbsMsg_dev_2eproto}, {
      &scc_info_LbsMsg_LbsInfo_dev_2eproto.base,}};

static void InitDefaultsscc_info_LbsMsg_LbsInfo_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_LbsMsg_LbsInfo_default_instance_;
    new (ptr) ::YunJi::LbsMsg_LbsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::LbsMsg_LbsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LbsMsg_LbsInfo_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LbsMsg_LbsInfo_dev_2eproto}, {}};

static void InitDefaultsscc_info_UpDevMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_UpDevMsg_default_instance_;
    new (ptr) ::YunJi::UpDevMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::UpDevMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UpDevMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_UpDevMsg_dev_2eproto}, {
      &scc_info_GpsMsg_dev_2eproto.base,
      &scc_info_HbMsg_dev_2eproto.base,
      &scc_info_AlarmMsg_dev_2eproto.base,
      &scc_info_CommandRsp_dev_2eproto.base,
      &scc_info_IccidMsg_dev_2eproto.base,
      &scc_info_LbsMsg_dev_2eproto.base,
      &scc_info_WifiMsg_dev_2eproto.base,}};

static void InitDefaultsscc_info_WifiMsg_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_WifiMsg_default_instance_;
    new (ptr) ::YunJi::WifiMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::WifiMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WifiMsg_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WifiMsg_dev_2eproto}, {
      &scc_info_WifiMsg_WifiInfo_dev_2eproto.base,}};

static void InitDefaultsscc_info_WifiMsg_WifiInfo_dev_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YunJi::_WifiMsg_WifiInfo_default_instance_;
    new (ptr) ::YunJi::WifiMsg_WifiInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YunJi::WifiMsg_WifiInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiMsg_WifiInfo_dev_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WifiMsg_WifiInfo_dev_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dev_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dev_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dev_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dev_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg_ExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg_ExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, datetime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, systime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, lng_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, lat_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, speed_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, route_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, status_),
  PROTOBUF_FIELD_OFFSET(::YunJi::GpsMsg, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, hearttime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::HbMsg, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, alarmtime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, alarmtype_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, lng_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, lat_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, speed_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, route_),
  PROTOBUF_FIELD_OFFSET(::YunJi::AlarmMsg, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, reqtime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, protocol_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandReq, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, rsptime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::CommandRsp, rsp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::IccidMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::IccidMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::IccidMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::IccidMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::IccidMsg, iccid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg_LbsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg_LbsInfo, lac_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg_LbsInfo, ci_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg_LbsInfo, rssi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, datetime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, systime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, ta_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, mcc_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, mnc_),
  PROTOBUF_FIELD_OFFSET(::YunJi::LbsMsg, lbsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg_WifiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg_WifiInfo, ssid_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg_WifiInfo, rssi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, id_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, imei_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, datetime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, systime_),
  PROTOBUF_FIELD_OFFSET(::YunJi::WifiMsg, wifiinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::UpDevMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::YunJi::UpDevMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::UpDevMsg, msgtype_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, gps_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, hb_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, alarm_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, cmdrsp_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, iccid_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, lbs_),
  offsetof(::YunJi::UpDevMsgDefaultTypeInternal, wifi_),
  PROTOBUF_FIELD_OFFSET(::YunJi::UpDevMsg, msgbody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YunJi::DownDevMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YunJi::DownDevMsg, msgtype_),
  PROTOBUF_FIELD_OFFSET(::YunJi::DownDevMsg, cmdreq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::YunJi::GpsMsg_ExtEntry_DoNotUse)},
  { 9, -1, sizeof(::YunJi::GpsMsg)},
  { 25, -1, sizeof(::YunJi::HbMsg)},
  { 35, -1, sizeof(::YunJi::AlarmMsg)},
  { 49, -1, sizeof(::YunJi::CommandReq)},
  { 60, -1, sizeof(::YunJi::CommandRsp)},
  { 70, -1, sizeof(::YunJi::IccidMsg)},
  { 79, -1, sizeof(::YunJi::LbsMsg_LbsInfo)},
  { 87, -1, sizeof(::YunJi::LbsMsg)},
  { 101, -1, sizeof(::YunJi::WifiMsg_WifiInfo)},
  { 108, -1, sizeof(::YunJi::WifiMsg)},
  { 119, -1, sizeof(::YunJi::UpDevMsg)},
  { 133, -1, sizeof(::YunJi::DownDevMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_GpsMsg_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_GpsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_HbMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_AlarmMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_CommandReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_CommandRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_IccidMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_LbsMsg_LbsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_LbsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_WifiMsg_WifiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_WifiMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_UpDevMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YunJi::_DownDevMsg_default_instance_),
};

const char descriptor_table_protodef_dev_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tdev.proto\022\005YunJi\"\353\001\n\006GpsMsg\022\n\n\002id\030\001 \001("
  "\004\022\014\n\004imei\030\002 \001(\t\022\020\n\010datetime\030\003 \001(\004\022\017\n\007sys"
  "time\030\004 \001(\004\022\013\n\003lng\030\005 \001(\021\022\013\n\003lat\030\006 \001(\021\022\r\n\005"
  "speed\030\007 \001(\021\022\r\n\005route\030\010 \001(\021\022\013\n\003seq\030\t \001(\021\022"
  "\016\n\006status\030\n \001(\014\022#\n\003ext\030\013 \003(\0132\026.YunJi.Gps"
  "Msg.ExtEntry\032*\n\010ExtEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\014:\0028\001\"Q\n\005HbMsg\022\n\n\002id\030\001 \001(\004\022\014\n"
  "\004imei\030\002 \001(\t\022\021\n\thearttime\030\003 \001(\004\022\013\n\003seq\030\004 "
  "\001(\021\022\016\n\006status\030\005 \001(\014\"\222\001\n\010AlarmMsg\022\n\n\002id\030\001"
  " \001(\004\022\014\n\004imei\030\002 \001(\t\022\021\n\talarmtime\030\003 \001(\004\022\021\n"
  "\talarmtype\030\004 \001(\021\022\013\n\003lng\030\005 \001(\021\022\013\n\003lat\030\006 \001"
  "(\021\022\r\n\005speed\030\007 \001(\021\022\r\n\005route\030\010 \001(\021\022\016\n\006stat"
  "us\030\t \001(\014\"g\n\nCommandReq\022\n\n\002id\030\001 \001(\004\022\014\n\004im"
  "ei\030\002 \001(\t\022\013\n\003seq\030\003 \001(\021\022\017\n\007reqtime\030\004 \001(\004\022\020"
  "\n\010protocol\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\"Q\n\nCom"
  "mandRsp\022\n\n\002id\030\001 \001(\004\022\014\n\004imei\030\002 \001(\t\022\013\n\003seq"
  "\030\003 \001(\021\022\017\n\007rsptime\030\004 \001(\004\022\013\n\003rsp\030\005 \001(\t\"@\n\010"
  "IccidMsg\022\n\n\002id\030\001 \001(\004\022\014\n\004imei\030\002 \001(\t\022\013\n\003se"
  "q\030\003 \001(\021\022\r\n\005iccid\030\004 \001(\t\"\322\001\n\006LbsMsg\022\n\n\002id\030"
  "\001 \001(\004\022\014\n\004imei\030\002 \001(\t\022\013\n\003seq\030\003 \001(\021\022\020\n\010date"
  "time\030\004 \001(\004\022\017\n\007systime\030\005 \001(\004\022\n\n\002ta\030\006 \001(\t\022"
  "\013\n\003mcc\030\007 \001(\t\022\013\n\003mnc\030\010 \001(\t\022&\n\007lbsinfo\030\t \003"
  "(\0132\025.YunJi.LbsMsg.LbsInfo\0320\n\007LbsInfo\022\013\n\003"
  "lac\030\001 \001(\t\022\n\n\002ci\030\002 \001(\t\022\014\n\004rssi\030\003 \001(\021\"\246\001\n\007"
  "WifiMsg\022\n\n\002id\030\001 \001(\004\022\014\n\004imei\030\002 \001(\t\022\013\n\003seq"
  "\030\003 \001(\021\022\020\n\010datetime\030\004 \001(\004\022\017\n\007systime\030\005 \001("
  "\004\022)\n\010wifiinfo\030\006 \003(\0132\027.YunJi.WifiMsg.Wifi"
  "Info\032&\n\010WifiInfo\022\014\n\004ssid\030\001 \001(\t\022\014\n\004rssi\030\002"
  " \001(\021\"\227\002\n\010UpDevMsg\022\037\n\007msgtype\030\001 \001(\0162\016.Yun"
  "Ji.MsgType\022\034\n\003gps\030\002 \001(\0132\r.YunJi.GpsMsgH\000"
  "\022\032\n\002hb\030\003 \001(\0132\014.YunJi.HbMsgH\000\022 \n\005alarm\030\004 "
  "\001(\0132\017.YunJi.AlarmMsgH\000\022#\n\006cmdrsp\030\005 \001(\0132\021"
  ".YunJi.CommandRspH\000\022 \n\005iccid\030\006 \001(\0132\017.Yun"
  "Ji.IccidMsgH\000\022\034\n\003lbs\030\007 \001(\0132\r.YunJi.LbsMs"
  "gH\000\022\036\n\004wifi\030\010 \001(\0132\016.YunJi.WifiMsgH\000B\t\n\007m"
  "sgbody\"P\n\nDownDevMsg\022\037\n\007msgtype\030\001 \001(\0162\016."
  "YunJi.MsgType\022!\n\006cmdreq\030\002 \001(\0132\021.YunJi.Co"
  "mmandReq*\215\001\n\007MsgType\022\016\n\nkInalidMsg\020\000\022\013\n\007"
  "kGpsMsg\020\001\022\013\n\007kLbsMsg\020\002\022\014\n\010kWifiMsg\020\003\022\n\n\006"
  "kHbMsg\020\004\022\r\n\tkAlarmMsg\020\005\022\017\n\013kCommandReq\020\006"
  "\022\017\n\013kCommandRsp\020\007\022\r\n\tkIccidMsg\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dev_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dev_2eproto_sccs[13] = {
  &scc_info_AlarmMsg_dev_2eproto.base,
  &scc_info_CommandReq_dev_2eproto.base,
  &scc_info_CommandRsp_dev_2eproto.base,
  &scc_info_DownDevMsg_dev_2eproto.base,
  &scc_info_GpsMsg_dev_2eproto.base,
  &scc_info_GpsMsg_ExtEntry_DoNotUse_dev_2eproto.base,
  &scc_info_HbMsg_dev_2eproto.base,
  &scc_info_IccidMsg_dev_2eproto.base,
  &scc_info_LbsMsg_dev_2eproto.base,
  &scc_info_LbsMsg_LbsInfo_dev_2eproto.base,
  &scc_info_UpDevMsg_dev_2eproto.base,
  &scc_info_WifiMsg_dev_2eproto.base,
  &scc_info_WifiMsg_WifiInfo_dev_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dev_2eproto_once;
static bool descriptor_table_dev_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dev_2eproto = {
  &descriptor_table_dev_2eproto_initialized, descriptor_table_protodef_dev_2eproto, "dev.proto", 1640,
  &descriptor_table_dev_2eproto_once, descriptor_table_dev_2eproto_sccs, descriptor_table_dev_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_dev_2eproto::offsets,
  file_level_metadata_dev_2eproto, 13, file_level_enum_descriptors_dev_2eproto, file_level_service_descriptors_dev_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dev_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dev_2eproto), true);
namespace YunJi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dev_2eproto);
  return file_level_enum_descriptors_dev_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

GpsMsg_ExtEntry_DoNotUse::GpsMsg_ExtEntry_DoNotUse() {}
GpsMsg_ExtEntry_DoNotUse::GpsMsg_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GpsMsg_ExtEntry_DoNotUse::MergeFrom(const GpsMsg_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GpsMsg_ExtEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GpsMsg_ExtEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GpsMsg::InitAsDefaultInstance() {
}
class GpsMsg::_Internal {
 public:
};

GpsMsg::GpsMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.GpsMsg)
}
GpsMsg::GpsMsg(const GpsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.GpsMsg)
}

void GpsMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpsMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

GpsMsg::~GpsMsg() {
  // @@protoc_insertion_point(destructor:YunJi.GpsMsg)
  SharedDtor();
}

void GpsMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpsMsg& GpsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpsMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void GpsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.GpsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* GpsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.GpsMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 systime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lng = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 route = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> ext = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.GpsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.GpsMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // uint64 datetime = 3;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_datetime(), target);
  }

  // uint64 systime = 4;
  if (this->systime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_systime(), target);
  }

  // sint32 lng = 5;
  if (this->lng() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_lng(), target);
  }

  // sint32 lat = 6;
  if (this->lat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_lat(), target);
  }

  // sint32 speed = 7;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_speed(), target);
  }

  // sint32 route = 8;
  if (this->route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_route(), target);
  }

  // sint32 seq = 9;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_seq(), target);
  }

  // bytes status = 10;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_status(), target);
  }

  // map<string, bytes> ext = 11;
  if (!this->_internal_ext().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "YunJi.GpsMsg.ExtEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ext().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ext().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GpsMsg_ExtEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it) {
        target = GpsMsg_ExtEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.GpsMsg)
  return target;
}

size_t GpsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.GpsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> ext = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ext().begin();
      it != this->_internal_ext().end(); ++it) {
    total_size += GpsMsg_ExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // bytes status = 10;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 datetime = 3;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datetime());
  }

  // uint64 systime = 4;
  if (this->systime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_systime());
  }

  // sint32 lng = 5;
  if (this->lng() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lng());
  }

  // sint32 lat = 6;
  if (this->lat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lat());
  }

  // sint32 speed = 7;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speed());
  }

  // sint32 route = 8;
  if (this->route() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_route());
  }

  // sint32 seq = 9;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.GpsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.GpsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.GpsMsg)
    MergeFrom(*source);
  }
}

void GpsMsg::MergeFrom(const GpsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.GpsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.systime() != 0) {
    _internal_set_systime(from._internal_systime());
  }
  if (from.lng() != 0) {
    _internal_set_lng(from._internal_lng());
  }
  if (from.lat() != 0) {
    _internal_set_lat(from._internal_lat());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.route() != 0) {
    _internal_set_route(from._internal_route());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void GpsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.GpsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsMsg::CopyFrom(const GpsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.GpsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsMsg::IsInitialized() const {
  return true;
}

void GpsMsg::InternalSwap(GpsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(datetime_, other->datetime_);
  swap(systime_, other->systime_);
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(speed_, other->speed_);
  swap(route_, other->route_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HbMsg::InitAsDefaultInstance() {
}
class HbMsg::_Internal {
 public:
};

HbMsg::HbMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.HbMsg)
}
HbMsg::HbMsg(const HbMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.HbMsg)
}

void HbMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HbMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

HbMsg::~HbMsg() {
  // @@protoc_insertion_point(destructor:YunJi.HbMsg)
  SharedDtor();
}

void HbMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HbMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HbMsg& HbMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HbMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void HbMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.HbMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* HbMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.HbMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hearttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hearttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HbMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.HbMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.HbMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // uint64 hearttime = 3;
  if (this->hearttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_hearttime(), target);
  }

  // sint32 seq = 4;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_seq(), target);
  }

  // bytes status = 5;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.HbMsg)
  return target;
}

size_t HbMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.HbMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // bytes status = 5;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 hearttime = 3;
  if (this->hearttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hearttime());
  }

  // sint32 seq = 4;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HbMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.HbMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HbMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HbMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.HbMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.HbMsg)
    MergeFrom(*source);
  }
}

void HbMsg::MergeFrom(const HbMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.HbMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.hearttime() != 0) {
    _internal_set_hearttime(from._internal_hearttime());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void HbMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.HbMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HbMsg::CopyFrom(const HbMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.HbMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HbMsg::IsInitialized() const {
  return true;
}

void HbMsg::InternalSwap(HbMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(hearttime_, other->hearttime_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HbMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmMsg::InitAsDefaultInstance() {
}
class AlarmMsg::_Internal {
 public:
};

AlarmMsg::AlarmMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.AlarmMsg)
}
AlarmMsg::AlarmMsg(const AlarmMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_) -
    reinterpret_cast<char*>(&id_)) + sizeof(route_));
  // @@protoc_insertion_point(copy_constructor:YunJi.AlarmMsg)
}

void AlarmMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_) -
      reinterpret_cast<char*>(&id_)) + sizeof(route_));
}

AlarmMsg::~AlarmMsg() {
  // @@protoc_insertion_point(destructor:YunJi.AlarmMsg)
  SharedDtor();
}

void AlarmMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmMsg& AlarmMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void AlarmMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.AlarmMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_) -
      reinterpret_cast<char*>(&id_)) + sizeof(route_));
  _internal_metadata_.Clear();
}

const char* AlarmMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.AlarmMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 alarmtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          alarmtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 alarmtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          alarmtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lng = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 route = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.AlarmMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.AlarmMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // uint64 alarmtime = 3;
  if (this->alarmtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_alarmtime(), target);
  }

  // sint32 alarmtype = 4;
  if (this->alarmtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_alarmtype(), target);
  }

  // sint32 lng = 5;
  if (this->lng() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_lng(), target);
  }

  // sint32 lat = 6;
  if (this->lat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_lat(), target);
  }

  // sint32 speed = 7;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_speed(), target);
  }

  // sint32 route = 8;
  if (this->route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_route(), target);
  }

  // bytes status = 9;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.AlarmMsg)
  return target;
}

size_t AlarmMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.AlarmMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // bytes status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 alarmtime = 3;
  if (this->alarmtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_alarmtime());
  }

  // sint32 alarmtype = 4;
  if (this->alarmtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_alarmtype());
  }

  // sint32 lng = 5;
  if (this->lng() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lng());
  }

  // sint32 lat = 6;
  if (this->lat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lat());
  }

  // sint32 speed = 7;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speed());
  }

  // sint32 route = 8;
  if (this->route() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_route());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.AlarmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.AlarmMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.AlarmMsg)
    MergeFrom(*source);
  }
}

void AlarmMsg::MergeFrom(const AlarmMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.AlarmMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.alarmtime() != 0) {
    _internal_set_alarmtime(from._internal_alarmtime());
  }
  if (from.alarmtype() != 0) {
    _internal_set_alarmtype(from._internal_alarmtype());
  }
  if (from.lng() != 0) {
    _internal_set_lng(from._internal_lng());
  }
  if (from.lat() != 0) {
    _internal_set_lat(from._internal_lat());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.route() != 0) {
    _internal_set_route(from._internal_route());
  }
}

void AlarmMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.AlarmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMsg::CopyFrom(const AlarmMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.AlarmMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMsg::IsInitialized() const {
  return true;
}

void AlarmMsg::InternalSwap(AlarmMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(alarmtime_, other->alarmtime_);
  swap(alarmtype_, other->alarmtype_);
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(speed_, other->speed_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandReq::InitAsDefaultInstance() {
}
class CommandReq::_Internal {
 public:
};

CommandReq::CommandReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.CommandReq)
}
CommandReq::CommandReq(const CommandReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.CommandReq)
}

void CommandReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandReq_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

CommandReq::~CommandReq() {
  // @@protoc_insertion_point(destructor:YunJi.CommandReq)
  SharedDtor();
}

void CommandReq::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandReq& CommandReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandReq_dev_2eproto.base);
  return *internal_default_instance();
}


void CommandReq::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.CommandReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* CommandReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.CommandReq.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reqtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reqtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.CommandReq.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.CommandReq.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.CommandReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.CommandReq.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint64 reqtime = 4;
  if (this->reqtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reqtime(), target);
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.CommandReq.protocol");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocol(), target);
  }

  // string content = 6;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.CommandReq.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.CommandReq)
  return target;
}

size_t CommandReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.CommandReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 reqtime = 4;
  if (this->reqtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reqtime());
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.CommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.CommandReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.CommandReq)
    MergeFrom(*source);
  }
}

void CommandReq::MergeFrom(const CommandReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.CommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reqtime() != 0) {
    _internal_set_reqtime(from._internal_reqtime());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void CommandReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.CommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReq::CopyFrom(const CommandReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.CommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReq::IsInitialized() const {
  return true;
}

void CommandReq::InternalSwap(CommandReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reqtime_, other->reqtime_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandRsp::InitAsDefaultInstance() {
}
class CommandRsp::_Internal {
 public:
};

CommandRsp::CommandRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.CommandRsp)
}
CommandRsp::CommandRsp(const CommandRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  rsp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsp().empty()) {
    rsp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsp_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.CommandRsp)
}

void CommandRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandRsp_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

CommandRsp::~CommandRsp() {
  // @@protoc_insertion_point(destructor:YunJi.CommandRsp)
  SharedDtor();
}

void CommandRsp::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandRsp& CommandRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandRsp_dev_2eproto.base);
  return *internal_default_instance();
}


void CommandRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.CommandRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* CommandRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.CommandRsp.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rsptime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rsptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rsp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.CommandRsp.rsp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.CommandRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.CommandRsp.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint64 rsptime = 4;
  if (this->rsptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rsptime(), target);
  }

  // string rsp = 5;
  if (this->rsp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rsp().data(), static_cast<int>(this->_internal_rsp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.CommandRsp.rsp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rsp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.CommandRsp)
  return target;
}

size_t CommandRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.CommandRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string rsp = 5;
  if (this->rsp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rsp());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 rsptime = 4;
  if (this->rsptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rsptime());
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.CommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.CommandRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.CommandRsp)
    MergeFrom(*source);
  }
}

void CommandRsp::MergeFrom(const CommandRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.CommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.rsp().size() > 0) {

    rsp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsp_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.rsptime() != 0) {
    _internal_set_rsptime(from._internal_rsptime());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void CommandRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.CommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRsp::CopyFrom(const CommandRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.CommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRsp::IsInitialized() const {
  return true;
}

void CommandRsp::InternalSwap(CommandRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsp_.Swap(&other->rsp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(rsptime_, other->rsptime_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IccidMsg::InitAsDefaultInstance() {
}
class IccidMsg::_Internal {
 public:
};

IccidMsg::IccidMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.IccidMsg)
}
IccidMsg::IccidMsg(const IccidMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  iccid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iccid().empty()) {
    iccid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iccid_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.IccidMsg)
}

void IccidMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IccidMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iccid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

IccidMsg::~IccidMsg() {
  // @@protoc_insertion_point(destructor:YunJi.IccidMsg)
  SharedDtor();
}

void IccidMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iccid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IccidMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IccidMsg& IccidMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IccidMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void IccidMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.IccidMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iccid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* IccidMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.IccidMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iccid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iccid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.IccidMsg.iccid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IccidMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.IccidMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.IccidMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_seq(), target);
  }

  // string iccid = 4;
  if (this->iccid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iccid().data(), static_cast<int>(this->_internal_iccid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.IccidMsg.iccid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iccid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.IccidMsg)
  return target;
}

size_t IccidMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.IccidMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string iccid = 4;
  if (this->iccid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iccid());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IccidMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.IccidMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const IccidMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IccidMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.IccidMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.IccidMsg)
    MergeFrom(*source);
  }
}

void IccidMsg::MergeFrom(const IccidMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.IccidMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.iccid().size() > 0) {

    iccid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iccid_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void IccidMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.IccidMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IccidMsg::CopyFrom(const IccidMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.IccidMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IccidMsg::IsInitialized() const {
  return true;
}

void IccidMsg::InternalSwap(IccidMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iccid_.Swap(&other->iccid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IccidMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LbsMsg_LbsInfo::InitAsDefaultInstance() {
}
class LbsMsg_LbsInfo::_Internal {
 public:
};

LbsMsg_LbsInfo::LbsMsg_LbsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.LbsMsg.LbsInfo)
}
LbsMsg_LbsInfo::LbsMsg_LbsInfo(const LbsMsg_LbsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lac().empty()) {
    lac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lac_);
  }
  ci_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ci().empty()) {
    ci_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ci_);
  }
  rssi_ = from.rssi_;
  // @@protoc_insertion_point(copy_constructor:YunJi.LbsMsg.LbsInfo)
}

void LbsMsg_LbsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LbsMsg_LbsInfo_dev_2eproto.base);
  lac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ci_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
}

LbsMsg_LbsInfo::~LbsMsg_LbsInfo() {
  // @@protoc_insertion_point(destructor:YunJi.LbsMsg.LbsInfo)
  SharedDtor();
}

void LbsMsg_LbsInfo::SharedDtor() {
  lac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ci_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LbsMsg_LbsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LbsMsg_LbsInfo& LbsMsg_LbsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LbsMsg_LbsInfo_dev_2eproto.base);
  return *internal_default_instance();
}


void LbsMsg_LbsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.LbsMsg.LbsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ci_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
  _internal_metadata_.Clear();
}

const char* LbsMsg_LbsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string lac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.LbsInfo.lac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ci = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ci();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.LbsInfo.ci"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 rssi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LbsMsg_LbsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.LbsMsg.LbsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lac = 1;
  if (this->lac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lac().data(), static_cast<int>(this->_internal_lac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.LbsInfo.lac");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lac(), target);
  }

  // string ci = 2;
  if (this->ci().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ci().data(), static_cast<int>(this->_internal_ci().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.LbsInfo.ci");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ci(), target);
  }

  // sint32 rssi = 3;
  if (this->rssi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.LbsMsg.LbsInfo)
  return target;
}

size_t LbsMsg_LbsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.LbsMsg.LbsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lac = 1;
  if (this->lac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lac());
  }

  // string ci = 2;
  if (this->ci().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ci());
  }

  // sint32 rssi = 3;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_rssi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LbsMsg_LbsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.LbsMsg.LbsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LbsMsg_LbsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LbsMsg_LbsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.LbsMsg.LbsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.LbsMsg.LbsInfo)
    MergeFrom(*source);
  }
}

void LbsMsg_LbsInfo::MergeFrom(const LbsMsg_LbsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.LbsMsg.LbsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lac().size() > 0) {

    lac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lac_);
  }
  if (from.ci().size() > 0) {

    ci_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ci_);
  }
  if (from.rssi() != 0) {
    _internal_set_rssi(from._internal_rssi());
  }
}

void LbsMsg_LbsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.LbsMsg.LbsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LbsMsg_LbsInfo::CopyFrom(const LbsMsg_LbsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.LbsMsg.LbsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LbsMsg_LbsInfo::IsInitialized() const {
  return true;
}

void LbsMsg_LbsInfo::InternalSwap(LbsMsg_LbsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lac_.Swap(&other->lac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ci_.Swap(&other->ci_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rssi_, other->rssi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LbsMsg_LbsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LbsMsg::InitAsDefaultInstance() {
}
class LbsMsg::_Internal {
 public:
};

LbsMsg::LbsMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.LbsMsg)
}
LbsMsg::LbsMsg(const LbsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lbsinfo_(from.lbsinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  ta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ta().empty()) {
    ta_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ta_);
  }
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcc().empty()) {
    mcc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mnc().empty()) {
    mnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.LbsMsg)
}

void LbsMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LbsMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

LbsMsg::~LbsMsg() {
  // @@protoc_insertion_point(destructor:YunJi.LbsMsg)
  SharedDtor();
}

void LbsMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LbsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LbsMsg& LbsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LbsMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void LbsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.LbsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lbsinfo_.Clear();
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ta_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* LbsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 datetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 systime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.ta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mcc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.mcc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mnc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.LbsMsg.mnc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .YunJi.LbsMsg.LbsInfo lbsinfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lbsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LbsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.LbsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint64 datetime = 4;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_datetime(), target);
  }

  // uint64 systime = 5;
  if (this->systime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_systime(), target);
  }

  // string ta = 6;
  if (this->ta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ta().data(), static_cast<int>(this->_internal_ta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.ta");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ta(), target);
  }

  // string mcc = 7;
  if (this->mcc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcc().data(), static_cast<int>(this->_internal_mcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.mcc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mcc(), target);
  }

  // string mnc = 8;
  if (this->mnc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnc().data(), static_cast<int>(this->_internal_mnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.LbsMsg.mnc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mnc(), target);
  }

  // repeated .YunJi.LbsMsg.LbsInfo lbsinfo = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lbsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lbsinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.LbsMsg)
  return target;
}

size_t LbsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.LbsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YunJi.LbsMsg.LbsInfo lbsinfo = 9;
  total_size += 1UL * this->_internal_lbsinfo_size();
  for (const auto& msg : this->lbsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string ta = 6;
  if (this->ta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ta());
  }

  // string mcc = 7;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcc());
  }

  // string mnc = 8;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mnc());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 datetime = 4;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datetime());
  }

  // uint64 systime = 5;
  if (this->systime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_systime());
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LbsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.LbsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LbsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LbsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.LbsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.LbsMsg)
    MergeFrom(*source);
  }
}

void LbsMsg::MergeFrom(const LbsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.LbsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lbsinfo_.MergeFrom(from.lbsinfo_);
  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.ta().size() > 0) {

    ta_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ta_);
  }
  if (from.mcc().size() > 0) {

    mcc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  if (from.mnc().size() > 0) {

    mnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.systime() != 0) {
    _internal_set_systime(from._internal_systime());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void LbsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.LbsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LbsMsg::CopyFrom(const LbsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.LbsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LbsMsg::IsInitialized() const {
  return true;
}

void LbsMsg::InternalSwap(LbsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lbsinfo_.InternalSwap(&other->lbsinfo_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ta_.Swap(&other->ta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mcc_.Swap(&other->mcc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mnc_.Swap(&other->mnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(datetime_, other->datetime_);
  swap(systime_, other->systime_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LbsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WifiMsg_WifiInfo::InitAsDefaultInstance() {
}
class WifiMsg_WifiInfo::_Internal {
 public:
};

WifiMsg_WifiInfo::WifiMsg_WifiInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.WifiMsg.WifiInfo)
}
WifiMsg_WifiInfo::WifiMsg_WifiInfo(const WifiMsg_WifiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  rssi_ = from.rssi_;
  // @@protoc_insertion_point(copy_constructor:YunJi.WifiMsg.WifiInfo)
}

void WifiMsg_WifiInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiMsg_WifiInfo_dev_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
}

WifiMsg_WifiInfo::~WifiMsg_WifiInfo() {
  // @@protoc_insertion_point(destructor:YunJi.WifiMsg.WifiInfo)
  SharedDtor();
}

void WifiMsg_WifiInfo::SharedDtor() {
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WifiMsg_WifiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiMsg_WifiInfo& WifiMsg_WifiInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiMsg_WifiInfo_dev_2eproto.base);
  return *internal_default_instance();
}


void WifiMsg_WifiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.WifiMsg.WifiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_ = 0;
  _internal_metadata_.Clear();
}

const char* WifiMsg_WifiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.WifiMsg.WifiInfo.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 rssi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WifiMsg_WifiInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.WifiMsg.WifiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.WifiMsg.WifiInfo.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // sint32 rssi = 2;
  if (this->rssi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.WifiMsg.WifiInfo)
  return target;
}

size_t WifiMsg_WifiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.WifiMsg.WifiInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // sint32 rssi = 2;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_rssi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiMsg_WifiInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.WifiMsg.WifiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiMsg_WifiInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WifiMsg_WifiInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.WifiMsg.WifiInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.WifiMsg.WifiInfo)
    MergeFrom(*source);
  }
}

void WifiMsg_WifiInfo::MergeFrom(const WifiMsg_WifiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.WifiMsg.WifiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {

    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.rssi() != 0) {
    _internal_set_rssi(from._internal_rssi());
  }
}

void WifiMsg_WifiInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.WifiMsg.WifiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiMsg_WifiInfo::CopyFrom(const WifiMsg_WifiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.WifiMsg.WifiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiMsg_WifiInfo::IsInitialized() const {
  return true;
}

void WifiMsg_WifiInfo::InternalSwap(WifiMsg_WifiInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rssi_, other->rssi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WifiMsg_WifiInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WifiMsg::InitAsDefaultInstance() {
}
class WifiMsg::_Internal {
 public:
};

WifiMsg::WifiMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.WifiMsg)
}
WifiMsg::WifiMsg(const WifiMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      wifiinfo_(from.wifiinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:YunJi.WifiMsg)
}

void WifiMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiMsg_dev_2eproto.base);
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
}

WifiMsg::~WifiMsg() {
  // @@protoc_insertion_point(destructor:YunJi.WifiMsg)
  SharedDtor();
}

void WifiMsg::SharedDtor() {
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WifiMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiMsg& WifiMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void WifiMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.WifiMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wifiinfo_.Clear();
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* WifiMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YunJi.WifiMsg.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 datetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 systime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          systime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .YunJi.WifiMsg.WifiInfo wifiinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wifiinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WifiMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.WifiMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YunJi.WifiMsg.imei");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imei(), target);
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint64 datetime = 4;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_datetime(), target);
  }

  // uint64 systime = 5;
  if (this->systime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_systime(), target);
  }

  // repeated .YunJi.WifiMsg.WifiInfo wifiinfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wifiinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_wifiinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.WifiMsg)
  return target;
}

size_t WifiMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.WifiMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YunJi.WifiMsg.WifiInfo wifiinfo = 6;
  total_size += 1UL * this->_internal_wifiinfo_size();
  for (const auto& msg : this->wifiinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string imei = 2;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 datetime = 4;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datetime());
  }

  // uint64 systime = 5;
  if (this->systime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_systime());
  }

  // sint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.WifiMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WifiMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.WifiMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.WifiMsg)
    MergeFrom(*source);
  }
}

void WifiMsg::MergeFrom(const WifiMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.WifiMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wifiinfo_.MergeFrom(from.wifiinfo_);
  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.systime() != 0) {
    _internal_set_systime(from._internal_systime());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void WifiMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.WifiMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiMsg::CopyFrom(const WifiMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.WifiMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiMsg::IsInitialized() const {
  return true;
}

void WifiMsg::InternalSwap(WifiMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  wifiinfo_.InternalSwap(&other->wifiinfo_);
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(datetime_, other->datetime_);
  swap(systime_, other->systime_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WifiMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpDevMsg::InitAsDefaultInstance() {
  ::YunJi::_UpDevMsg_default_instance_.gps_ = const_cast< ::YunJi::GpsMsg*>(
      ::YunJi::GpsMsg::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.hb_ = const_cast< ::YunJi::HbMsg*>(
      ::YunJi::HbMsg::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.alarm_ = const_cast< ::YunJi::AlarmMsg*>(
      ::YunJi::AlarmMsg::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.cmdrsp_ = const_cast< ::YunJi::CommandRsp*>(
      ::YunJi::CommandRsp::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.iccid_ = const_cast< ::YunJi::IccidMsg*>(
      ::YunJi::IccidMsg::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.lbs_ = const_cast< ::YunJi::LbsMsg*>(
      ::YunJi::LbsMsg::internal_default_instance());
  ::YunJi::_UpDevMsg_default_instance_.wifi_ = const_cast< ::YunJi::WifiMsg*>(
      ::YunJi::WifiMsg::internal_default_instance());
}
class UpDevMsg::_Internal {
 public:
  static const ::YunJi::GpsMsg& gps(const UpDevMsg* msg);
  static const ::YunJi::HbMsg& hb(const UpDevMsg* msg);
  static const ::YunJi::AlarmMsg& alarm(const UpDevMsg* msg);
  static const ::YunJi::CommandRsp& cmdrsp(const UpDevMsg* msg);
  static const ::YunJi::IccidMsg& iccid(const UpDevMsg* msg);
  static const ::YunJi::LbsMsg& lbs(const UpDevMsg* msg);
  static const ::YunJi::WifiMsg& wifi(const UpDevMsg* msg);
};

const ::YunJi::GpsMsg&
UpDevMsg::_Internal::gps(const UpDevMsg* msg) {
  return *msg->msgbody_.gps_;
}
const ::YunJi::HbMsg&
UpDevMsg::_Internal::hb(const UpDevMsg* msg) {
  return *msg->msgbody_.hb_;
}
const ::YunJi::AlarmMsg&
UpDevMsg::_Internal::alarm(const UpDevMsg* msg) {
  return *msg->msgbody_.alarm_;
}
const ::YunJi::CommandRsp&
UpDevMsg::_Internal::cmdrsp(const UpDevMsg* msg) {
  return *msg->msgbody_.cmdrsp_;
}
const ::YunJi::IccidMsg&
UpDevMsg::_Internal::iccid(const UpDevMsg* msg) {
  return *msg->msgbody_.iccid_;
}
const ::YunJi::LbsMsg&
UpDevMsg::_Internal::lbs(const UpDevMsg* msg) {
  return *msg->msgbody_.lbs_;
}
const ::YunJi::WifiMsg&
UpDevMsg::_Internal::wifi(const UpDevMsg* msg) {
  return *msg->msgbody_.wifi_;
}
void UpDevMsg::set_allocated_gps(::YunJi::GpsMsg* gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    set_has_gps();
    msgbody_.gps_ = gps;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.gps)
}
void UpDevMsg::set_allocated_hb(::YunJi::HbMsg* hb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (hb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hb, submessage_arena);
    }
    set_has_hb();
    msgbody_.hb_ = hb;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.hb)
}
void UpDevMsg::set_allocated_alarm(::YunJi::AlarmMsg* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    set_has_alarm();
    msgbody_.alarm_ = alarm;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.alarm)
}
void UpDevMsg::set_allocated_cmdrsp(::YunJi::CommandRsp* cmdrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (cmdrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmdrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmdrsp, submessage_arena);
    }
    set_has_cmdrsp();
    msgbody_.cmdrsp_ = cmdrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.cmdrsp)
}
void UpDevMsg::set_allocated_iccid(::YunJi::IccidMsg* iccid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (iccid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iccid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iccid, submessage_arena);
    }
    set_has_iccid();
    msgbody_.iccid_ = iccid;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.iccid)
}
void UpDevMsg::set_allocated_lbs(::YunJi::LbsMsg* lbs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (lbs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lbs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lbs, submessage_arena);
    }
    set_has_lbs();
    msgbody_.lbs_ = lbs;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.lbs)
}
void UpDevMsg::set_allocated_wifi(::YunJi::WifiMsg* wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msgbody();
  if (wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi, submessage_arena);
    }
    set_has_wifi();
    msgbody_.wifi_ = wifi;
  }
  // @@protoc_insertion_point(field_set_allocated:YunJi.UpDevMsg.wifi)
}
UpDevMsg::UpDevMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.UpDevMsg)
}
UpDevMsg::UpDevMsg(const UpDevMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgtype_ = from.msgtype_;
  clear_has_msgbody();
  switch (from.msgbody_case()) {
    case kGps: {
      _internal_mutable_gps()->::YunJi::GpsMsg::MergeFrom(from._internal_gps());
      break;
    }
    case kHb: {
      _internal_mutable_hb()->::YunJi::HbMsg::MergeFrom(from._internal_hb());
      break;
    }
    case kAlarm: {
      _internal_mutable_alarm()->::YunJi::AlarmMsg::MergeFrom(from._internal_alarm());
      break;
    }
    case kCmdrsp: {
      _internal_mutable_cmdrsp()->::YunJi::CommandRsp::MergeFrom(from._internal_cmdrsp());
      break;
    }
    case kIccid: {
      _internal_mutable_iccid()->::YunJi::IccidMsg::MergeFrom(from._internal_iccid());
      break;
    }
    case kLbs: {
      _internal_mutable_lbs()->::YunJi::LbsMsg::MergeFrom(from._internal_lbs());
      break;
    }
    case kWifi: {
      _internal_mutable_wifi()->::YunJi::WifiMsg::MergeFrom(from._internal_wifi());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:YunJi.UpDevMsg)
}

void UpDevMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpDevMsg_dev_2eproto.base);
  msgtype_ = 0;
  clear_has_msgbody();
}

UpDevMsg::~UpDevMsg() {
  // @@protoc_insertion_point(destructor:YunJi.UpDevMsg)
  SharedDtor();
}

void UpDevMsg::SharedDtor() {
  if (has_msgbody()) {
    clear_msgbody();
  }
}

void UpDevMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpDevMsg& UpDevMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpDevMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void UpDevMsg::clear_msgbody() {
// @@protoc_insertion_point(one_of_clear_start:YunJi.UpDevMsg)
  switch (msgbody_case()) {
    case kGps: {
      delete msgbody_.gps_;
      break;
    }
    case kHb: {
      delete msgbody_.hb_;
      break;
    }
    case kAlarm: {
      delete msgbody_.alarm_;
      break;
    }
    case kCmdrsp: {
      delete msgbody_.cmdrsp_;
      break;
    }
    case kIccid: {
      delete msgbody_.iccid_;
      break;
    }
    case kLbs: {
      delete msgbody_.lbs_;
      break;
    }
    case kWifi: {
      delete msgbody_.wifi_;
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSGBODY_NOT_SET;
}


void UpDevMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.UpDevMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgtype_ = 0;
  clear_msgbody();
  _internal_metadata_.Clear();
}

const char* UpDevMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .YunJi.MsgType msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::YunJi::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .YunJi.GpsMsg gps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.HbMsg hb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.AlarmMsg alarm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.CommandRsp cmdrsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmdrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.IccidMsg iccid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_iccid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.LbsMsg lbs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lbs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YunJi.WifiMsg wifi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpDevMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.UpDevMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .YunJi.MsgType msgtype = 1;
  if (this->msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgtype(), target);
  }

  // .YunJi.GpsMsg gps = 2;
  if (_internal_has_gps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gps(this), target, stream);
  }

  // .YunJi.HbMsg hb = 3;
  if (_internal_has_hb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hb(this), target, stream);
  }

  // .YunJi.AlarmMsg alarm = 4;
  if (_internal_has_alarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::alarm(this), target, stream);
  }

  // .YunJi.CommandRsp cmdrsp = 5;
  if (_internal_has_cmdrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cmdrsp(this), target, stream);
  }

  // .YunJi.IccidMsg iccid = 6;
  if (_internal_has_iccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::iccid(this), target, stream);
  }

  // .YunJi.LbsMsg lbs = 7;
  if (_internal_has_lbs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lbs(this), target, stream);
  }

  // .YunJi.WifiMsg wifi = 8;
  if (_internal_has_wifi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::wifi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.UpDevMsg)
  return target;
}

size_t UpDevMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.UpDevMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .YunJi.MsgType msgtype = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  switch (msgbody_case()) {
    // .YunJi.GpsMsg gps = 2;
    case kGps: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.gps_);
      break;
    }
    // .YunJi.HbMsg hb = 3;
    case kHb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.hb_);
      break;
    }
    // .YunJi.AlarmMsg alarm = 4;
    case kAlarm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.alarm_);
      break;
    }
    // .YunJi.CommandRsp cmdrsp = 5;
    case kCmdrsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.cmdrsp_);
      break;
    }
    // .YunJi.IccidMsg iccid = 6;
    case kIccid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.iccid_);
      break;
    }
    // .YunJi.LbsMsg lbs = 7;
    case kLbs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.lbs_);
      break;
    }
    // .YunJi.WifiMsg wifi = 8;
    case kWifi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgbody_.wifi_);
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpDevMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.UpDevMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UpDevMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpDevMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.UpDevMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.UpDevMsg)
    MergeFrom(*source);
  }
}

void UpDevMsg::MergeFrom(const UpDevMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.UpDevMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  switch (from.msgbody_case()) {
    case kGps: {
      _internal_mutable_gps()->::YunJi::GpsMsg::MergeFrom(from._internal_gps());
      break;
    }
    case kHb: {
      _internal_mutable_hb()->::YunJi::HbMsg::MergeFrom(from._internal_hb());
      break;
    }
    case kAlarm: {
      _internal_mutable_alarm()->::YunJi::AlarmMsg::MergeFrom(from._internal_alarm());
      break;
    }
    case kCmdrsp: {
      _internal_mutable_cmdrsp()->::YunJi::CommandRsp::MergeFrom(from._internal_cmdrsp());
      break;
    }
    case kIccid: {
      _internal_mutable_iccid()->::YunJi::IccidMsg::MergeFrom(from._internal_iccid());
      break;
    }
    case kLbs: {
      _internal_mutable_lbs()->::YunJi::LbsMsg::MergeFrom(from._internal_lbs());
      break;
    }
    case kWifi: {
      _internal_mutable_wifi()->::YunJi::WifiMsg::MergeFrom(from._internal_wifi());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
}

void UpDevMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.UpDevMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpDevMsg::CopyFrom(const UpDevMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.UpDevMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpDevMsg::IsInitialized() const {
  return true;
}

void UpDevMsg::InternalSwap(UpDevMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgtype_, other->msgtype_);
  swap(msgbody_, other->msgbody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpDevMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownDevMsg::InitAsDefaultInstance() {
  ::YunJi::_DownDevMsg_default_instance_._instance.get_mutable()->cmdreq_ = const_cast< ::YunJi::CommandReq*>(
      ::YunJi::CommandReq::internal_default_instance());
}
class DownDevMsg::_Internal {
 public:
  static const ::YunJi::CommandReq& cmdreq(const DownDevMsg* msg);
};

const ::YunJi::CommandReq&
DownDevMsg::_Internal::cmdreq(const DownDevMsg* msg) {
  return *msg->cmdreq_;
}
DownDevMsg::DownDevMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YunJi.DownDevMsg)
}
DownDevMsg::DownDevMsg(const DownDevMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cmdreq()) {
    cmdreq_ = new ::YunJi::CommandReq(*from.cmdreq_);
  } else {
    cmdreq_ = nullptr;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:YunJi.DownDevMsg)
}

void DownDevMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownDevMsg_dev_2eproto.base);
  ::memset(&cmdreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&cmdreq_)) + sizeof(msgtype_));
}

DownDevMsg::~DownDevMsg() {
  // @@protoc_insertion_point(destructor:YunJi.DownDevMsg)
  SharedDtor();
}

void DownDevMsg::SharedDtor() {
  if (this != internal_default_instance()) delete cmdreq_;
}

void DownDevMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownDevMsg& DownDevMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownDevMsg_dev_2eproto.base);
  return *internal_default_instance();
}


void DownDevMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:YunJi.DownDevMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cmdreq_ != nullptr) {
    delete cmdreq_;
  }
  cmdreq_ = nullptr;
  msgtype_ = 0;
  _internal_metadata_.Clear();
}

const char* DownDevMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .YunJi.MsgType msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::YunJi::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .YunJi.CommandReq cmdreq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmdreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownDevMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YunJi.DownDevMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .YunJi.MsgType msgtype = 1;
  if (this->msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgtype(), target);
  }

  // .YunJi.CommandReq cmdreq = 2;
  if (this->has_cmdreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cmdreq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YunJi.DownDevMsg)
  return target;
}

size_t DownDevMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YunJi.DownDevMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .YunJi.CommandReq cmdreq = 2;
  if (this->has_cmdreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmdreq_);
  }

  // .YunJi.MsgType msgtype = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownDevMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YunJi.DownDevMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DownDevMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownDevMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YunJi.DownDevMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YunJi.DownDevMsg)
    MergeFrom(*source);
  }
}

void DownDevMsg::MergeFrom(const DownDevMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YunJi.DownDevMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmdreq()) {
    _internal_mutable_cmdreq()->::YunJi::CommandReq::MergeFrom(from._internal_cmdreq());
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
}

void DownDevMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YunJi.DownDevMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownDevMsg::CopyFrom(const DownDevMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YunJi.DownDevMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownDevMsg::IsInitialized() const {
  return true;
}

void DownDevMsg::InternalSwap(DownDevMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmdreq_, other->cmdreq_);
  swap(msgtype_, other->msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownDevMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace YunJi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::YunJi::GpsMsg_ExtEntry_DoNotUse* Arena::CreateMaybeMessage< ::YunJi::GpsMsg_ExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::GpsMsg_ExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::GpsMsg* Arena::CreateMaybeMessage< ::YunJi::GpsMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::GpsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::HbMsg* Arena::CreateMaybeMessage< ::YunJi::HbMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::HbMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::AlarmMsg* Arena::CreateMaybeMessage< ::YunJi::AlarmMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::AlarmMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::CommandReq* Arena::CreateMaybeMessage< ::YunJi::CommandReq >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::CommandReq >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::CommandRsp* Arena::CreateMaybeMessage< ::YunJi::CommandRsp >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::CommandRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::IccidMsg* Arena::CreateMaybeMessage< ::YunJi::IccidMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::IccidMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::LbsMsg_LbsInfo* Arena::CreateMaybeMessage< ::YunJi::LbsMsg_LbsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::LbsMsg_LbsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::LbsMsg* Arena::CreateMaybeMessage< ::YunJi::LbsMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::LbsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::WifiMsg_WifiInfo* Arena::CreateMaybeMessage< ::YunJi::WifiMsg_WifiInfo >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::WifiMsg_WifiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::WifiMsg* Arena::CreateMaybeMessage< ::YunJi::WifiMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::WifiMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::UpDevMsg* Arena::CreateMaybeMessage< ::YunJi::UpDevMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::UpDevMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::YunJi::DownDevMsg* Arena::CreateMaybeMessage< ::YunJi::DownDevMsg >(Arena* arena) {
  return Arena::CreateInternal< ::YunJi::DownDevMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
