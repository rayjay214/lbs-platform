// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dev.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dev_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dev_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dev_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dev_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dev_2eproto;
namespace YunJi {
class AlarmMsg;
class AlarmMsgDefaultTypeInternal;
extern AlarmMsgDefaultTypeInternal _AlarmMsg_default_instance_;
class CommandReq;
class CommandReqDefaultTypeInternal;
extern CommandReqDefaultTypeInternal _CommandReq_default_instance_;
class CommandRsp;
class CommandRspDefaultTypeInternal;
extern CommandRspDefaultTypeInternal _CommandRsp_default_instance_;
class DownDevMsg;
class DownDevMsgDefaultTypeInternal;
extern DownDevMsgDefaultTypeInternal _DownDevMsg_default_instance_;
class GpsMsg;
class GpsMsgDefaultTypeInternal;
extern GpsMsgDefaultTypeInternal _GpsMsg_default_instance_;
class GpsMsg_ExtEntry_DoNotUse;
class GpsMsg_ExtEntry_DoNotUseDefaultTypeInternal;
extern GpsMsg_ExtEntry_DoNotUseDefaultTypeInternal _GpsMsg_ExtEntry_DoNotUse_default_instance_;
class HbMsg;
class HbMsgDefaultTypeInternal;
extern HbMsgDefaultTypeInternal _HbMsg_default_instance_;
class IccidMsg;
class IccidMsgDefaultTypeInternal;
extern IccidMsgDefaultTypeInternal _IccidMsg_default_instance_;
class LbsMsg;
class LbsMsgDefaultTypeInternal;
extern LbsMsgDefaultTypeInternal _LbsMsg_default_instance_;
class LbsMsg_LbsInfo;
class LbsMsg_LbsInfoDefaultTypeInternal;
extern LbsMsg_LbsInfoDefaultTypeInternal _LbsMsg_LbsInfo_default_instance_;
class UpDevMsg;
class UpDevMsgDefaultTypeInternal;
extern UpDevMsgDefaultTypeInternal _UpDevMsg_default_instance_;
class WifiMsg;
class WifiMsgDefaultTypeInternal;
extern WifiMsgDefaultTypeInternal _WifiMsg_default_instance_;
class WifiMsg_WifiInfo;
class WifiMsg_WifiInfoDefaultTypeInternal;
extern WifiMsg_WifiInfoDefaultTypeInternal _WifiMsg_WifiInfo_default_instance_;
}  // namespace YunJi
PROTOBUF_NAMESPACE_OPEN
template<> ::YunJi::AlarmMsg* Arena::CreateMaybeMessage<::YunJi::AlarmMsg>(Arena*);
template<> ::YunJi::CommandReq* Arena::CreateMaybeMessage<::YunJi::CommandReq>(Arena*);
template<> ::YunJi::CommandRsp* Arena::CreateMaybeMessage<::YunJi::CommandRsp>(Arena*);
template<> ::YunJi::DownDevMsg* Arena::CreateMaybeMessage<::YunJi::DownDevMsg>(Arena*);
template<> ::YunJi::GpsMsg* Arena::CreateMaybeMessage<::YunJi::GpsMsg>(Arena*);
template<> ::YunJi::GpsMsg_ExtEntry_DoNotUse* Arena::CreateMaybeMessage<::YunJi::GpsMsg_ExtEntry_DoNotUse>(Arena*);
template<> ::YunJi::HbMsg* Arena::CreateMaybeMessage<::YunJi::HbMsg>(Arena*);
template<> ::YunJi::IccidMsg* Arena::CreateMaybeMessage<::YunJi::IccidMsg>(Arena*);
template<> ::YunJi::LbsMsg* Arena::CreateMaybeMessage<::YunJi::LbsMsg>(Arena*);
template<> ::YunJi::LbsMsg_LbsInfo* Arena::CreateMaybeMessage<::YunJi::LbsMsg_LbsInfo>(Arena*);
template<> ::YunJi::UpDevMsg* Arena::CreateMaybeMessage<::YunJi::UpDevMsg>(Arena*);
template<> ::YunJi::WifiMsg* Arena::CreateMaybeMessage<::YunJi::WifiMsg>(Arena*);
template<> ::YunJi::WifiMsg_WifiInfo* Arena::CreateMaybeMessage<::YunJi::WifiMsg_WifiInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace YunJi {

enum MsgType : int {
  kInalidMsg = 0,
  kGpsMsg = 1,
  kLbsMsg = 2,
  kWifiMsg = 3,
  kHbMsg = 4,
  kAlarmMsg = 5,
  kCommandReq = 6,
  kCommandRsp = 7,
  kIccidMsg = 8,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = kInalidMsg;
constexpr MsgType MsgType_MAX = kIccidMsg;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class GpsMsg_ExtEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GpsMsg_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GpsMsg_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  GpsMsg_ExtEntry_DoNotUse();
  GpsMsg_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GpsMsg_ExtEntry_DoNotUse& other);
  static const GpsMsg_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GpsMsg_ExtEntry_DoNotUse*>(&_GpsMsg_ExtEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "YunJi.GpsMsg.ExtEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class GpsMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.GpsMsg) */ {
 public:
  GpsMsg();
  virtual ~GpsMsg();

  GpsMsg(const GpsMsg& from);
  GpsMsg(GpsMsg&& from) noexcept
    : GpsMsg() {
    *this = ::std::move(from);
  }

  inline GpsMsg& operator=(const GpsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsMsg& operator=(GpsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpsMsg* internal_default_instance() {
    return reinterpret_cast<const GpsMsg*>(
               &_GpsMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpsMsg& a, GpsMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpsMsg* New() const final {
    return CreateMaybeMessage<GpsMsg>(nullptr);
  }

  GpsMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpsMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpsMsg& from);
  void MergeFrom(const GpsMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.GpsMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtFieldNumber = 11,
    kImeiFieldNumber = 2,
    kStatusFieldNumber = 10,
    kIdFieldNumber = 1,
    kDatetimeFieldNumber = 3,
    kSystimeFieldNumber = 4,
    kLngFieldNumber = 5,
    kLatFieldNumber = 6,
    kSpeedFieldNumber = 7,
    kRouteFieldNumber = 8,
    kSeqFieldNumber = 9,
  };
  // map<string, bytes> ext = 11;
  int ext_size() const;
  private:
  int _internal_ext_size() const;
  public:
  void clear_ext();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_ext();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_ext();

  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // bytes status = 10;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 datetime = 3;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 systime = 4;
  void clear_systime();
  ::PROTOBUF_NAMESPACE_ID::uint64 systime() const;
  void set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_systime() const;
  void _internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 lng = 5;
  void clear_lng();
  ::PROTOBUF_NAMESPACE_ID::int32 lng() const;
  void set_lng(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lng() const;
  void _internal_set_lng(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lat = 6;
  void clear_lat();
  ::PROTOBUF_NAMESPACE_ID::int32 lat() const;
  void set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lat() const;
  void _internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speed = 7;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 route = 8;
  void clear_route();
  ::PROTOBUF_NAMESPACE_ID::int32 route() const;
  void set_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route() const;
  void _internal_set_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 seq = 9;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.GpsMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GpsMsg_ExtEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 systime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lng_;
  ::PROTOBUF_NAMESPACE_ID::int32 lat_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class HbMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.HbMsg) */ {
 public:
  HbMsg();
  virtual ~HbMsg();

  HbMsg(const HbMsg& from);
  HbMsg(HbMsg&& from) noexcept
    : HbMsg() {
    *this = ::std::move(from);
  }

  inline HbMsg& operator=(const HbMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HbMsg& operator=(HbMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HbMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HbMsg* internal_default_instance() {
    return reinterpret_cast<const HbMsg*>(
               &_HbMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HbMsg& a, HbMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HbMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HbMsg* New() const final {
    return CreateMaybeMessage<HbMsg>(nullptr);
  }

  HbMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HbMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HbMsg& from);
  void MergeFrom(const HbMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HbMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.HbMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeiFieldNumber = 2,
    kStatusFieldNumber = 5,
    kIdFieldNumber = 1,
    kHearttimeFieldNumber = 3,
    kSeqFieldNumber = 4,
  };
  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // bytes status = 5;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hearttime = 3;
  void clear_hearttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 hearttime() const;
  void set_hearttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hearttime() const;
  void _internal_set_hearttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 4;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.HbMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hearttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class AlarmMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.AlarmMsg) */ {
 public:
  AlarmMsg();
  virtual ~AlarmMsg();

  AlarmMsg(const AlarmMsg& from);
  AlarmMsg(AlarmMsg&& from) noexcept
    : AlarmMsg() {
    *this = ::std::move(from);
  }

  inline AlarmMsg& operator=(const AlarmMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmMsg& operator=(AlarmMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmMsg* internal_default_instance() {
    return reinterpret_cast<const AlarmMsg*>(
               &_AlarmMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AlarmMsg& a, AlarmMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmMsg* New() const final {
    return CreateMaybeMessage<AlarmMsg>(nullptr);
  }

  AlarmMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmMsg& from);
  void MergeFrom(const AlarmMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.AlarmMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeiFieldNumber = 2,
    kStatusFieldNumber = 9,
    kIdFieldNumber = 1,
    kAlarmtimeFieldNumber = 3,
    kAlarmtypeFieldNumber = 4,
    kLngFieldNumber = 5,
    kLatFieldNumber = 6,
    kSpeedFieldNumber = 7,
    kRouteFieldNumber = 8,
  };
  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // bytes status = 9;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 alarmtime = 3;
  void clear_alarmtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 alarmtime() const;
  void set_alarmtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_alarmtime() const;
  void _internal_set_alarmtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 alarmtype = 4;
  void clear_alarmtype();
  ::PROTOBUF_NAMESPACE_ID::int32 alarmtype() const;
  void set_alarmtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alarmtype() const;
  void _internal_set_alarmtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lng = 5;
  void clear_lng();
  ::PROTOBUF_NAMESPACE_ID::int32 lng() const;
  void set_lng(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lng() const;
  void _internal_set_lng(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lat = 6;
  void clear_lat();
  ::PROTOBUF_NAMESPACE_ID::int32 lat() const;
  void set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lat() const;
  void _internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speed = 7;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 route = 8;
  void clear_route();
  ::PROTOBUF_NAMESPACE_ID::int32 route() const;
  void set_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route() const;
  void _internal_set_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.AlarmMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 alarmtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 alarmtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 lng_;
  ::PROTOBUF_NAMESPACE_ID::int32 lat_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class CommandReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.CommandReq) */ {
 public:
  CommandReq();
  virtual ~CommandReq();

  CommandReq(const CommandReq& from);
  CommandReq(CommandReq&& from) noexcept
    : CommandReq() {
    *this = ::std::move(from);
  }

  inline CommandReq& operator=(const CommandReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReq& operator=(CommandReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandReq* internal_default_instance() {
    return reinterpret_cast<const CommandReq*>(
               &_CommandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandReq& a, CommandReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReq* New() const final {
    return CreateMaybeMessage<CommandReq>(nullptr);
  }

  CommandReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandReq& from);
  void MergeFrom(const CommandReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.CommandReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeiFieldNumber = 2,
    kProtocolFieldNumber = 5,
    kContentFieldNumber = 6,
    kIdFieldNumber = 1,
    kReqtimeFieldNumber = 4,
    kSeqFieldNumber = 3,
  };
  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string protocol = 5;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string content = 6;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 reqtime = 4;
  void clear_reqtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 reqtime() const;
  void set_reqtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reqtime() const;
  void _internal_set_reqtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.CommandReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reqtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class CommandRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.CommandRsp) */ {
 public:
  CommandRsp();
  virtual ~CommandRsp();

  CommandRsp(const CommandRsp& from);
  CommandRsp(CommandRsp&& from) noexcept
    : CommandRsp() {
    *this = ::std::move(from);
  }

  inline CommandRsp& operator=(const CommandRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRsp& operator=(CommandRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRsp* internal_default_instance() {
    return reinterpret_cast<const CommandRsp*>(
               &_CommandRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandRsp& a, CommandRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRsp* New() const final {
    return CreateMaybeMessage<CommandRsp>(nullptr);
  }

  CommandRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRsp& from);
  void MergeFrom(const CommandRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.CommandRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeiFieldNumber = 2,
    kRspFieldNumber = 5,
    kIdFieldNumber = 1,
    kRsptimeFieldNumber = 4,
    kSeqFieldNumber = 3,
  };
  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string rsp = 5;
  void clear_rsp();
  const std::string& rsp() const;
  void set_rsp(const std::string& value);
  void set_rsp(std::string&& value);
  void set_rsp(const char* value);
  void set_rsp(const char* value, size_t size);
  std::string* mutable_rsp();
  std::string* release_rsp();
  void set_allocated_rsp(std::string* rsp);
  private:
  const std::string& _internal_rsp() const;
  void _internal_set_rsp(const std::string& value);
  std::string* _internal_mutable_rsp();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rsptime = 4;
  void clear_rsptime();
  ::PROTOBUF_NAMESPACE_ID::uint64 rsptime() const;
  void set_rsptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rsptime() const;
  void _internal_set_rsptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.CommandRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rsptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class IccidMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.IccidMsg) */ {
 public:
  IccidMsg();
  virtual ~IccidMsg();

  IccidMsg(const IccidMsg& from);
  IccidMsg(IccidMsg&& from) noexcept
    : IccidMsg() {
    *this = ::std::move(from);
  }

  inline IccidMsg& operator=(const IccidMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IccidMsg& operator=(IccidMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IccidMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IccidMsg* internal_default_instance() {
    return reinterpret_cast<const IccidMsg*>(
               &_IccidMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IccidMsg& a, IccidMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IccidMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IccidMsg* New() const final {
    return CreateMaybeMessage<IccidMsg>(nullptr);
  }

  IccidMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IccidMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IccidMsg& from);
  void MergeFrom(const IccidMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IccidMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.IccidMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeiFieldNumber = 2,
    kIccidFieldNumber = 4,
    kIdFieldNumber = 1,
    kSeqFieldNumber = 3,
  };
  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string iccid = 4;
  void clear_iccid();
  const std::string& iccid() const;
  void set_iccid(const std::string& value);
  void set_iccid(std::string&& value);
  void set_iccid(const char* value);
  void set_iccid(const char* value, size_t size);
  std::string* mutable_iccid();
  std::string* release_iccid();
  void set_allocated_iccid(std::string* iccid);
  private:
  const std::string& _internal_iccid() const;
  void _internal_set_iccid(const std::string& value);
  std::string* _internal_mutable_iccid();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.IccidMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iccid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class LbsMsg_LbsInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.LbsMsg.LbsInfo) */ {
 public:
  LbsMsg_LbsInfo();
  virtual ~LbsMsg_LbsInfo();

  LbsMsg_LbsInfo(const LbsMsg_LbsInfo& from);
  LbsMsg_LbsInfo(LbsMsg_LbsInfo&& from) noexcept
    : LbsMsg_LbsInfo() {
    *this = ::std::move(from);
  }

  inline LbsMsg_LbsInfo& operator=(const LbsMsg_LbsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LbsMsg_LbsInfo& operator=(LbsMsg_LbsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LbsMsg_LbsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LbsMsg_LbsInfo* internal_default_instance() {
    return reinterpret_cast<const LbsMsg_LbsInfo*>(
               &_LbsMsg_LbsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LbsMsg_LbsInfo& a, LbsMsg_LbsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LbsMsg_LbsInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LbsMsg_LbsInfo* New() const final {
    return CreateMaybeMessage<LbsMsg_LbsInfo>(nullptr);
  }

  LbsMsg_LbsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LbsMsg_LbsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LbsMsg_LbsInfo& from);
  void MergeFrom(const LbsMsg_LbsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LbsMsg_LbsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.LbsMsg.LbsInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLacFieldNumber = 1,
    kCiFieldNumber = 2,
    kRssiFieldNumber = 3,
  };
  // string lac = 1;
  void clear_lac();
  const std::string& lac() const;
  void set_lac(const std::string& value);
  void set_lac(std::string&& value);
  void set_lac(const char* value);
  void set_lac(const char* value, size_t size);
  std::string* mutable_lac();
  std::string* release_lac();
  void set_allocated_lac(std::string* lac);
  private:
  const std::string& _internal_lac() const;
  void _internal_set_lac(const std::string& value);
  std::string* _internal_mutable_lac();
  public:

  // string ci = 2;
  void clear_ci();
  const std::string& ci() const;
  void set_ci(const std::string& value);
  void set_ci(std::string&& value);
  void set_ci(const char* value);
  void set_ci(const char* value, size_t size);
  std::string* mutable_ci();
  std::string* release_ci();
  void set_allocated_ci(std::string* ci);
  private:
  const std::string& _internal_ci() const;
  void _internal_set_ci(const std::string& value);
  std::string* _internal_mutable_ci();
  public:

  // sint32 rssi = 3;
  void clear_rssi();
  ::PROTOBUF_NAMESPACE_ID::int32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rssi() const;
  void _internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.LbsMsg.LbsInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ci_;
  ::PROTOBUF_NAMESPACE_ID::int32 rssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class LbsMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.LbsMsg) */ {
 public:
  LbsMsg();
  virtual ~LbsMsg();

  LbsMsg(const LbsMsg& from);
  LbsMsg(LbsMsg&& from) noexcept
    : LbsMsg() {
    *this = ::std::move(from);
  }

  inline LbsMsg& operator=(const LbsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LbsMsg& operator=(LbsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LbsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LbsMsg* internal_default_instance() {
    return reinterpret_cast<const LbsMsg*>(
               &_LbsMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LbsMsg& a, LbsMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LbsMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LbsMsg* New() const final {
    return CreateMaybeMessage<LbsMsg>(nullptr);
  }

  LbsMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LbsMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LbsMsg& from);
  void MergeFrom(const LbsMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LbsMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.LbsMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LbsMsg_LbsInfo LbsInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kLbsinfoFieldNumber = 9,
    kImeiFieldNumber = 2,
    kTaFieldNumber = 6,
    kMccFieldNumber = 7,
    kMncFieldNumber = 8,
    kIdFieldNumber = 1,
    kDatetimeFieldNumber = 4,
    kSystimeFieldNumber = 5,
    kSeqFieldNumber = 3,
  };
  // repeated .YunJi.LbsMsg.LbsInfo lbsinfo = 9;
  int lbsinfo_size() const;
  private:
  int _internal_lbsinfo_size() const;
  public:
  void clear_lbsinfo();
  ::YunJi::LbsMsg_LbsInfo* mutable_lbsinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::LbsMsg_LbsInfo >*
      mutable_lbsinfo();
  private:
  const ::YunJi::LbsMsg_LbsInfo& _internal_lbsinfo(int index) const;
  ::YunJi::LbsMsg_LbsInfo* _internal_add_lbsinfo();
  public:
  const ::YunJi::LbsMsg_LbsInfo& lbsinfo(int index) const;
  ::YunJi::LbsMsg_LbsInfo* add_lbsinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::LbsMsg_LbsInfo >&
      lbsinfo() const;

  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string ta = 6;
  void clear_ta();
  const std::string& ta() const;
  void set_ta(const std::string& value);
  void set_ta(std::string&& value);
  void set_ta(const char* value);
  void set_ta(const char* value, size_t size);
  std::string* mutable_ta();
  std::string* release_ta();
  void set_allocated_ta(std::string* ta);
  private:
  const std::string& _internal_ta() const;
  void _internal_set_ta(const std::string& value);
  std::string* _internal_mutable_ta();
  public:

  // string mcc = 7;
  void clear_mcc();
  const std::string& mcc() const;
  void set_mcc(const std::string& value);
  void set_mcc(std::string&& value);
  void set_mcc(const char* value);
  void set_mcc(const char* value, size_t size);
  std::string* mutable_mcc();
  std::string* release_mcc();
  void set_allocated_mcc(std::string* mcc);
  private:
  const std::string& _internal_mcc() const;
  void _internal_set_mcc(const std::string& value);
  std::string* _internal_mutable_mcc();
  public:

  // string mnc = 8;
  void clear_mnc();
  const std::string& mnc() const;
  void set_mnc(const std::string& value);
  void set_mnc(std::string&& value);
  void set_mnc(const char* value);
  void set_mnc(const char* value, size_t size);
  std::string* mutable_mnc();
  std::string* release_mnc();
  void set_allocated_mnc(std::string* mnc);
  private:
  const std::string& _internal_mnc() const;
  void _internal_set_mnc(const std::string& value);
  std::string* _internal_mutable_mnc();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 datetime = 4;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 systime = 5;
  void clear_systime();
  ::PROTOBUF_NAMESPACE_ID::uint64 systime() const;
  void set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_systime() const;
  void _internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.LbsMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::LbsMsg_LbsInfo > lbsinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 systime_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class WifiMsg_WifiInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.WifiMsg.WifiInfo) */ {
 public:
  WifiMsg_WifiInfo();
  virtual ~WifiMsg_WifiInfo();

  WifiMsg_WifiInfo(const WifiMsg_WifiInfo& from);
  WifiMsg_WifiInfo(WifiMsg_WifiInfo&& from) noexcept
    : WifiMsg_WifiInfo() {
    *this = ::std::move(from);
  }

  inline WifiMsg_WifiInfo& operator=(const WifiMsg_WifiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiMsg_WifiInfo& operator=(WifiMsg_WifiInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WifiMsg_WifiInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiMsg_WifiInfo* internal_default_instance() {
    return reinterpret_cast<const WifiMsg_WifiInfo*>(
               &_WifiMsg_WifiInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WifiMsg_WifiInfo& a, WifiMsg_WifiInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiMsg_WifiInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiMsg_WifiInfo* New() const final {
    return CreateMaybeMessage<WifiMsg_WifiInfo>(nullptr);
  }

  WifiMsg_WifiInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiMsg_WifiInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WifiMsg_WifiInfo& from);
  void MergeFrom(const WifiMsg_WifiInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiMsg_WifiInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.WifiMsg.WifiInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kRssiFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // sint32 rssi = 2;
  void clear_rssi();
  ::PROTOBUF_NAMESPACE_ID::int32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rssi() const;
  void _internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.WifiMsg.WifiInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class WifiMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.WifiMsg) */ {
 public:
  WifiMsg();
  virtual ~WifiMsg();

  WifiMsg(const WifiMsg& from);
  WifiMsg(WifiMsg&& from) noexcept
    : WifiMsg() {
    *this = ::std::move(from);
  }

  inline WifiMsg& operator=(const WifiMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiMsg& operator=(WifiMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WifiMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiMsg* internal_default_instance() {
    return reinterpret_cast<const WifiMsg*>(
               &_WifiMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WifiMsg& a, WifiMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiMsg* New() const final {
    return CreateMaybeMessage<WifiMsg>(nullptr);
  }

  WifiMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WifiMsg& from);
  void MergeFrom(const WifiMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.WifiMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WifiMsg_WifiInfo WifiInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kWifiinfoFieldNumber = 6,
    kImeiFieldNumber = 2,
    kIdFieldNumber = 1,
    kDatetimeFieldNumber = 4,
    kSystimeFieldNumber = 5,
    kSeqFieldNumber = 3,
  };
  // repeated .YunJi.WifiMsg.WifiInfo wifiinfo = 6;
  int wifiinfo_size() const;
  private:
  int _internal_wifiinfo_size() const;
  public:
  void clear_wifiinfo();
  ::YunJi::WifiMsg_WifiInfo* mutable_wifiinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::WifiMsg_WifiInfo >*
      mutable_wifiinfo();
  private:
  const ::YunJi::WifiMsg_WifiInfo& _internal_wifiinfo(int index) const;
  ::YunJi::WifiMsg_WifiInfo* _internal_add_wifiinfo();
  public:
  const ::YunJi::WifiMsg_WifiInfo& wifiinfo(int index) const;
  ::YunJi::WifiMsg_WifiInfo* add_wifiinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::WifiMsg_WifiInfo >&
      wifiinfo() const;

  // string imei = 2;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 datetime = 4;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 systime = 5;
  void clear_systime();
  ::PROTOBUF_NAMESPACE_ID::uint64 systime() const;
  void set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_systime() const;
  void _internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.WifiMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::WifiMsg_WifiInfo > wifiinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 systime_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class UpDevMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.UpDevMsg) */ {
 public:
  UpDevMsg();
  virtual ~UpDevMsg();

  UpDevMsg(const UpDevMsg& from);
  UpDevMsg(UpDevMsg&& from) noexcept
    : UpDevMsg() {
    *this = ::std::move(from);
  }

  inline UpDevMsg& operator=(const UpDevMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpDevMsg& operator=(UpDevMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpDevMsg& default_instance();

  enum MsgbodyCase {
    kGps = 2,
    kHb = 3,
    kAlarm = 4,
    kCmdrsp = 5,
    kIccid = 6,
    kLbs = 7,
    kWifi = 8,
    MSGBODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpDevMsg* internal_default_instance() {
    return reinterpret_cast<const UpDevMsg*>(
               &_UpDevMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpDevMsg& a, UpDevMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(UpDevMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpDevMsg* New() const final {
    return CreateMaybeMessage<UpDevMsg>(nullptr);
  }

  UpDevMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpDevMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpDevMsg& from);
  void MergeFrom(const UpDevMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpDevMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.UpDevMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgtypeFieldNumber = 1,
    kGpsFieldNumber = 2,
    kHbFieldNumber = 3,
    kAlarmFieldNumber = 4,
    kCmdrspFieldNumber = 5,
    kIccidFieldNumber = 6,
    kLbsFieldNumber = 7,
    kWifiFieldNumber = 8,
  };
  // .YunJi.MsgType msgtype = 1;
  void clear_msgtype();
  ::YunJi::MsgType msgtype() const;
  void set_msgtype(::YunJi::MsgType value);
  private:
  ::YunJi::MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::YunJi::MsgType value);
  public:

  // .YunJi.GpsMsg gps = 2;
  bool has_gps() const;
  private:
  bool _internal_has_gps() const;
  public:
  void clear_gps();
  const ::YunJi::GpsMsg& gps() const;
  ::YunJi::GpsMsg* release_gps();
  ::YunJi::GpsMsg* mutable_gps();
  void set_allocated_gps(::YunJi::GpsMsg* gps);
  private:
  const ::YunJi::GpsMsg& _internal_gps() const;
  ::YunJi::GpsMsg* _internal_mutable_gps();
  public:

  // .YunJi.HbMsg hb = 3;
  bool has_hb() const;
  private:
  bool _internal_has_hb() const;
  public:
  void clear_hb();
  const ::YunJi::HbMsg& hb() const;
  ::YunJi::HbMsg* release_hb();
  ::YunJi::HbMsg* mutable_hb();
  void set_allocated_hb(::YunJi::HbMsg* hb);
  private:
  const ::YunJi::HbMsg& _internal_hb() const;
  ::YunJi::HbMsg* _internal_mutable_hb();
  public:

  // .YunJi.AlarmMsg alarm = 4;
  bool has_alarm() const;
  private:
  bool _internal_has_alarm() const;
  public:
  void clear_alarm();
  const ::YunJi::AlarmMsg& alarm() const;
  ::YunJi::AlarmMsg* release_alarm();
  ::YunJi::AlarmMsg* mutable_alarm();
  void set_allocated_alarm(::YunJi::AlarmMsg* alarm);
  private:
  const ::YunJi::AlarmMsg& _internal_alarm() const;
  ::YunJi::AlarmMsg* _internal_mutable_alarm();
  public:

  // .YunJi.CommandRsp cmdrsp = 5;
  bool has_cmdrsp() const;
  private:
  bool _internal_has_cmdrsp() const;
  public:
  void clear_cmdrsp();
  const ::YunJi::CommandRsp& cmdrsp() const;
  ::YunJi::CommandRsp* release_cmdrsp();
  ::YunJi::CommandRsp* mutable_cmdrsp();
  void set_allocated_cmdrsp(::YunJi::CommandRsp* cmdrsp);
  private:
  const ::YunJi::CommandRsp& _internal_cmdrsp() const;
  ::YunJi::CommandRsp* _internal_mutable_cmdrsp();
  public:

  // .YunJi.IccidMsg iccid = 6;
  bool has_iccid() const;
  private:
  bool _internal_has_iccid() const;
  public:
  void clear_iccid();
  const ::YunJi::IccidMsg& iccid() const;
  ::YunJi::IccidMsg* release_iccid();
  ::YunJi::IccidMsg* mutable_iccid();
  void set_allocated_iccid(::YunJi::IccidMsg* iccid);
  private:
  const ::YunJi::IccidMsg& _internal_iccid() const;
  ::YunJi::IccidMsg* _internal_mutable_iccid();
  public:

  // .YunJi.LbsMsg lbs = 7;
  bool has_lbs() const;
  private:
  bool _internal_has_lbs() const;
  public:
  void clear_lbs();
  const ::YunJi::LbsMsg& lbs() const;
  ::YunJi::LbsMsg* release_lbs();
  ::YunJi::LbsMsg* mutable_lbs();
  void set_allocated_lbs(::YunJi::LbsMsg* lbs);
  private:
  const ::YunJi::LbsMsg& _internal_lbs() const;
  ::YunJi::LbsMsg* _internal_mutable_lbs();
  public:

  // .YunJi.WifiMsg wifi = 8;
  bool has_wifi() const;
  private:
  bool _internal_has_wifi() const;
  public:
  void clear_wifi();
  const ::YunJi::WifiMsg& wifi() const;
  ::YunJi::WifiMsg* release_wifi();
  ::YunJi::WifiMsg* mutable_wifi();
  void set_allocated_wifi(::YunJi::WifiMsg* wifi);
  private:
  const ::YunJi::WifiMsg& _internal_wifi() const;
  ::YunJi::WifiMsg* _internal_mutable_wifi();
  public:

  void clear_msgbody();
  MsgbodyCase msgbody_case() const;
  // @@protoc_insertion_point(class_scope:YunJi.UpDevMsg)
 private:
  class _Internal;
  void set_has_gps();
  void set_has_hb();
  void set_has_alarm();
  void set_has_cmdrsp();
  void set_has_iccid();
  void set_has_lbs();
  void set_has_wifi();

  inline bool has_msgbody() const;
  inline void clear_has_msgbody();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int msgtype_;
  union MsgbodyUnion {
    MsgbodyUnion() {}
    ::YunJi::GpsMsg* gps_;
    ::YunJi::HbMsg* hb_;
    ::YunJi::AlarmMsg* alarm_;
    ::YunJi::CommandRsp* cmdrsp_;
    ::YunJi::IccidMsg* iccid_;
    ::YunJi::LbsMsg* lbs_;
    ::YunJi::WifiMsg* wifi_;
  } msgbody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dev_2eproto;
};
// -------------------------------------------------------------------

class DownDevMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YunJi.DownDevMsg) */ {
 public:
  DownDevMsg();
  virtual ~DownDevMsg();

  DownDevMsg(const DownDevMsg& from);
  DownDevMsg(DownDevMsg&& from) noexcept
    : DownDevMsg() {
    *this = ::std::move(from);
  }

  inline DownDevMsg& operator=(const DownDevMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownDevMsg& operator=(DownDevMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownDevMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownDevMsg* internal_default_instance() {
    return reinterpret_cast<const DownDevMsg*>(
               &_DownDevMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DownDevMsg& a, DownDevMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DownDevMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownDevMsg* New() const final {
    return CreateMaybeMessage<DownDevMsg>(nullptr);
  }

  DownDevMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownDevMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownDevMsg& from);
  void MergeFrom(const DownDevMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownDevMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YunJi.DownDevMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dev_2eproto);
    return ::descriptor_table_dev_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdreqFieldNumber = 2,
    kMsgtypeFieldNumber = 1,
  };
  // .YunJi.CommandReq cmdreq = 2;
  bool has_cmdreq() const;
  private:
  bool _internal_has_cmdreq() const;
  public:
  void clear_cmdreq();
  const ::YunJi::CommandReq& cmdreq() const;
  ::YunJi::CommandReq* release_cmdreq();
  ::YunJi::CommandReq* mutable_cmdreq();
  void set_allocated_cmdreq(::YunJi::CommandReq* cmdreq);
  private:
  const ::YunJi::CommandReq& _internal_cmdreq() const;
  ::YunJi::CommandReq* _internal_mutable_cmdreq();
  public:

  // .YunJi.MsgType msgtype = 1;
  void clear_msgtype();
  ::YunJi::MsgType msgtype() const;
  void set_msgtype(::YunJi::MsgType value);
  private:
  ::YunJi::MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::YunJi::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:YunJi.DownDevMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::YunJi::CommandReq* cmdreq_;
  int msgtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dev_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GpsMsg

// uint64 id = 1;
inline void GpsMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.id)
  return _internal_id();
}
inline void GpsMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GpsMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.id)
}

// string imei = 2;
inline void GpsMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GpsMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.imei)
  return _internal_imei();
}
inline void GpsMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.imei)
}
inline std::string* GpsMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.GpsMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& GpsMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void GpsMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GpsMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.GpsMsg.imei)
}
inline void GpsMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.GpsMsg.imei)
}
inline void GpsMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.GpsMsg.imei)
}
inline std::string* GpsMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpsMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.GpsMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpsMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.GpsMsg.imei)
}

// uint64 datetime = 3;
inline void GpsMsg::clear_datetime() {
  datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::datetime() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.datetime)
  return _internal_datetime();
}
inline void GpsMsg::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  datetime_ = value;
}
inline void GpsMsg::set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.datetime)
}

// uint64 systime = 4;
inline void GpsMsg::clear_systime() {
  systime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::_internal_systime() const {
  return systime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpsMsg::systime() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.systime)
  return _internal_systime();
}
inline void GpsMsg::_internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  systime_ = value;
}
inline void GpsMsg::set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_systime(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.systime)
}

// sint32 lng = 5;
inline void GpsMsg::clear_lng() {
  lng_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::_internal_lng() const {
  return lng_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::lng() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.lng)
  return _internal_lng();
}
inline void GpsMsg::_internal_set_lng(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lng_ = value;
}
inline void GpsMsg::set_lng(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.lng)
}

// sint32 lat = 6;
inline void GpsMsg::clear_lat() {
  lat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::_internal_lat() const {
  return lat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::lat() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.lat)
  return _internal_lat();
}
inline void GpsMsg::_internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lat_ = value;
}
inline void GpsMsg::set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.lat)
}

// sint32 speed = 7;
inline void GpsMsg::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::speed() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.speed)
  return _internal_speed();
}
inline void GpsMsg::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void GpsMsg::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.speed)
}

// sint32 route = 8;
inline void GpsMsg::clear_route() {
  route_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::_internal_route() const {
  return route_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::route() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.route)
  return _internal_route();
}
inline void GpsMsg::_internal_set_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  route_ = value;
}
inline void GpsMsg::set_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.route)
}

// sint32 seq = 9;
inline void GpsMsg::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsMsg::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.seq)
  return _internal_seq();
}
inline void GpsMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void GpsMsg::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.seq)
}

// bytes status = 10;
inline void GpsMsg::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GpsMsg::status() const {
  // @@protoc_insertion_point(field_get:YunJi.GpsMsg.status)
  return _internal_status();
}
inline void GpsMsg::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:YunJi.GpsMsg.status)
}
inline std::string* GpsMsg::mutable_status() {
  // @@protoc_insertion_point(field_mutable:YunJi.GpsMsg.status)
  return _internal_mutable_status();
}
inline const std::string& GpsMsg::_internal_status() const {
  return status_.GetNoArena();
}
inline void GpsMsg::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GpsMsg::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.GpsMsg.status)
}
inline void GpsMsg::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.GpsMsg.status)
}
inline void GpsMsg::set_status(const void* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.GpsMsg.status)
}
inline std::string* GpsMsg::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpsMsg::release_status() {
  // @@protoc_insertion_point(field_release:YunJi.GpsMsg.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpsMsg::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:YunJi.GpsMsg.status)
}

// map<string, bytes> ext = 11;
inline int GpsMsg::_internal_ext_size() const {
  return ext_.size();
}
inline int GpsMsg::ext_size() const {
  return _internal_ext_size();
}
inline void GpsMsg::clear_ext() {
  ext_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GpsMsg::_internal_ext() const {
  return ext_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GpsMsg::ext() const {
  // @@protoc_insertion_point(field_map:YunJi.GpsMsg.ext)
  return _internal_ext();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GpsMsg::_internal_mutable_ext() {
  return ext_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GpsMsg::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:YunJi.GpsMsg.ext)
  return _internal_mutable_ext();
}

// -------------------------------------------------------------------

// HbMsg

// uint64 id = 1;
inline void HbMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HbMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HbMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.HbMsg.id)
  return _internal_id();
}
inline void HbMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void HbMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.HbMsg.id)
}

// string imei = 2;
inline void HbMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HbMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.HbMsg.imei)
  return _internal_imei();
}
inline void HbMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.HbMsg.imei)
}
inline std::string* HbMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.HbMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& HbMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void HbMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HbMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.HbMsg.imei)
}
inline void HbMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.HbMsg.imei)
}
inline void HbMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.HbMsg.imei)
}
inline std::string* HbMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HbMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.HbMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HbMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.HbMsg.imei)
}

// uint64 hearttime = 3;
inline void HbMsg::clear_hearttime() {
  hearttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HbMsg::_internal_hearttime() const {
  return hearttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HbMsg::hearttime() const {
  // @@protoc_insertion_point(field_get:YunJi.HbMsg.hearttime)
  return _internal_hearttime();
}
inline void HbMsg::_internal_set_hearttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hearttime_ = value;
}
inline void HbMsg::set_hearttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hearttime(value);
  // @@protoc_insertion_point(field_set:YunJi.HbMsg.hearttime)
}

// sint32 seq = 4;
inline void HbMsg::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HbMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HbMsg::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.HbMsg.seq)
  return _internal_seq();
}
inline void HbMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void HbMsg::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.HbMsg.seq)
}

// bytes status = 5;
inline void HbMsg::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HbMsg::status() const {
  // @@protoc_insertion_point(field_get:YunJi.HbMsg.status)
  return _internal_status();
}
inline void HbMsg::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:YunJi.HbMsg.status)
}
inline std::string* HbMsg::mutable_status() {
  // @@protoc_insertion_point(field_mutable:YunJi.HbMsg.status)
  return _internal_mutable_status();
}
inline const std::string& HbMsg::_internal_status() const {
  return status_.GetNoArena();
}
inline void HbMsg::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HbMsg::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.HbMsg.status)
}
inline void HbMsg::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.HbMsg.status)
}
inline void HbMsg::set_status(const void* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.HbMsg.status)
}
inline std::string* HbMsg::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HbMsg::release_status() {
  // @@protoc_insertion_point(field_release:YunJi.HbMsg.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HbMsg::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:YunJi.HbMsg.status)
}

// -------------------------------------------------------------------

// AlarmMsg

// uint64 id = 1;
inline void AlarmMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.id)
  return _internal_id();
}
inline void AlarmMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void AlarmMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.id)
}

// string imei = 2;
inline void AlarmMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.imei)
  return _internal_imei();
}
inline void AlarmMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.imei)
}
inline std::string* AlarmMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.AlarmMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& AlarmMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void AlarmMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.AlarmMsg.imei)
}
inline void AlarmMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.AlarmMsg.imei)
}
inline void AlarmMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.AlarmMsg.imei)
}
inline std::string* AlarmMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.AlarmMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.AlarmMsg.imei)
}

// uint64 alarmtime = 3;
inline void AlarmMsg::clear_alarmtime() {
  alarmtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMsg::_internal_alarmtime() const {
  return alarmtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMsg::alarmtime() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.alarmtime)
  return _internal_alarmtime();
}
inline void AlarmMsg::_internal_set_alarmtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  alarmtime_ = value;
}
inline void AlarmMsg::set_alarmtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_alarmtime(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.alarmtime)
}

// sint32 alarmtype = 4;
inline void AlarmMsg::clear_alarmtype() {
  alarmtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::_internal_alarmtype() const {
  return alarmtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::alarmtype() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.alarmtype)
  return _internal_alarmtype();
}
inline void AlarmMsg::_internal_set_alarmtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alarmtype_ = value;
}
inline void AlarmMsg::set_alarmtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alarmtype(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.alarmtype)
}

// sint32 lng = 5;
inline void AlarmMsg::clear_lng() {
  lng_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::_internal_lng() const {
  return lng_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::lng() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.lng)
  return _internal_lng();
}
inline void AlarmMsg::_internal_set_lng(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lng_ = value;
}
inline void AlarmMsg::set_lng(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.lng)
}

// sint32 lat = 6;
inline void AlarmMsg::clear_lat() {
  lat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::_internal_lat() const {
  return lat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::lat() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.lat)
  return _internal_lat();
}
inline void AlarmMsg::_internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lat_ = value;
}
inline void AlarmMsg::set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.lat)
}

// sint32 speed = 7;
inline void AlarmMsg::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::speed() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.speed)
  return _internal_speed();
}
inline void AlarmMsg::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void AlarmMsg::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.speed)
}

// sint32 route = 8;
inline void AlarmMsg::clear_route() {
  route_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::_internal_route() const {
  return route_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmMsg::route() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.route)
  return _internal_route();
}
inline void AlarmMsg::_internal_set_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  route_ = value;
}
inline void AlarmMsg::set_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.route)
}

// bytes status = 9;
inline void AlarmMsg::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmMsg::status() const {
  // @@protoc_insertion_point(field_get:YunJi.AlarmMsg.status)
  return _internal_status();
}
inline void AlarmMsg::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:YunJi.AlarmMsg.status)
}
inline std::string* AlarmMsg::mutable_status() {
  // @@protoc_insertion_point(field_mutable:YunJi.AlarmMsg.status)
  return _internal_mutable_status();
}
inline const std::string& AlarmMsg::_internal_status() const {
  return status_.GetNoArena();
}
inline void AlarmMsg::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmMsg::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.AlarmMsg.status)
}
inline void AlarmMsg::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.AlarmMsg.status)
}
inline void AlarmMsg::set_status(const void* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.AlarmMsg.status)
}
inline std::string* AlarmMsg::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmMsg::release_status() {
  // @@protoc_insertion_point(field_release:YunJi.AlarmMsg.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmMsg::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:YunJi.AlarmMsg.status)
}

// -------------------------------------------------------------------

// CommandReq

// uint64 id = 1;
inline void CommandReq::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReq::id() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.id)
  return _internal_id();
}
inline void CommandReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CommandReq::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.id)
}

// string imei = 2;
inline void CommandReq::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandReq::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.imei)
  return _internal_imei();
}
inline void CommandReq::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.imei)
}
inline std::string* CommandReq::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.CommandReq.imei)
  return _internal_mutable_imei();
}
inline const std::string& CommandReq::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void CommandReq::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandReq::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.CommandReq.imei)
}
inline void CommandReq::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.CommandReq.imei)
}
inline void CommandReq::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.CommandReq.imei)
}
inline std::string* CommandReq::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandReq::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.CommandReq.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReq::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.CommandReq.imei)
}

// sint32 seq = 3;
inline void CommandReq::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandReq::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandReq::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.seq)
  return _internal_seq();
}
inline void CommandReq::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void CommandReq::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.seq)
}

// uint64 reqtime = 4;
inline void CommandReq::clear_reqtime() {
  reqtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReq::_internal_reqtime() const {
  return reqtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReq::reqtime() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.reqtime)
  return _internal_reqtime();
}
inline void CommandReq::_internal_set_reqtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reqtime_ = value;
}
inline void CommandReq::set_reqtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reqtime(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.reqtime)
}

// string protocol = 5;
inline void CommandReq::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandReq::protocol() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.protocol)
  return _internal_protocol();
}
inline void CommandReq::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.protocol)
}
inline std::string* CommandReq::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:YunJi.CommandReq.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& CommandReq::_internal_protocol() const {
  return protocol_.GetNoArena();
}
inline void CommandReq::_internal_set_protocol(const std::string& value) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandReq::set_protocol(std::string&& value) {
  
  protocol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.CommandReq.protocol)
}
inline void CommandReq::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.CommandReq.protocol)
}
inline void CommandReq::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.CommandReq.protocol)
}
inline std::string* CommandReq::_internal_mutable_protocol() {
  
  return protocol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandReq::release_protocol() {
  // @@protoc_insertion_point(field_release:YunJi.CommandReq.protocol)
  
  return protocol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReq::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:YunJi.CommandReq.protocol)
}

// string content = 6;
inline void CommandReq::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandReq::content() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandReq.content)
  return _internal_content();
}
inline void CommandReq::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandReq.content)
}
inline std::string* CommandReq::mutable_content() {
  // @@protoc_insertion_point(field_mutable:YunJi.CommandReq.content)
  return _internal_mutable_content();
}
inline const std::string& CommandReq::_internal_content() const {
  return content_.GetNoArena();
}
inline void CommandReq::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandReq::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.CommandReq.content)
}
inline void CommandReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.CommandReq.content)
}
inline void CommandReq::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.CommandReq.content)
}
inline std::string* CommandReq::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandReq::release_content() {
  // @@protoc_insertion_point(field_release:YunJi.CommandReq.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:YunJi.CommandReq.content)
}

// -------------------------------------------------------------------

// CommandRsp

// uint64 id = 1;
inline void CommandRsp::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRsp::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRsp::id() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandRsp.id)
  return _internal_id();
}
inline void CommandRsp::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CommandRsp::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandRsp.id)
}

// string imei = 2;
inline void CommandRsp::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandRsp::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandRsp.imei)
  return _internal_imei();
}
inline void CommandRsp::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandRsp.imei)
}
inline std::string* CommandRsp::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.CommandRsp.imei)
  return _internal_mutable_imei();
}
inline const std::string& CommandRsp::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void CommandRsp::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandRsp::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.CommandRsp.imei)
}
inline void CommandRsp::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.CommandRsp.imei)
}
inline void CommandRsp::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.CommandRsp.imei)
}
inline std::string* CommandRsp::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandRsp::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.CommandRsp.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandRsp::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.CommandRsp.imei)
}

// sint32 seq = 3;
inline void CommandRsp::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandRsp::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandRsp::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandRsp.seq)
  return _internal_seq();
}
inline void CommandRsp::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void CommandRsp::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandRsp.seq)
}

// uint64 rsptime = 4;
inline void CommandRsp::clear_rsptime() {
  rsptime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRsp::_internal_rsptime() const {
  return rsptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRsp::rsptime() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandRsp.rsptime)
  return _internal_rsptime();
}
inline void CommandRsp::_internal_set_rsptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rsptime_ = value;
}
inline void CommandRsp::set_rsptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rsptime(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandRsp.rsptime)
}

// string rsp = 5;
inline void CommandRsp::clear_rsp() {
  rsp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandRsp::rsp() const {
  // @@protoc_insertion_point(field_get:YunJi.CommandRsp.rsp)
  return _internal_rsp();
}
inline void CommandRsp::set_rsp(const std::string& value) {
  _internal_set_rsp(value);
  // @@protoc_insertion_point(field_set:YunJi.CommandRsp.rsp)
}
inline std::string* CommandRsp::mutable_rsp() {
  // @@protoc_insertion_point(field_mutable:YunJi.CommandRsp.rsp)
  return _internal_mutable_rsp();
}
inline const std::string& CommandRsp::_internal_rsp() const {
  return rsp_.GetNoArena();
}
inline void CommandRsp::_internal_set_rsp(const std::string& value) {
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandRsp::set_rsp(std::string&& value) {
  
  rsp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.CommandRsp.rsp)
}
inline void CommandRsp::set_rsp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.CommandRsp.rsp)
}
inline void CommandRsp::set_rsp(const char* value, size_t size) {
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.CommandRsp.rsp)
}
inline std::string* CommandRsp::_internal_mutable_rsp() {
  
  return rsp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandRsp::release_rsp() {
  // @@protoc_insertion_point(field_release:YunJi.CommandRsp.rsp)
  
  return rsp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandRsp::set_allocated_rsp(std::string* rsp) {
  if (rsp != nullptr) {
    
  } else {
    
  }
  rsp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsp);
  // @@protoc_insertion_point(field_set_allocated:YunJi.CommandRsp.rsp)
}

// -------------------------------------------------------------------

// IccidMsg

// uint64 id = 1;
inline void IccidMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IccidMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IccidMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.IccidMsg.id)
  return _internal_id();
}
inline void IccidMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void IccidMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.IccidMsg.id)
}

// string imei = 2;
inline void IccidMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IccidMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.IccidMsg.imei)
  return _internal_imei();
}
inline void IccidMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.IccidMsg.imei)
}
inline std::string* IccidMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.IccidMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& IccidMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void IccidMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IccidMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.IccidMsg.imei)
}
inline void IccidMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.IccidMsg.imei)
}
inline void IccidMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.IccidMsg.imei)
}
inline std::string* IccidMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IccidMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.IccidMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IccidMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.IccidMsg.imei)
}

// sint32 seq = 3;
inline void IccidMsg::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IccidMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IccidMsg::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.IccidMsg.seq)
  return _internal_seq();
}
inline void IccidMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void IccidMsg::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.IccidMsg.seq)
}

// string iccid = 4;
inline void IccidMsg::clear_iccid() {
  iccid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IccidMsg::iccid() const {
  // @@protoc_insertion_point(field_get:YunJi.IccidMsg.iccid)
  return _internal_iccid();
}
inline void IccidMsg::set_iccid(const std::string& value) {
  _internal_set_iccid(value);
  // @@protoc_insertion_point(field_set:YunJi.IccidMsg.iccid)
}
inline std::string* IccidMsg::mutable_iccid() {
  // @@protoc_insertion_point(field_mutable:YunJi.IccidMsg.iccid)
  return _internal_mutable_iccid();
}
inline const std::string& IccidMsg::_internal_iccid() const {
  return iccid_.GetNoArena();
}
inline void IccidMsg::_internal_set_iccid(const std::string& value) {
  
  iccid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IccidMsg::set_iccid(std::string&& value) {
  
  iccid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.IccidMsg.iccid)
}
inline void IccidMsg::set_iccid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iccid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.IccidMsg.iccid)
}
inline void IccidMsg::set_iccid(const char* value, size_t size) {
  
  iccid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.IccidMsg.iccid)
}
inline std::string* IccidMsg::_internal_mutable_iccid() {
  
  return iccid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IccidMsg::release_iccid() {
  // @@protoc_insertion_point(field_release:YunJi.IccidMsg.iccid)
  
  return iccid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IccidMsg::set_allocated_iccid(std::string* iccid) {
  if (iccid != nullptr) {
    
  } else {
    
  }
  iccid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iccid);
  // @@protoc_insertion_point(field_set_allocated:YunJi.IccidMsg.iccid)
}

// -------------------------------------------------------------------

// LbsMsg_LbsInfo

// string lac = 1;
inline void LbsMsg_LbsInfo::clear_lac() {
  lac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg_LbsInfo::lac() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.LbsInfo.lac)
  return _internal_lac();
}
inline void LbsMsg_LbsInfo::set_lac(const std::string& value) {
  _internal_set_lac(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.LbsInfo.lac)
}
inline std::string* LbsMsg_LbsInfo::mutable_lac() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.LbsInfo.lac)
  return _internal_mutable_lac();
}
inline const std::string& LbsMsg_LbsInfo::_internal_lac() const {
  return lac_.GetNoArena();
}
inline void LbsMsg_LbsInfo::_internal_set_lac(const std::string& value) {
  
  lac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg_LbsInfo::set_lac(std::string&& value) {
  
  lac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.LbsInfo.lac)
}
inline void LbsMsg_LbsInfo::set_lac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.LbsInfo.lac)
}
inline void LbsMsg_LbsInfo::set_lac(const char* value, size_t size) {
  
  lac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.LbsInfo.lac)
}
inline std::string* LbsMsg_LbsInfo::_internal_mutable_lac() {
  
  return lac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg_LbsInfo::release_lac() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.LbsInfo.lac)
  
  return lac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg_LbsInfo::set_allocated_lac(std::string* lac) {
  if (lac != nullptr) {
    
  } else {
    
  }
  lac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lac);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.LbsInfo.lac)
}

// string ci = 2;
inline void LbsMsg_LbsInfo::clear_ci() {
  ci_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg_LbsInfo::ci() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.LbsInfo.ci)
  return _internal_ci();
}
inline void LbsMsg_LbsInfo::set_ci(const std::string& value) {
  _internal_set_ci(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.LbsInfo.ci)
}
inline std::string* LbsMsg_LbsInfo::mutable_ci() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.LbsInfo.ci)
  return _internal_mutable_ci();
}
inline const std::string& LbsMsg_LbsInfo::_internal_ci() const {
  return ci_.GetNoArena();
}
inline void LbsMsg_LbsInfo::_internal_set_ci(const std::string& value) {
  
  ci_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg_LbsInfo::set_ci(std::string&& value) {
  
  ci_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.LbsInfo.ci)
}
inline void LbsMsg_LbsInfo::set_ci(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ci_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.LbsInfo.ci)
}
inline void LbsMsg_LbsInfo::set_ci(const char* value, size_t size) {
  
  ci_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.LbsInfo.ci)
}
inline std::string* LbsMsg_LbsInfo::_internal_mutable_ci() {
  
  return ci_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg_LbsInfo::release_ci() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.LbsInfo.ci)
  
  return ci_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg_LbsInfo::set_allocated_ci(std::string* ci) {
  if (ci != nullptr) {
    
  } else {
    
  }
  ci_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ci);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.LbsInfo.ci)
}

// sint32 rssi = 3;
inline void LbsMsg_LbsInfo::clear_rssi() {
  rssi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LbsMsg_LbsInfo::_internal_rssi() const {
  return rssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LbsMsg_LbsInfo::rssi() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.LbsInfo.rssi)
  return _internal_rssi();
}
inline void LbsMsg_LbsInfo::_internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rssi_ = value;
}
inline void LbsMsg_LbsInfo::set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.LbsInfo.rssi)
}

// -------------------------------------------------------------------

// LbsMsg

// uint64 id = 1;
inline void LbsMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.id)
  return _internal_id();
}
inline void LbsMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void LbsMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.id)
}

// string imei = 2;
inline void LbsMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.imei)
  return _internal_imei();
}
inline void LbsMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.imei)
}
inline std::string* LbsMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& LbsMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void LbsMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.imei)
}
inline void LbsMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.imei)
}
inline void LbsMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.imei)
}
inline std::string* LbsMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.imei)
}

// sint32 seq = 3;
inline void LbsMsg::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LbsMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LbsMsg::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.seq)
  return _internal_seq();
}
inline void LbsMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void LbsMsg::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.seq)
}

// uint64 datetime = 4;
inline void LbsMsg::clear_datetime() {
  datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::datetime() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.datetime)
  return _internal_datetime();
}
inline void LbsMsg::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  datetime_ = value;
}
inline void LbsMsg::set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.datetime)
}

// uint64 systime = 5;
inline void LbsMsg::clear_systime() {
  systime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::_internal_systime() const {
  return systime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LbsMsg::systime() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.systime)
  return _internal_systime();
}
inline void LbsMsg::_internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  systime_ = value;
}
inline void LbsMsg::set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_systime(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.systime)
}

// string ta = 6;
inline void LbsMsg::clear_ta() {
  ta_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg::ta() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.ta)
  return _internal_ta();
}
inline void LbsMsg::set_ta(const std::string& value) {
  _internal_set_ta(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.ta)
}
inline std::string* LbsMsg::mutable_ta() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.ta)
  return _internal_mutable_ta();
}
inline const std::string& LbsMsg::_internal_ta() const {
  return ta_.GetNoArena();
}
inline void LbsMsg::_internal_set_ta(const std::string& value) {
  
  ta_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg::set_ta(std::string&& value) {
  
  ta_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.ta)
}
inline void LbsMsg::set_ta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ta_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.ta)
}
inline void LbsMsg::set_ta(const char* value, size_t size) {
  
  ta_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.ta)
}
inline std::string* LbsMsg::_internal_mutable_ta() {
  
  return ta_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg::release_ta() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.ta)
  
  return ta_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg::set_allocated_ta(std::string* ta) {
  if (ta != nullptr) {
    
  } else {
    
  }
  ta_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ta);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.ta)
}

// string mcc = 7;
inline void LbsMsg::clear_mcc() {
  mcc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg::mcc() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.mcc)
  return _internal_mcc();
}
inline void LbsMsg::set_mcc(const std::string& value) {
  _internal_set_mcc(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.mcc)
}
inline std::string* LbsMsg::mutable_mcc() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.mcc)
  return _internal_mutable_mcc();
}
inline const std::string& LbsMsg::_internal_mcc() const {
  return mcc_.GetNoArena();
}
inline void LbsMsg::_internal_set_mcc(const std::string& value) {
  
  mcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg::set_mcc(std::string&& value) {
  
  mcc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.mcc)
}
inline void LbsMsg::set_mcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.mcc)
}
inline void LbsMsg::set_mcc(const char* value, size_t size) {
  
  mcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.mcc)
}
inline std::string* LbsMsg::_internal_mutable_mcc() {
  
  return mcc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg::release_mcc() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.mcc)
  
  return mcc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg::set_allocated_mcc(std::string* mcc) {
  if (mcc != nullptr) {
    
  } else {
    
  }
  mcc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcc);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.mcc)
}

// string mnc = 8;
inline void LbsMsg::clear_mnc() {
  mnc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LbsMsg::mnc() const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.mnc)
  return _internal_mnc();
}
inline void LbsMsg::set_mnc(const std::string& value) {
  _internal_set_mnc(value);
  // @@protoc_insertion_point(field_set:YunJi.LbsMsg.mnc)
}
inline std::string* LbsMsg::mutable_mnc() {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.mnc)
  return _internal_mutable_mnc();
}
inline const std::string& LbsMsg::_internal_mnc() const {
  return mnc_.GetNoArena();
}
inline void LbsMsg::_internal_set_mnc(const std::string& value) {
  
  mnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LbsMsg::set_mnc(std::string&& value) {
  
  mnc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.LbsMsg.mnc)
}
inline void LbsMsg::set_mnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.LbsMsg.mnc)
}
inline void LbsMsg::set_mnc(const char* value, size_t size) {
  
  mnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.LbsMsg.mnc)
}
inline std::string* LbsMsg::_internal_mutable_mnc() {
  
  return mnc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LbsMsg::release_mnc() {
  // @@protoc_insertion_point(field_release:YunJi.LbsMsg.mnc)
  
  return mnc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LbsMsg::set_allocated_mnc(std::string* mnc) {
  if (mnc != nullptr) {
    
  } else {
    
  }
  mnc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mnc);
  // @@protoc_insertion_point(field_set_allocated:YunJi.LbsMsg.mnc)
}

// repeated .YunJi.LbsMsg.LbsInfo lbsinfo = 9;
inline int LbsMsg::_internal_lbsinfo_size() const {
  return lbsinfo_.size();
}
inline int LbsMsg::lbsinfo_size() const {
  return _internal_lbsinfo_size();
}
inline void LbsMsg::clear_lbsinfo() {
  lbsinfo_.Clear();
}
inline ::YunJi::LbsMsg_LbsInfo* LbsMsg::mutable_lbsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:YunJi.LbsMsg.lbsinfo)
  return lbsinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::LbsMsg_LbsInfo >*
LbsMsg::mutable_lbsinfo() {
  // @@protoc_insertion_point(field_mutable_list:YunJi.LbsMsg.lbsinfo)
  return &lbsinfo_;
}
inline const ::YunJi::LbsMsg_LbsInfo& LbsMsg::_internal_lbsinfo(int index) const {
  return lbsinfo_.Get(index);
}
inline const ::YunJi::LbsMsg_LbsInfo& LbsMsg::lbsinfo(int index) const {
  // @@protoc_insertion_point(field_get:YunJi.LbsMsg.lbsinfo)
  return _internal_lbsinfo(index);
}
inline ::YunJi::LbsMsg_LbsInfo* LbsMsg::_internal_add_lbsinfo() {
  return lbsinfo_.Add();
}
inline ::YunJi::LbsMsg_LbsInfo* LbsMsg::add_lbsinfo() {
  // @@protoc_insertion_point(field_add:YunJi.LbsMsg.lbsinfo)
  return _internal_add_lbsinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::LbsMsg_LbsInfo >&
LbsMsg::lbsinfo() const {
  // @@protoc_insertion_point(field_list:YunJi.LbsMsg.lbsinfo)
  return lbsinfo_;
}

// -------------------------------------------------------------------

// WifiMsg_WifiInfo

// string ssid = 1;
inline void WifiMsg_WifiInfo::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WifiMsg_WifiInfo::ssid() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.WifiInfo.ssid)
  return _internal_ssid();
}
inline void WifiMsg_WifiInfo::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.WifiInfo.ssid)
}
inline std::string* WifiMsg_WifiInfo::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:YunJi.WifiMsg.WifiInfo.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& WifiMsg_WifiInfo::_internal_ssid() const {
  return ssid_.GetNoArena();
}
inline void WifiMsg_WifiInfo::_internal_set_ssid(const std::string& value) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WifiMsg_WifiInfo::set_ssid(std::string&& value) {
  
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.WifiMsg.WifiInfo.ssid)
}
inline void WifiMsg_WifiInfo::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.WifiMsg.WifiInfo.ssid)
}
inline void WifiMsg_WifiInfo::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.WifiMsg.WifiInfo.ssid)
}
inline std::string* WifiMsg_WifiInfo::_internal_mutable_ssid() {
  
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiMsg_WifiInfo::release_ssid() {
  // @@protoc_insertion_point(field_release:YunJi.WifiMsg.WifiInfo.ssid)
  
  return ssid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiMsg_WifiInfo::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:YunJi.WifiMsg.WifiInfo.ssid)
}

// sint32 rssi = 2;
inline void WifiMsg_WifiInfo::clear_rssi() {
  rssi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiMsg_WifiInfo::_internal_rssi() const {
  return rssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiMsg_WifiInfo::rssi() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.WifiInfo.rssi)
  return _internal_rssi();
}
inline void WifiMsg_WifiInfo::_internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rssi_ = value;
}
inline void WifiMsg_WifiInfo::set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.WifiInfo.rssi)
}

// -------------------------------------------------------------------

// WifiMsg

// uint64 id = 1;
inline void WifiMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::id() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.id)
  return _internal_id();
}
inline void WifiMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void WifiMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.id)
}

// string imei = 2;
inline void WifiMsg::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WifiMsg::imei() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.imei)
  return _internal_imei();
}
inline void WifiMsg::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.imei)
}
inline std::string* WifiMsg::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:YunJi.WifiMsg.imei)
  return _internal_mutable_imei();
}
inline const std::string& WifiMsg::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void WifiMsg::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WifiMsg::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YunJi.WifiMsg.imei)
}
inline void WifiMsg::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YunJi.WifiMsg.imei)
}
inline void WifiMsg::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YunJi.WifiMsg.imei)
}
inline std::string* WifiMsg::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiMsg::release_imei() {
  // @@protoc_insertion_point(field_release:YunJi.WifiMsg.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiMsg::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:YunJi.WifiMsg.imei)
}

// sint32 seq = 3;
inline void WifiMsg::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiMsg::seq() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.seq)
  return _internal_seq();
}
inline void WifiMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void WifiMsg::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.seq)
}

// uint64 datetime = 4;
inline void WifiMsg::clear_datetime() {
  datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::datetime() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.datetime)
  return _internal_datetime();
}
inline void WifiMsg::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  datetime_ = value;
}
inline void WifiMsg::set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.datetime)
}

// uint64 systime = 5;
inline void WifiMsg::clear_systime() {
  systime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::_internal_systime() const {
  return systime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WifiMsg::systime() const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.systime)
  return _internal_systime();
}
inline void WifiMsg::_internal_set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  systime_ = value;
}
inline void WifiMsg::set_systime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_systime(value);
  // @@protoc_insertion_point(field_set:YunJi.WifiMsg.systime)
}

// repeated .YunJi.WifiMsg.WifiInfo wifiinfo = 6;
inline int WifiMsg::_internal_wifiinfo_size() const {
  return wifiinfo_.size();
}
inline int WifiMsg::wifiinfo_size() const {
  return _internal_wifiinfo_size();
}
inline void WifiMsg::clear_wifiinfo() {
  wifiinfo_.Clear();
}
inline ::YunJi::WifiMsg_WifiInfo* WifiMsg::mutable_wifiinfo(int index) {
  // @@protoc_insertion_point(field_mutable:YunJi.WifiMsg.wifiinfo)
  return wifiinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::WifiMsg_WifiInfo >*
WifiMsg::mutable_wifiinfo() {
  // @@protoc_insertion_point(field_mutable_list:YunJi.WifiMsg.wifiinfo)
  return &wifiinfo_;
}
inline const ::YunJi::WifiMsg_WifiInfo& WifiMsg::_internal_wifiinfo(int index) const {
  return wifiinfo_.Get(index);
}
inline const ::YunJi::WifiMsg_WifiInfo& WifiMsg::wifiinfo(int index) const {
  // @@protoc_insertion_point(field_get:YunJi.WifiMsg.wifiinfo)
  return _internal_wifiinfo(index);
}
inline ::YunJi::WifiMsg_WifiInfo* WifiMsg::_internal_add_wifiinfo() {
  return wifiinfo_.Add();
}
inline ::YunJi::WifiMsg_WifiInfo* WifiMsg::add_wifiinfo() {
  // @@protoc_insertion_point(field_add:YunJi.WifiMsg.wifiinfo)
  return _internal_add_wifiinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YunJi::WifiMsg_WifiInfo >&
WifiMsg::wifiinfo() const {
  // @@protoc_insertion_point(field_list:YunJi.WifiMsg.wifiinfo)
  return wifiinfo_;
}

// -------------------------------------------------------------------

// UpDevMsg

// .YunJi.MsgType msgtype = 1;
inline void UpDevMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::YunJi::MsgType UpDevMsg::_internal_msgtype() const {
  return static_cast< ::YunJi::MsgType >(msgtype_);
}
inline ::YunJi::MsgType UpDevMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.msgtype)
  return _internal_msgtype();
}
inline void UpDevMsg::_internal_set_msgtype(::YunJi::MsgType value) {
  
  msgtype_ = value;
}
inline void UpDevMsg::set_msgtype(::YunJi::MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:YunJi.UpDevMsg.msgtype)
}

// .YunJi.GpsMsg gps = 2;
inline bool UpDevMsg::_internal_has_gps() const {
  return msgbody_case() == kGps;
}
inline bool UpDevMsg::has_gps() const {
  return _internal_has_gps();
}
inline void UpDevMsg::set_has_gps() {
  _oneof_case_[0] = kGps;
}
inline void UpDevMsg::clear_gps() {
  if (_internal_has_gps()) {
    delete msgbody_.gps_;
    clear_has_msgbody();
  }
}
inline ::YunJi::GpsMsg* UpDevMsg::release_gps() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.gps)
  if (_internal_has_gps()) {
    clear_has_msgbody();
      ::YunJi::GpsMsg* temp = msgbody_.gps_;
    msgbody_.gps_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::GpsMsg& UpDevMsg::_internal_gps() const {
  return _internal_has_gps()
      ? *msgbody_.gps_
      : *reinterpret_cast< ::YunJi::GpsMsg*>(&::YunJi::_GpsMsg_default_instance_);
}
inline const ::YunJi::GpsMsg& UpDevMsg::gps() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.gps)
  return _internal_gps();
}
inline ::YunJi::GpsMsg* UpDevMsg::_internal_mutable_gps() {
  if (!_internal_has_gps()) {
    clear_msgbody();
    set_has_gps();
    msgbody_.gps_ = CreateMaybeMessage< ::YunJi::GpsMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.gps_;
}
inline ::YunJi::GpsMsg* UpDevMsg::mutable_gps() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.gps)
  return _internal_mutable_gps();
}

// .YunJi.HbMsg hb = 3;
inline bool UpDevMsg::_internal_has_hb() const {
  return msgbody_case() == kHb;
}
inline bool UpDevMsg::has_hb() const {
  return _internal_has_hb();
}
inline void UpDevMsg::set_has_hb() {
  _oneof_case_[0] = kHb;
}
inline void UpDevMsg::clear_hb() {
  if (_internal_has_hb()) {
    delete msgbody_.hb_;
    clear_has_msgbody();
  }
}
inline ::YunJi::HbMsg* UpDevMsg::release_hb() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.hb)
  if (_internal_has_hb()) {
    clear_has_msgbody();
      ::YunJi::HbMsg* temp = msgbody_.hb_;
    msgbody_.hb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::HbMsg& UpDevMsg::_internal_hb() const {
  return _internal_has_hb()
      ? *msgbody_.hb_
      : *reinterpret_cast< ::YunJi::HbMsg*>(&::YunJi::_HbMsg_default_instance_);
}
inline const ::YunJi::HbMsg& UpDevMsg::hb() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.hb)
  return _internal_hb();
}
inline ::YunJi::HbMsg* UpDevMsg::_internal_mutable_hb() {
  if (!_internal_has_hb()) {
    clear_msgbody();
    set_has_hb();
    msgbody_.hb_ = CreateMaybeMessage< ::YunJi::HbMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.hb_;
}
inline ::YunJi::HbMsg* UpDevMsg::mutable_hb() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.hb)
  return _internal_mutable_hb();
}

// .YunJi.AlarmMsg alarm = 4;
inline bool UpDevMsg::_internal_has_alarm() const {
  return msgbody_case() == kAlarm;
}
inline bool UpDevMsg::has_alarm() const {
  return _internal_has_alarm();
}
inline void UpDevMsg::set_has_alarm() {
  _oneof_case_[0] = kAlarm;
}
inline void UpDevMsg::clear_alarm() {
  if (_internal_has_alarm()) {
    delete msgbody_.alarm_;
    clear_has_msgbody();
  }
}
inline ::YunJi::AlarmMsg* UpDevMsg::release_alarm() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.alarm)
  if (_internal_has_alarm()) {
    clear_has_msgbody();
      ::YunJi::AlarmMsg* temp = msgbody_.alarm_;
    msgbody_.alarm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::AlarmMsg& UpDevMsg::_internal_alarm() const {
  return _internal_has_alarm()
      ? *msgbody_.alarm_
      : *reinterpret_cast< ::YunJi::AlarmMsg*>(&::YunJi::_AlarmMsg_default_instance_);
}
inline const ::YunJi::AlarmMsg& UpDevMsg::alarm() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.alarm)
  return _internal_alarm();
}
inline ::YunJi::AlarmMsg* UpDevMsg::_internal_mutable_alarm() {
  if (!_internal_has_alarm()) {
    clear_msgbody();
    set_has_alarm();
    msgbody_.alarm_ = CreateMaybeMessage< ::YunJi::AlarmMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.alarm_;
}
inline ::YunJi::AlarmMsg* UpDevMsg::mutable_alarm() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.alarm)
  return _internal_mutable_alarm();
}

// .YunJi.CommandRsp cmdrsp = 5;
inline bool UpDevMsg::_internal_has_cmdrsp() const {
  return msgbody_case() == kCmdrsp;
}
inline bool UpDevMsg::has_cmdrsp() const {
  return _internal_has_cmdrsp();
}
inline void UpDevMsg::set_has_cmdrsp() {
  _oneof_case_[0] = kCmdrsp;
}
inline void UpDevMsg::clear_cmdrsp() {
  if (_internal_has_cmdrsp()) {
    delete msgbody_.cmdrsp_;
    clear_has_msgbody();
  }
}
inline ::YunJi::CommandRsp* UpDevMsg::release_cmdrsp() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.cmdrsp)
  if (_internal_has_cmdrsp()) {
    clear_has_msgbody();
      ::YunJi::CommandRsp* temp = msgbody_.cmdrsp_;
    msgbody_.cmdrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::CommandRsp& UpDevMsg::_internal_cmdrsp() const {
  return _internal_has_cmdrsp()
      ? *msgbody_.cmdrsp_
      : *reinterpret_cast< ::YunJi::CommandRsp*>(&::YunJi::_CommandRsp_default_instance_);
}
inline const ::YunJi::CommandRsp& UpDevMsg::cmdrsp() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.cmdrsp)
  return _internal_cmdrsp();
}
inline ::YunJi::CommandRsp* UpDevMsg::_internal_mutable_cmdrsp() {
  if (!_internal_has_cmdrsp()) {
    clear_msgbody();
    set_has_cmdrsp();
    msgbody_.cmdrsp_ = CreateMaybeMessage< ::YunJi::CommandRsp >(
        GetArenaNoVirtual());
  }
  return msgbody_.cmdrsp_;
}
inline ::YunJi::CommandRsp* UpDevMsg::mutable_cmdrsp() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.cmdrsp)
  return _internal_mutable_cmdrsp();
}

// .YunJi.IccidMsg iccid = 6;
inline bool UpDevMsg::_internal_has_iccid() const {
  return msgbody_case() == kIccid;
}
inline bool UpDevMsg::has_iccid() const {
  return _internal_has_iccid();
}
inline void UpDevMsg::set_has_iccid() {
  _oneof_case_[0] = kIccid;
}
inline void UpDevMsg::clear_iccid() {
  if (_internal_has_iccid()) {
    delete msgbody_.iccid_;
    clear_has_msgbody();
  }
}
inline ::YunJi::IccidMsg* UpDevMsg::release_iccid() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.iccid)
  if (_internal_has_iccid()) {
    clear_has_msgbody();
      ::YunJi::IccidMsg* temp = msgbody_.iccid_;
    msgbody_.iccid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::IccidMsg& UpDevMsg::_internal_iccid() const {
  return _internal_has_iccid()
      ? *msgbody_.iccid_
      : *reinterpret_cast< ::YunJi::IccidMsg*>(&::YunJi::_IccidMsg_default_instance_);
}
inline const ::YunJi::IccidMsg& UpDevMsg::iccid() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.iccid)
  return _internal_iccid();
}
inline ::YunJi::IccidMsg* UpDevMsg::_internal_mutable_iccid() {
  if (!_internal_has_iccid()) {
    clear_msgbody();
    set_has_iccid();
    msgbody_.iccid_ = CreateMaybeMessage< ::YunJi::IccidMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.iccid_;
}
inline ::YunJi::IccidMsg* UpDevMsg::mutable_iccid() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.iccid)
  return _internal_mutable_iccid();
}

// .YunJi.LbsMsg lbs = 7;
inline bool UpDevMsg::_internal_has_lbs() const {
  return msgbody_case() == kLbs;
}
inline bool UpDevMsg::has_lbs() const {
  return _internal_has_lbs();
}
inline void UpDevMsg::set_has_lbs() {
  _oneof_case_[0] = kLbs;
}
inline void UpDevMsg::clear_lbs() {
  if (_internal_has_lbs()) {
    delete msgbody_.lbs_;
    clear_has_msgbody();
  }
}
inline ::YunJi::LbsMsg* UpDevMsg::release_lbs() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.lbs)
  if (_internal_has_lbs()) {
    clear_has_msgbody();
      ::YunJi::LbsMsg* temp = msgbody_.lbs_;
    msgbody_.lbs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::LbsMsg& UpDevMsg::_internal_lbs() const {
  return _internal_has_lbs()
      ? *msgbody_.lbs_
      : *reinterpret_cast< ::YunJi::LbsMsg*>(&::YunJi::_LbsMsg_default_instance_);
}
inline const ::YunJi::LbsMsg& UpDevMsg::lbs() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.lbs)
  return _internal_lbs();
}
inline ::YunJi::LbsMsg* UpDevMsg::_internal_mutable_lbs() {
  if (!_internal_has_lbs()) {
    clear_msgbody();
    set_has_lbs();
    msgbody_.lbs_ = CreateMaybeMessage< ::YunJi::LbsMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.lbs_;
}
inline ::YunJi::LbsMsg* UpDevMsg::mutable_lbs() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.lbs)
  return _internal_mutable_lbs();
}

// .YunJi.WifiMsg wifi = 8;
inline bool UpDevMsg::_internal_has_wifi() const {
  return msgbody_case() == kWifi;
}
inline bool UpDevMsg::has_wifi() const {
  return _internal_has_wifi();
}
inline void UpDevMsg::set_has_wifi() {
  _oneof_case_[0] = kWifi;
}
inline void UpDevMsg::clear_wifi() {
  if (_internal_has_wifi()) {
    delete msgbody_.wifi_;
    clear_has_msgbody();
  }
}
inline ::YunJi::WifiMsg* UpDevMsg::release_wifi() {
  // @@protoc_insertion_point(field_release:YunJi.UpDevMsg.wifi)
  if (_internal_has_wifi()) {
    clear_has_msgbody();
      ::YunJi::WifiMsg* temp = msgbody_.wifi_;
    msgbody_.wifi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::YunJi::WifiMsg& UpDevMsg::_internal_wifi() const {
  return _internal_has_wifi()
      ? *msgbody_.wifi_
      : *reinterpret_cast< ::YunJi::WifiMsg*>(&::YunJi::_WifiMsg_default_instance_);
}
inline const ::YunJi::WifiMsg& UpDevMsg::wifi() const {
  // @@protoc_insertion_point(field_get:YunJi.UpDevMsg.wifi)
  return _internal_wifi();
}
inline ::YunJi::WifiMsg* UpDevMsg::_internal_mutable_wifi() {
  if (!_internal_has_wifi()) {
    clear_msgbody();
    set_has_wifi();
    msgbody_.wifi_ = CreateMaybeMessage< ::YunJi::WifiMsg >(
        GetArenaNoVirtual());
  }
  return msgbody_.wifi_;
}
inline ::YunJi::WifiMsg* UpDevMsg::mutable_wifi() {
  // @@protoc_insertion_point(field_mutable:YunJi.UpDevMsg.wifi)
  return _internal_mutable_wifi();
}

inline bool UpDevMsg::has_msgbody() const {
  return msgbody_case() != MSGBODY_NOT_SET;
}
inline void UpDevMsg::clear_has_msgbody() {
  _oneof_case_[0] = MSGBODY_NOT_SET;
}
inline UpDevMsg::MsgbodyCase UpDevMsg::msgbody_case() const {
  return UpDevMsg::MsgbodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DownDevMsg

// .YunJi.MsgType msgtype = 1;
inline void DownDevMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::YunJi::MsgType DownDevMsg::_internal_msgtype() const {
  return static_cast< ::YunJi::MsgType >(msgtype_);
}
inline ::YunJi::MsgType DownDevMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:YunJi.DownDevMsg.msgtype)
  return _internal_msgtype();
}
inline void DownDevMsg::_internal_set_msgtype(::YunJi::MsgType value) {
  
  msgtype_ = value;
}
inline void DownDevMsg::set_msgtype(::YunJi::MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:YunJi.DownDevMsg.msgtype)
}

// .YunJi.CommandReq cmdreq = 2;
inline bool DownDevMsg::_internal_has_cmdreq() const {
  return this != internal_default_instance() && cmdreq_ != nullptr;
}
inline bool DownDevMsg::has_cmdreq() const {
  return _internal_has_cmdreq();
}
inline void DownDevMsg::clear_cmdreq() {
  if (GetArenaNoVirtual() == nullptr && cmdreq_ != nullptr) {
    delete cmdreq_;
  }
  cmdreq_ = nullptr;
}
inline const ::YunJi::CommandReq& DownDevMsg::_internal_cmdreq() const {
  const ::YunJi::CommandReq* p = cmdreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::YunJi::CommandReq*>(
      &::YunJi::_CommandReq_default_instance_);
}
inline const ::YunJi::CommandReq& DownDevMsg::cmdreq() const {
  // @@protoc_insertion_point(field_get:YunJi.DownDevMsg.cmdreq)
  return _internal_cmdreq();
}
inline ::YunJi::CommandReq* DownDevMsg::release_cmdreq() {
  // @@protoc_insertion_point(field_release:YunJi.DownDevMsg.cmdreq)
  
  ::YunJi::CommandReq* temp = cmdreq_;
  cmdreq_ = nullptr;
  return temp;
}
inline ::YunJi::CommandReq* DownDevMsg::_internal_mutable_cmdreq() {
  
  if (cmdreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::YunJi::CommandReq>(GetArenaNoVirtual());
    cmdreq_ = p;
  }
  return cmdreq_;
}
inline ::YunJi::CommandReq* DownDevMsg::mutable_cmdreq() {
  // @@protoc_insertion_point(field_mutable:YunJi.DownDevMsg.cmdreq)
  return _internal_mutable_cmdreq();
}
inline void DownDevMsg::set_allocated_cmdreq(::YunJi::CommandReq* cmdreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cmdreq_;
  }
  if (cmdreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmdreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmdreq, submessage_arena);
    }
    
  } else {
    
  }
  cmdreq_ = cmdreq;
  // @@protoc_insertion_point(field_set_allocated:YunJi.DownDevMsg.cmdreq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YunJi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::YunJi::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::YunJi::MsgType>() {
  return ::YunJi::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dev_2eproto
