// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `gmqi.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __gmqi_h__
#define __gmqi_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GMQ
{

class MsgQueue;

}

}

namespace GMQ
{

class MsgQueue;
bool operator==(const MsgQueue&, const MsgQueue&);
bool operator<(const MsgQueue&, const MsgQueue&);

}

namespace IceInternal
{

::Ice::Object* upCast(::GMQ::MsgQueue*);
::IceProxy::Ice::Object* upCast(::IceProxy::GMQ::MsgQueue*);

}

namespace GMQ
{

typedef ::IceInternal::Handle< ::GMQ::MsgQueue> MsgQueuePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GMQ::MsgQueue> MsgQueuePrx;

void __read(::IceInternal::BasicStream*, MsgQueuePrx&);
void __patch__MsgQueuePtr(void*, ::Ice::ObjectPtr&);

}

namespace GMQ
{

typedef ::std::vector< ::Ice::Byte> Line;

typedef ::std::vector< ::GMQ::Line> Table;
void __writeTable(::IceInternal::BasicStream*, const ::GMQ::Line*, const ::GMQ::Line*);
void __readTable(::IceInternal::BasicStream*, Table&);

typedef ::std::vector< ::std::string> StrSeq;

}

namespace GMQ
{

class Callback_MsgQueue_writeMessages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeMessages_Base> Callback_MsgQueue_writeMessagesPtr;

class Callback_MsgQueue_writeMessagesTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeMessagesTo_Base> Callback_MsgQueue_writeMessagesToPtr;

class Callback_MsgQueue_writeMessagesToIPPort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeMessagesToIPPort_Base> Callback_MsgQueue_writeMessagesToIPPortPtr;

class Callback_MsgQueue_writeMessagesFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeMessagesFromTo_Base> Callback_MsgQueue_writeMessagesFromToPtr;

class Callback_MsgQueue_writeMessagesFrom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeMessagesFrom_Base> Callback_MsgQueue_writeMessagesFromPtr;

class Callback_MsgQueue_writeString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeString_Base> Callback_MsgQueue_writeStringPtr;

class Callback_MsgQueue_writeStringsTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeStringsTo_Base> Callback_MsgQueue_writeStringsToPtr;

class Callback_MsgQueue_readMessages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_readMessages_Base> Callback_MsgQueue_readMessagesPtr;

class Callback_MsgQueue_readStrings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_readStrings_Base> Callback_MsgQueue_readStringsPtr;

class Callback_MsgQueue_readMessagesAck_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_readMessagesAck_Base> Callback_MsgQueue_readMessagesAckPtr;

class Callback_MsgQueue_addQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_addQueue_Base> Callback_MsgQueue_addQueuePtr;

class Callback_MsgQueue_removeQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_removeQueue_Base> Callback_MsgQueue_removeQueuePtr;

class Callback_MsgQueue_listQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_listQueue_Base> Callback_MsgQueue_listQueuePtr;

class Callback_MsgQueue_addRepQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_addRepQueue_Base> Callback_MsgQueue_addRepQueuePtr;

class Callback_MsgQueue_removeRepQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_removeRepQueue_Base> Callback_MsgQueue_removeRepQueuePtr;

class Callback_MsgQueue_listRepQueue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_listRepQueue_Base> Callback_MsgQueue_listRepQueuePtr;

class Callback_MsgQueue_getGmqStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_getGmqStatus_Base> Callback_MsgQueue_getGmqStatusPtr;

class Callback_MsgQueue_setGmqStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_setGmqStatus_Base> Callback_MsgQueue_setGmqStatusPtr;

class Callback_MsgQueue_getGmqVerboseStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_getGmqVerboseStatus_Base> Callback_MsgQueue_getGmqVerboseStatusPtr;

class Callback_MsgQueue_writeStringsFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeStringsFromTo_Base> Callback_MsgQueue_writeStringsFromToPtr;

class Callback_MsgQueue_sequenceStringsFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_sequenceStringsFromTo_Base> Callback_MsgQueue_sequenceStringsFromToPtr;

class Callback_MsgQueue_writeStringsToIPPort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_writeStringsToIPPort_Base> Callback_MsgQueue_writeStringsToIPPortPtr;

class Callback_MsgQueue_routeStringsFromTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MsgQueue_routeStringsFromTo_Base> Callback_MsgQueue_routeStringsFromToPtr;

}

namespace IceProxy
{

namespace GMQ
{

class MsgQueue : virtual public ::IceProxy::Ice::Object
{
public:

    void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content)
    {
        writeMessages(content, 0);
    }
    void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::Ice::Context& __ctx)
    {
        writeMessages(content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content)
    {
        return begin_writeMessages(content, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::Ice::Context& __ctx)
    {
        return begin_writeMessages(content, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(content, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::GMQ::Callback_MsgQueue_writeMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& content, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessages(content, &__ctx, __del, __cookie);
    }

    void end_writeMessages(const ::Ice::AsyncResultPtr&);
    
private:

    void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl)
    {
        return writeMessagesTo(queue, tbl, 0);
    }
    bool writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::Ice::Context& __ctx)
    {
        return writeMessagesTo(queue, tbl, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl)
    {
        return begin_writeMessagesTo(queue, tbl, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesTo(queue, tbl, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesTo(queue, tbl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesTo(queue, tbl, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::GMQ::Callback_MsgQueue_writeMessagesToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesTo(queue, tbl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeMessagesToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesTo(queue, tbl, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesTo(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0);
    }
    bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::GMQ::Callback_MsgQueue_writeMessagesToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& calleeip, ::Ice::Long calleeport, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeMessagesToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesToIPPort(tbl, caller, calleeip, calleeport, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesToIPPort(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee)
    {
        return writeMessagesFromTo(tbl, caller, callee, 0);
    }
    bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx)
    {
        return writeMessagesFromTo(tbl, caller, callee, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::GMQ::Callback_MsgQueue_writeMessagesFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::std::string& callee, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeMessagesFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFromTo(tbl, caller, callee, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesFromTo(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller)
    {
        return writeMessagesFrom(queue, tbl, caller, 0);
    }
    bool writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx)
    {
        return writeMessagesFrom(queue, tbl, caller, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::GMQ::Callback_MsgQueue_writeMessagesFromPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string& queue, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>& tbl, const ::std::string& caller, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeMessagesFromPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessagesFrom(queue, tbl, caller, &__ctx, __del, __cookie);
    }

    bool end_writeMessagesFrom(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeString(const ::std::string& str)
    {
        writeString(str, 0);
    }
    void writeString(const ::std::string& str, const ::Ice::Context& __ctx)
    {
        writeString(str, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str)
    {
        return begin_writeString(str, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str, const ::Ice::Context& __ctx)
    {
        return begin_writeString(str, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeString(str, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeString(str, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str, const ::GMQ::Callback_MsgQueue_writeStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeString(str, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeString(const ::std::string& str, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeString(str, &__ctx, __del, __cookie);
    }

    void end_writeString(const ::Ice::AsyncResultPtr&);
    
private:

    void writeString(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeString(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs)
    {
        return writeStringsTo(queue, strs, 0);
    }
    bool writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::Ice::Context& __ctx)
    {
        return writeStringsTo(queue, strs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs)
    {
        return begin_writeStringsTo(queue, strs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::Ice::Context& __ctx)
    {
        return begin_writeStringsTo(queue, strs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsTo(queue, strs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsTo(queue, strs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::GMQ::Callback_MsgQueue_writeStringsToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsTo(queue, strs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string& queue, const ::GMQ::StrSeq& strs, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeStringsToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsTo(queue, strs, &__ctx, __del, __cookie);
    }

    bool end_writeStringsTo(const ::Ice::AsyncResultPtr&);
    
private:

    bool writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long readMessages(const ::std::string& queue, ::GMQ::Table& tbl)
    {
        return readMessages(queue, tbl, 0);
    }
    ::Ice::Long readMessages(const ::std::string& queue, ::GMQ::Table& tbl, const ::Ice::Context& __ctx)
    {
        return readMessages(queue, tbl, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue)
    {
        return begin_readMessages(queue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return begin_readMessages(queue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessages(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessages(queue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue, const ::GMQ::Callback_MsgQueue_readMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessages(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string& queue, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_readMessagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessages(queue, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_readMessages(::GMQ::Table& tbl, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long readMessages(const ::std::string&, ::GMQ::Table&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readMessages(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long readStrings(const ::std::string& queue, ::GMQ::StrSeq& strs)
    {
        return readStrings(queue, strs, 0);
    }
    ::Ice::Long readStrings(const ::std::string& queue, ::GMQ::StrSeq& strs, const ::Ice::Context& __ctx)
    {
        return readStrings(queue, strs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue)
    {
        return begin_readStrings(queue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return begin_readStrings(queue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readStrings(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readStrings(queue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue, const ::GMQ::Callback_MsgQueue_readStringsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readStrings(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string& queue, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_readStringsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readStrings(queue, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_readStrings(::GMQ::StrSeq& strs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long readStrings(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readStrings(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void readMessagesAck(const ::std::string& queue, ::Ice::Long seq)
    {
        readMessagesAck(queue, seq, 0);
    }
    void readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::Ice::Context& __ctx)
    {
        readMessagesAck(queue, seq, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq)
    {
        return begin_readMessagesAck(queue, seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::Ice::Context& __ctx)
    {
        return begin_readMessagesAck(queue, seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessagesAck(queue, seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessagesAck(queue, seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::GMQ::Callback_MsgQueue_readMessagesAckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessagesAck(queue, seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string& queue, ::Ice::Long seq, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_readMessagesAckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readMessagesAck(queue, seq, &__ctx, __del, __cookie);
    }

    void end_readMessagesAck(const ::Ice::AsyncResultPtr&);
    
private:

    void readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addQueue(const ::std::string& queue)
    {
        return addQueue(queue, 0);
    }
    bool addQueue(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return addQueue(queue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue)
    {
        return begin_addQueue(queue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return begin_addQueue(queue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQueue(queue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue, const ::GMQ::Callback_MsgQueue_addQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_addQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQueue(queue, &__ctx, __del, __cookie);
    }

    bool end_addQueue(const ::Ice::AsyncResultPtr&);
    
private:

    bool addQueue(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addQueue(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool removeQueue(const ::std::string& queue)
    {
        return removeQueue(queue, 0);
    }
    bool removeQueue(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return removeQueue(queue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue)
    {
        return begin_removeQueue(queue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return begin_removeQueue(queue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeQueue(queue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue, const ::GMQ::Callback_MsgQueue_removeQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_removeQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeQueue(queue, &__ctx, __del, __cookie);
    }

    bool end_removeQueue(const ::Ice::AsyncResultPtr&);
    
private:

    bool removeQueue(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeQueue(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void listQueue(::GMQ::StrSeq& queues)
    {
        listQueue(queues, 0);
    }
    void listQueue(::GMQ::StrSeq& queues, const ::Ice::Context& __ctx)
    {
        listQueue(queues, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_listQueue()
    {
        return begin_listQueue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listQueue(const ::Ice::Context& __ctx)
    {
        return begin_listQueue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listQueue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listQueue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listQueue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listQueue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listQueue(const ::GMQ::Callback_MsgQueue_listQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listQueue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listQueue(const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_listQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listQueue(&__ctx, __del, __cookie);
    }

    void end_listQueue(::GMQ::StrSeq& queues, const ::Ice::AsyncResultPtr&);
    
private:

    void listQueue(::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_listQueue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues)
    {
        return addRepQueue(queue, repQueues, 0);
    }
    bool addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx)
    {
        return addRepQueue(queue, repQueues, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues)
    {
        return begin_addRepQueue(queue, repQueues, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx)
    {
        return begin_addRepQueue(queue, repQueues, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRepQueue(queue, repQueues, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRepQueue(queue, repQueues, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::GMQ::Callback_MsgQueue_addRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRepQueue(queue, repQueues, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_addRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRepQueue(queue, repQueues, &__ctx, __del, __cookie);
    }

    bool end_addRepQueue(const ::Ice::AsyncResultPtr&);
    
private:

    bool addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues)
    {
        return removeRepQueue(queue, repQueues, 0);
    }
    bool removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx)
    {
        return removeRepQueue(queue, repQueues, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues)
    {
        return begin_removeRepQueue(queue, repQueues, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx)
    {
        return begin_removeRepQueue(queue, repQueues, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRepQueue(queue, repQueues, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRepQueue(queue, repQueues, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::GMQ::Callback_MsgQueue_removeRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRepQueue(queue, repQueues, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string& queue, const ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_removeRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRepQueue(queue, repQueues, &__ctx, __del, __cookie);
    }

    bool end_removeRepQueue(const ::Ice::AsyncResultPtr&);
    
private:

    bool removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void listRepQueue(const ::std::string& queue, ::GMQ::StrSeq& repQueues)
    {
        listRepQueue(queue, repQueues, 0);
    }
    void listRepQueue(const ::std::string& queue, ::GMQ::StrSeq& repQueues, const ::Ice::Context& __ctx)
    {
        listRepQueue(queue, repQueues, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue)
    {
        return begin_listRepQueue(queue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue, const ::Ice::Context& __ctx)
    {
        return begin_listRepQueue(queue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listRepQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listRepQueue(queue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue, const ::GMQ::Callback_MsgQueue_listRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listRepQueue(queue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string& queue, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_listRepQueuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_listRepQueue(queue, &__ctx, __del, __cookie);
    }

    void end_listRepQueue(::GMQ::StrSeq& repQueues, const ::Ice::AsyncResultPtr&);
    
private:

    void listRepQueue(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_listRepQueue(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getGmqStatus(::GMQ::StrSeq& status)
    {
        getGmqStatus(status, 0);
    }
    void getGmqStatus(::GMQ::StrSeq& status, const ::Ice::Context& __ctx)
    {
        getGmqStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus()
    {
        return begin_getGmqStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::Ice::Context& __ctx)
    {
        return begin_getGmqStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::GMQ::Callback_MsgQueue_getGmqStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_getGmqStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqStatus(&__ctx, __del, __cookie);
    }

    void end_getGmqStatus(::GMQ::StrSeq& status, const ::Ice::AsyncResultPtr&);
    
private:

    void getGmqStatus(::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGmqStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGmqStatus(const ::GMQ::StrSeq& status)
    {
        setGmqStatus(status, 0);
    }
    void setGmqStatus(const ::GMQ::StrSeq& status, const ::Ice::Context& __ctx)
    {
        setGmqStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status)
    {
        return begin_setGmqStatus(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status, const ::Ice::Context& __ctx)
    {
        return begin_setGmqStatus(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGmqStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGmqStatus(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status, const ::GMQ::Callback_MsgQueue_setGmqStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGmqStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq& status, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_setGmqStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGmqStatus(status, &__ctx, __del, __cookie);
    }

    void end_setGmqStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getGmqVerboseStatus(::GMQ::StrSeq& status)
    {
        getGmqVerboseStatus(status, 0);
    }
    void getGmqVerboseStatus(::GMQ::StrSeq& status, const ::Ice::Context& __ctx)
    {
        getGmqVerboseStatus(status, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus()
    {
        return begin_getGmqVerboseStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::Ice::Context& __ctx)
    {
        return begin_getGmqVerboseStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqVerboseStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqVerboseStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::GMQ::Callback_MsgQueue_getGmqVerboseStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqVerboseStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_getGmqVerboseStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGmqVerboseStatus(&__ctx, __del, __cookie);
    }

    void end_getGmqVerboseStatus(::GMQ::StrSeq& status, const ::Ice::AsyncResultPtr&);
    
private:

    void getGmqVerboseStatus(::GMQ::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGmqVerboseStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version)
    {
        return writeStringsFromTo(strs, caller, callee, shareid, version, 0);
    }
    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx)
    {
        return writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::GMQ::Callback_MsgQueue_writeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsFromTo(strs, caller, callee, shareid, version, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_writeStringsFromTo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, ::std::string& outcalleeip, ::Ice::Long& outcalleeport)
    {
        return sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, outcalleeip, outcalleeport, 0);
    }
    ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, ::std::string& outcalleeip, ::Ice::Long& outcalleeport, const ::Ice::Context& __ctx)
    {
        return sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, outcalleeip, outcalleeport, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::Ice::Context& __ctx)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::GMQ::Callback_MsgQueue_sequenceStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_sequenceStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sequenceStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_sequenceStringsFromTo(::std::string& outcalleeip, ::Ice::Long& outcalleeport, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, ::std::string&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port)
    {
        return writeStringsToIPPort(strs, caller, callee, ip, port, 0);
    }
    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::Ice::Context& __ctx)
    {
        return writeStringsToIPPort(strs, caller, callee, ip, port, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::Ice::Context& __ctx)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::GMQ::Callback_MsgQueue_writeStringsToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, const ::std::string& ip, ::Ice::Long port, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_writeStringsToIPPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeStringsToIPPort(strs, caller, callee, ip, port, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_writeStringsToIPPort(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep)
    {
        return routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, 0);
    }
    ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::Ice::Context& __ctx)
    {
        return routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::Ice::Context& __ctx)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::GMQ::Callback_MsgQueue_routeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>& strs, const ::std::string& caller, const ::std::string& callee, ::Ice::Long shareid, ::Ice::Long version, const ::std::string& incalleeip, ::Ice::Long incalleeport, const ::std::string& calleeidc, ::Ice::Long routestep, const ::Ice::Context& __ctx, const ::GMQ::Callback_MsgQueue_routeStringsFromToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_routeStringsFromTo(strs, caller, callee, shareid, version, incalleeip, incalleeport, calleeidc, routestep, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_routeStringsFromTo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MsgQueue> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MsgQueue*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MsgQueue*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace GMQ
{

class MsgQueue : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*) = 0;

    virtual bool writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Context*) = 0;

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void writeString(const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long readMessages(const ::std::string&, ::GMQ::Table&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long readStrings(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual void readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual bool addQueue(const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool removeQueue(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void listQueue(::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual bool addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual bool removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual void listRepQueue(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual void getGmqStatus(::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual void setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual void getGmqVerboseStatus(::GMQ::StrSeq&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, ::std::string&, ::Ice::Long&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace GMQ
{

class MsgQueue : virtual public ::IceDelegate::GMQ::MsgQueue,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);

    virtual bool writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Context*);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);

    virtual void writeString(const ::std::string&, const ::Ice::Context*);

    virtual bool writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual ::Ice::Long readMessages(const ::std::string&, ::GMQ::Table&, const ::Ice::Context*);

    virtual ::Ice::Long readStrings(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool addQueue(const ::std::string&, const ::Ice::Context*);

    virtual bool removeQueue(const ::std::string&, const ::Ice::Context*);

    virtual void listQueue(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual bool addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual bool removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void listRepQueue(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void getGmqStatus(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void getGmqVerboseStatus(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, ::std::string&, ::Ice::Long&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace GMQ
{

class MsgQueue : virtual public ::IceDelegate::GMQ::MsgQueue,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);

    virtual bool writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Context*);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Context*);

    virtual void writeString(const ::std::string&, const ::Ice::Context*);

    virtual bool writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual ::Ice::Long readMessages(const ::std::string&, ::GMQ::Table&, const ::Ice::Context*);

    virtual ::Ice::Long readStrings(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual bool addQueue(const ::std::string&, const ::Ice::Context*);

    virtual bool removeQueue(const ::std::string&, const ::Ice::Context*);

    virtual void listQueue(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual bool addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual bool removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void listRepQueue(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void getGmqStatus(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Context*);

    virtual void getGmqVerboseStatus(::GMQ::StrSeq&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, ::std::string&, ::Ice::Long&, const ::Ice::Context*);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
};

}

}

namespace GMQ
{

class MsgQueue : virtual public ::Ice::Object
{
public:

    typedef MsgQueuePrx ProxyType;
    typedef MsgQueuePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void writeMessages(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesTo(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesToIPPort(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesToIPPort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesFromTo(const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeMessagesFrom(const ::std::string&, const ::std::pair< ::GMQ::Table::const_iterator,  ::GMQ::Table::const_iterator>&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessagesFrom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeString(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool writeStringsTo(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeStringsTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long readMessages(const ::std::string&, ::GMQ::Table&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readMessages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long readStrings(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readStrings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void readMessagesAck(const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readMessagesAck(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addQueue(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool removeQueue(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void listQueue(::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___listQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addRepQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool removeRepQueue(const ::std::string&, const ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeRepQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void listRepQueue(const ::std::string&, ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___listRepQueue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getGmqStatus(::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGmqStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGmqStatus(const ::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGmqStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getGmqVerboseStatus(::GMQ::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGmqVerboseStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long writeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeStringsFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long sequenceStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, ::std::string&, ::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sequenceStringsFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long writeStringsToIPPort(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeStringsToIPPort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long routeStringsFromTo(const ::std::pair< ::GMQ::StrSeq::const_iterator,  ::GMQ::StrSeq::const_iterator>&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___routeStringsFromTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MsgQueue& l, const MsgQueue& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MsgQueue& l, const MsgQueue& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GMQ
{

template<class T>
class CallbackNC_MsgQueue_writeMessages : public Callback_MsgQueue_writeMessages_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MsgQueue_writeMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessages<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessages<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeMessages : public Callback_MsgQueue_writeMessages_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MsgQueue_writeMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessages<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesPtr
newCallback_MsgQueue_writeMessages(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessages<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeMessagesTo : public Callback_MsgQueue_writeMessagesTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_writeMessagesTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeMessagesToPtr
newCallback_MsgQueue_writeMessagesTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesToPtr
newCallback_MsgQueue_writeMessagesTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeMessagesTo : public Callback_MsgQueue_writeMessagesTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_writeMessagesTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeMessagesToPtr
newCallback_MsgQueue_writeMessagesTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesToPtr
newCallback_MsgQueue_writeMessagesTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeMessagesToIPPort : public Callback_MsgQueue_writeMessagesToIPPort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_writeMessagesToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeMessagesToIPPortPtr
newCallback_MsgQueue_writeMessagesToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesToIPPortPtr
newCallback_MsgQueue_writeMessagesToIPPort(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeMessagesToIPPort : public Callback_MsgQueue_writeMessagesToIPPort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_writeMessagesToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeMessagesToIPPortPtr
newCallback_MsgQueue_writeMessagesToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesToIPPortPtr
newCallback_MsgQueue_writeMessagesToIPPort(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeMessagesFromTo : public Callback_MsgQueue_writeMessagesFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_writeMessagesFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeMessagesFromToPtr
newCallback_MsgQueue_writeMessagesFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesFromToPtr
newCallback_MsgQueue_writeMessagesFromTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeMessagesFromTo : public Callback_MsgQueue_writeMessagesFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_writeMessagesFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeMessagesFromToPtr
newCallback_MsgQueue_writeMessagesFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesFromToPtr
newCallback_MsgQueue_writeMessagesFromTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeMessagesFrom : public Callback_MsgQueue_writeMessagesFrom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_writeMessagesFrom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFrom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeMessagesFromPtr
newCallback_MsgQueue_writeMessagesFrom(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesFrom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeMessagesFromPtr
newCallback_MsgQueue_writeMessagesFrom(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeMessagesFrom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeMessagesFrom : public Callback_MsgQueue_writeMessagesFrom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_writeMessagesFrom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeMessagesFrom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeMessagesFromPtr
newCallback_MsgQueue_writeMessagesFrom(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesFrom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeMessagesFromPtr
newCallback_MsgQueue_writeMessagesFrom(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeMessagesFrom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeString : public Callback_MsgQueue_writeString_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MsgQueue_writeString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeString<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeString<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeString : public Callback_MsgQueue_writeString_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MsgQueue_writeString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeString<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringPtr
newCallback_MsgQueue_writeString(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeString<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeStringsTo : public Callback_MsgQueue_writeStringsTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_writeStringsTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeStringsTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeStringsToPtr
newCallback_MsgQueue_writeStringsTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringsToPtr
newCallback_MsgQueue_writeStringsTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeStringsTo : public Callback_MsgQueue_writeStringsTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_writeStringsTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_writeStringsTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeStringsToPtr
newCallback_MsgQueue_writeStringsTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringsToPtr
newCallback_MsgQueue_writeStringsTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_readMessages : public Callback_MsgQueue_readMessages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long, const ::GMQ::Table&);

    CallbackNC_MsgQueue_readMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::Table tbl;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_readMessages(tbl, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tbl);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, tbl);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_readMessagesPtr
newCallback_MsgQueue_readMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::GMQ::Table&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_readMessagesPtr
newCallback_MsgQueue_readMessages(T* instance, void (T::*cb)(::Ice::Long, const ::GMQ::Table&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_readMessages : public Callback_MsgQueue_readMessages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const ::GMQ::Table&, const CT&);

    Callback_MsgQueue_readMessages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::Table tbl;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_readMessages(tbl, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tbl, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, tbl, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_readMessagesPtr
newCallback_MsgQueue_readMessages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::GMQ::Table&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_readMessagesPtr
newCallback_MsgQueue_readMessages(T* instance, void (T::*cb)(::Ice::Long, const ::GMQ::Table&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_readStrings : public Callback_MsgQueue_readStrings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long, const ::GMQ::StrSeq&);

    CallbackNC_MsgQueue_readStrings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq strs;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_readStrings(strs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, strs);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, strs);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_readStringsPtr
newCallback_MsgQueue_readStrings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readStrings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_readStringsPtr
newCallback_MsgQueue_readStrings(T* instance, void (T::*cb)(::Ice::Long, const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readStrings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_readStrings : public Callback_MsgQueue_readStrings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const ::GMQ::StrSeq&, const CT&);

    Callback_MsgQueue_readStrings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq strs;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_readStrings(strs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, strs, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, strs, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_readStringsPtr
newCallback_MsgQueue_readStrings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readStrings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_readStringsPtr
newCallback_MsgQueue_readStrings(T* instance, void (T::*cb)(::Ice::Long, const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readStrings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_readMessagesAck : public Callback_MsgQueue_readMessagesAck_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MsgQueue_readMessagesAck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessagesAck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessagesAck<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessagesAck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_readMessagesAck<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_readMessagesAck : public Callback_MsgQueue_readMessagesAck_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MsgQueue_readMessagesAck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessagesAck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessagesAck<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessagesAck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_readMessagesAckPtr
newCallback_MsgQueue_readMessagesAck(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_readMessagesAck<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_addQueue : public Callback_MsgQueue_addQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_addQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_addQueuePtr
newCallback_MsgQueue_addQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_addQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_addQueuePtr
newCallback_MsgQueue_addQueue(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_addQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_addQueue : public Callback_MsgQueue_addQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_addQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_addQueuePtr
newCallback_MsgQueue_addQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_addQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_addQueuePtr
newCallback_MsgQueue_addQueue(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_addQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_removeQueue : public Callback_MsgQueue_removeQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_removeQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_removeQueuePtr
newCallback_MsgQueue_removeQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_removeQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_removeQueuePtr
newCallback_MsgQueue_removeQueue(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_removeQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_removeQueue : public Callback_MsgQueue_removeQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_removeQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_removeQueuePtr
newCallback_MsgQueue_removeQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_removeQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_removeQueuePtr
newCallback_MsgQueue_removeQueue(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_removeQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_listQueue : public Callback_MsgQueue_listQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMQ::StrSeq&);

    CallbackNC_MsgQueue_listQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq queues;
        try
        {
            __proxy->end_listQueue(queues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(queues);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(queues);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_listQueuePtr
newCallback_MsgQueue_listQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_listQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_listQueuePtr
newCallback_MsgQueue_listQueue(T* instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_listQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_listQueue : public Callback_MsgQueue_listQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMQ::StrSeq&, const CT&);

    Callback_MsgQueue_listQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq queues;
        try
        {
            __proxy->end_listQueue(queues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(queues, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(queues, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_listQueuePtr
newCallback_MsgQueue_listQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_listQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_listQueuePtr
newCallback_MsgQueue_listQueue(T* instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_listQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_addRepQueue : public Callback_MsgQueue_addRepQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_addRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addRepQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_addRepQueuePtr
newCallback_MsgQueue_addRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_addRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_addRepQueuePtr
newCallback_MsgQueue_addRepQueue(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_addRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_addRepQueue : public Callback_MsgQueue_addRepQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_addRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addRepQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_addRepQueuePtr
newCallback_MsgQueue_addRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_addRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_addRepQueuePtr
newCallback_MsgQueue_addRepQueue(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_addRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_removeRepQueue : public Callback_MsgQueue_removeRepQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_MsgQueue_removeRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeRepQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_removeRepQueuePtr
newCallback_MsgQueue_removeRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_removeRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_removeRepQueuePtr
newCallback_MsgQueue_removeRepQueue(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_removeRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_removeRepQueue : public Callback_MsgQueue_removeRepQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_MsgQueue_removeRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeRepQueue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_removeRepQueuePtr
newCallback_MsgQueue_removeRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_removeRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_removeRepQueuePtr
newCallback_MsgQueue_removeRepQueue(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_removeRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_listRepQueue : public Callback_MsgQueue_listRepQueue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMQ::StrSeq&);

    CallbackNC_MsgQueue_listRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq repQueues;
        try
        {
            __proxy->end_listRepQueue(repQueues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(repQueues);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(repQueues);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_listRepQueuePtr
newCallback_MsgQueue_listRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_listRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_listRepQueuePtr
newCallback_MsgQueue_listRepQueue(T* instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_listRepQueue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_listRepQueue : public Callback_MsgQueue_listRepQueue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMQ::StrSeq&, const CT&);

    Callback_MsgQueue_listRepQueue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq repQueues;
        try
        {
            __proxy->end_listRepQueue(repQueues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(repQueues, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(repQueues, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_listRepQueuePtr
newCallback_MsgQueue_listRepQueue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_listRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_listRepQueuePtr
newCallback_MsgQueue_listRepQueue(T* instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_listRepQueue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_getGmqStatus : public Callback_MsgQueue_getGmqStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMQ::StrSeq&);

    CallbackNC_MsgQueue_getGmqStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq status;
        try
        {
            __proxy->end_getGmqStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(status);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_getGmqStatusPtr
newCallback_MsgQueue_getGmqStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_getGmqStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_getGmqStatusPtr
newCallback_MsgQueue_getGmqStatus(T* instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_getGmqStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_getGmqStatus : public Callback_MsgQueue_getGmqStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMQ::StrSeq&, const CT&);

    Callback_MsgQueue_getGmqStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq status;
        try
        {
            __proxy->end_getGmqStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_getGmqStatusPtr
newCallback_MsgQueue_getGmqStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_getGmqStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_getGmqStatusPtr
newCallback_MsgQueue_getGmqStatus(T* instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_getGmqStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_setGmqStatus : public Callback_MsgQueue_setGmqStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MsgQueue_setGmqStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_setGmqStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_setGmqStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_setGmqStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_setGmqStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_setGmqStatus : public Callback_MsgQueue_setGmqStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MsgQueue_setGmqStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_setGmqStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_setGmqStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_setGmqStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_setGmqStatusPtr
newCallback_MsgQueue_setGmqStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_setGmqStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_getGmqVerboseStatus : public Callback_MsgQueue_getGmqVerboseStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GMQ::StrSeq&);

    CallbackNC_MsgQueue_getGmqVerboseStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq status;
        try
        {
            __proxy->end_getGmqVerboseStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(status);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_getGmqVerboseStatusPtr
newCallback_MsgQueue_getGmqVerboseStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_getGmqVerboseStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_getGmqVerboseStatusPtr
newCallback_MsgQueue_getGmqVerboseStatus(T* instance, void (T::*cb)(const ::GMQ::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_getGmqVerboseStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_getGmqVerboseStatus : public Callback_MsgQueue_getGmqVerboseStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GMQ::StrSeq&, const CT&);

    Callback_MsgQueue_getGmqVerboseStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::GMQ::StrSeq status;
        try
        {
            __proxy->end_getGmqVerboseStatus(status, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(status, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_getGmqVerboseStatusPtr
newCallback_MsgQueue_getGmqVerboseStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_getGmqVerboseStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_getGmqVerboseStatusPtr
newCallback_MsgQueue_getGmqVerboseStatus(T* instance, void (T::*cb)(const ::GMQ::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_getGmqVerboseStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeStringsFromTo : public Callback_MsgQueue_writeStringsFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_MsgQueue_writeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeStringsFromToPtr
newCallback_MsgQueue_writeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringsFromToPtr
newCallback_MsgQueue_writeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeStringsFromTo : public Callback_MsgQueue_writeStringsFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_MsgQueue_writeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeStringsFromToPtr
newCallback_MsgQueue_writeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringsFromToPtr
newCallback_MsgQueue_writeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_sequenceStringsFromTo : public Callback_MsgQueue_sequenceStringsFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long, const ::std::string&, ::Ice::Long);

    CallbackNC_MsgQueue_sequenceStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::std::string outcalleeip;
        ::Ice::Long outcalleeport;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_sequenceStringsFromTo(outcalleeip, outcalleeport, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, outcalleeip, outcalleeport);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, outcalleeip, outcalleeport);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_sequenceStringsFromToPtr
newCallback_MsgQueue_sequenceStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::std::string&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_sequenceStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_sequenceStringsFromToPtr
newCallback_MsgQueue_sequenceStringsFromTo(T* instance, void (T::*cb)(::Ice::Long, const ::std::string&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_sequenceStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_sequenceStringsFromTo : public Callback_MsgQueue_sequenceStringsFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const ::std::string&, ::Ice::Long, const CT&);

    Callback_MsgQueue_sequenceStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::std::string outcalleeip;
        ::Ice::Long outcalleeport;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_sequenceStringsFromTo(outcalleeip, outcalleeport, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, outcalleeip, outcalleeport, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, outcalleeip, outcalleeport, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_sequenceStringsFromToPtr
newCallback_MsgQueue_sequenceStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::std::string&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_sequenceStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_sequenceStringsFromToPtr
newCallback_MsgQueue_sequenceStringsFromTo(T* instance, void (T::*cb)(::Ice::Long, const ::std::string&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_sequenceStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_writeStringsToIPPort : public Callback_MsgQueue_writeStringsToIPPort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_MsgQueue_writeStringsToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_writeStringsToIPPortPtr
newCallback_MsgQueue_writeStringsToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_writeStringsToIPPortPtr
newCallback_MsgQueue_writeStringsToIPPort(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_writeStringsToIPPort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_writeStringsToIPPort : public Callback_MsgQueue_writeStringsToIPPort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_MsgQueue_writeStringsToIPPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_writeStringsToIPPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_writeStringsToIPPortPtr
newCallback_MsgQueue_writeStringsToIPPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_writeStringsToIPPortPtr
newCallback_MsgQueue_writeStringsToIPPort(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_writeStringsToIPPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MsgQueue_routeStringsFromTo : public Callback_MsgQueue_routeStringsFromTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_MsgQueue_routeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_routeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MsgQueue_routeStringsFromToPtr
newCallback_MsgQueue_routeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_routeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MsgQueue_routeStringsFromToPtr
newCallback_MsgQueue_routeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MsgQueue_routeStringsFromTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MsgQueue_routeStringsFromTo : public Callback_MsgQueue_routeStringsFromTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_MsgQueue_routeStringsFromTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GMQ::MsgQueuePrx __proxy = ::GMQ::MsgQueuePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_routeStringsFromTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MsgQueue_routeStringsFromToPtr
newCallback_MsgQueue_routeStringsFromTo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_routeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MsgQueue_routeStringsFromToPtr
newCallback_MsgQueue_routeStringsFromTo(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MsgQueue_routeStringsFromTo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
