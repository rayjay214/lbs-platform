// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Redis.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Redis_h__
#define __Redis_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Redis
{

class redisReply;

class RedisService;

}

}

namespace Redis
{

class redisReply;
bool operator==(const redisReply&, const redisReply&);
bool operator<(const redisReply&, const redisReply&);

class RedisService;
bool operator==(const RedisService&, const RedisService&);
bool operator<(const RedisService&, const RedisService&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Redis::redisReply*);
::IceProxy::Ice::Object* upCast(::IceProxy::Redis::redisReply*);

::Ice::Object* upCast(::Redis::RedisService*);
::IceProxy::Ice::Object* upCast(::IceProxy::Redis::RedisService*);

}

namespace Redis
{

typedef ::IceInternal::Handle< ::Redis::redisReply> redisReplyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Redis::redisReply> redisReplyPrx;

void __read(::IceInternal::BasicStream*, redisReplyPrx&);
void __patch__redisReplyPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Redis::RedisService> RedisServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Redis::RedisService> RedisServicePrx;

void __read(::IceInternal::BasicStream*, RedisServicePrx&);
void __patch__RedisServicePtr(void*, ::Ice::ObjectPtr&);

}

namespace Redis
{

typedef ::std::vector< ::std::string> redisArgv;

typedef ::std::vector< ::Redis::redisArgv> batchRedisArgv;
void __writebatchRedisArgv(::IceInternal::BasicStream*, const ::Redis::redisArgv*, const ::Redis::redisArgv*);
void __readbatchRedisArgv(::IceInternal::BasicStream*, batchRedisArgv&);

typedef ::std::vector< ::Redis::redisReplyPtr> replyarray;
void __writereplyarray(::IceInternal::BasicStream*, const ::Redis::redisReplyPtr*, const ::Redis::redisReplyPtr*);
void __readreplyarray(::IceInternal::BasicStream*, replyarray&);

}

namespace Redis
{

class Callback_RedisService_RedisCommand_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RedisService_RedisCommand_Base> Callback_RedisService_RedisCommandPtr;

class Callback_RedisService_RedisBatchWriteCommands_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RedisService_RedisBatchWriteCommands_Base> Callback_RedisService_RedisBatchWriteCommandsPtr;

class Callback_RedisService_RedisReadOnlyCommand_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RedisService_RedisReadOnlyCommand_Base> Callback_RedisService_RedisReadOnlyCommandPtr;

}

namespace IceProxy
{

namespace Redis
{

class redisReply : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<redisReply> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<redisReply> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<redisReply*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<redisReply*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RedisService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int RedisCommand(const ::Redis::redisArgv& req, ::Redis::redisReplyPtr& res)
    {
        return RedisCommand(req, res, 0);
    }
    ::Ice::Int RedisCommand(const ::Redis::redisArgv& req, ::Redis::redisReplyPtr& res, const ::Ice::Context& __ctx)
    {
        return RedisCommand(req, res, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req)
    {
        return begin_RedisCommand(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx)
    {
        return begin_RedisCommand(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisCommand(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisCommand(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req, const ::Redis::Callback_RedisService_RedisCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisCommand(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx, const ::Redis::Callback_RedisService_RedisCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisCommand(req, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RedisCommand(::Redis::redisReplyPtr& res, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RedisCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RedisCommand(const ::Redis::redisArgv&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq)
    {
        return RedisBatchWriteCommands(batchReq, 0);
    }
    ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Ice::Context& __ctx)
    {
        return RedisBatchWriteCommands(batchReq, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq)
    {
        return begin_RedisBatchWriteCommands(batchReq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Ice::Context& __ctx)
    {
        return begin_RedisBatchWriteCommands(batchReq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisBatchWriteCommands(batchReq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisBatchWriteCommands(batchReq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Redis::Callback_RedisService_RedisBatchWriteCommandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisBatchWriteCommands(batchReq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv& batchReq, const ::Ice::Context& __ctx, const ::Redis::Callback_RedisService_RedisBatchWriteCommandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisBatchWriteCommands(batchReq, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RedisBatchWriteCommands(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv& req, ::Redis::redisReplyPtr& res)
    {
        return RedisReadOnlyCommand(req, res, 0);
    }
    ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv& req, ::Redis::redisReplyPtr& res, const ::Ice::Context& __ctx)
    {
        return RedisReadOnlyCommand(req, res, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req)
    {
        return begin_RedisReadOnlyCommand(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx)
    {
        return begin_RedisReadOnlyCommand(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisReadOnlyCommand(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisReadOnlyCommand(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req, const ::Redis::Callback_RedisService_RedisReadOnlyCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisReadOnlyCommand(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv& req, const ::Ice::Context& __ctx, const ::Redis::Callback_RedisService_RedisReadOnlyCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedisReadOnlyCommand(req, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RedisReadOnlyCommand(::Redis::redisReplyPtr& res, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RedisReadOnlyCommand(const ::Redis::redisArgv&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RedisService> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RedisService> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RedisService*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<RedisService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Redis
{

class redisReply : virtual public ::IceDelegate::Ice::Object
{
public:
};

class RedisService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int RedisCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Redis
{

class redisReply : virtual public ::IceDelegate::Redis::redisReply,
                   virtual public ::IceDelegateM::Ice::Object
{
public:
};

class RedisService : virtual public ::IceDelegate::Redis::RedisService,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int RedisCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);

    virtual ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Context*);

    virtual ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Redis
{

class redisReply : virtual public ::IceDelegate::Redis::redisReply,
                   virtual public ::IceDelegateD::Ice::Object
{
public:
};

class RedisService : virtual public ::IceDelegate::Redis::RedisService,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int RedisCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);

    virtual ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Context*);

    virtual ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Context*);
};

}

}

namespace Redis
{

class redisReply : virtual public ::Ice::Object, private IceInternal::GCShared
{
public:

    typedef redisReplyPrx ProxyType;
    typedef redisReplyPtr PointerType;
    
    redisReply() {}
    redisReply(::Ice::Int, ::Ice::Long, const ::std::string&, const ::Redis::replyarray&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesClasses();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~redisReply() {}

    friend class redisReply__staticInit;

public:

    ::Ice::Int type;

    ::Ice::Long integer;

    ::std::string str;

    ::Redis::replyarray elements;
};

class redisReply__staticInit
{
public:

    ::Redis::redisReply _init;
};

static redisReply__staticInit _redisReply_init;

inline bool operator==(const redisReply& l, const redisReply& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const redisReply& l, const redisReply& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RedisService : virtual public ::Ice::Object
{
public:

    typedef RedisServicePrx ProxyType;
    typedef RedisServicePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int RedisCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RedisCommand(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RedisBatchWriteCommands(const ::Redis::batchRedisArgv&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RedisBatchWriteCommands(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RedisReadOnlyCommand(const ::Redis::redisArgv&, ::Redis::redisReplyPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RedisReadOnlyCommand(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const RedisService& l, const RedisService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RedisService& l, const RedisService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Redis
{

template<class T>
class CallbackNC_RedisService_RedisCommand : public Callback_RedisService_RedisCommand_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Redis::redisReplyPtr&);

    CallbackNC_RedisService_RedisCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Redis::redisReplyPtr res;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisCommand(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, res);
#endif
        }
    }

    Response response;
};

template<class T> Callback_RedisService_RedisCommandPtr
newCallback_RedisService_RedisCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisCommand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RedisService_RedisCommandPtr
newCallback_RedisService_RedisCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisCommand<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RedisService_RedisCommand : public Callback_RedisService_RedisCommand_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&);

    Callback_RedisService_RedisCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Redis::redisReplyPtr res;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisCommand(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RedisService_RedisCommandPtr
newCallback_RedisService_RedisCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RedisService_RedisCommandPtr
newCallback_RedisService_RedisCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RedisService_RedisBatchWriteCommands : public Callback_RedisService_RedisBatchWriteCommands_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_RedisService_RedisBatchWriteCommands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisBatchWriteCommands(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_RedisService_RedisBatchWriteCommandsPtr
newCallback_RedisService_RedisBatchWriteCommands(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisBatchWriteCommands<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RedisService_RedisBatchWriteCommandsPtr
newCallback_RedisService_RedisBatchWriteCommands(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisBatchWriteCommands<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RedisService_RedisBatchWriteCommands : public Callback_RedisService_RedisBatchWriteCommands_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_RedisService_RedisBatchWriteCommands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisBatchWriteCommands(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RedisService_RedisBatchWriteCommandsPtr
newCallback_RedisService_RedisBatchWriteCommands(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisBatchWriteCommands<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RedisService_RedisBatchWriteCommandsPtr
newCallback_RedisService_RedisBatchWriteCommands(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisBatchWriteCommands<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RedisService_RedisReadOnlyCommand : public Callback_RedisService_RedisReadOnlyCommand_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Redis::redisReplyPtr&);

    CallbackNC_RedisService_RedisReadOnlyCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Redis::redisReplyPtr res;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisReadOnlyCommand(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, res);
#endif
        }
    }

    Response response;
};

template<class T> Callback_RedisService_RedisReadOnlyCommandPtr
newCallback_RedisService_RedisReadOnlyCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisReadOnlyCommand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RedisService_RedisReadOnlyCommandPtr
newCallback_RedisService_RedisReadOnlyCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RedisService_RedisReadOnlyCommand<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RedisService_RedisReadOnlyCommand : public Callback_RedisService_RedisReadOnlyCommand_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&);

    Callback_RedisService_RedisReadOnlyCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Redis::RedisServicePrx __proxy = ::Redis::RedisServicePrx::uncheckedCast(__result->getProxy());
        ::Redis::redisReplyPtr res;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RedisReadOnlyCommand(res, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, res, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RedisService_RedisReadOnlyCommandPtr
newCallback_RedisService_RedisReadOnlyCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisReadOnlyCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RedisService_RedisReadOnlyCommandPtr
newCallback_RedisService_RedisReadOnlyCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Redis::redisReplyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RedisService_RedisReadOnlyCommand<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
