// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TreeOp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __TreeOp_h__
#define __TreeOp_h__

#include <gns_api_raii.h>
#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CustomTree
{

class CustomTreeService;

}

}

namespace CustomTree
{

class CustomTreeService;
bool operator==(const CustomTreeService&, const CustomTreeService&);
bool operator<(const CustomTreeService&, const CustomTreeService&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CustomTree::CustomTreeService*);
::IceProxy::Ice::Object* upCast(::IceProxy::CustomTree::CustomTreeService*);

}

namespace CustomTree
{

typedef ::IceInternal::Handle< ::CustomTree::CustomTreeService> CustomTreeServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CustomTree::CustomTreeService> CustomTreeServicePrx;

void __read(::IceInternal::BasicStream*, CustomTreeServicePrx&);
void __patch__CustomTreeServicePtr(void*, ::Ice::ObjectPtr&);

}

namespace CustomTree
{

struct CustomInfo
{
    ::Ice::Long uid;
    ::Ice::Long pid;
    ::std::string name;
    ::std::string loginname;
    ::Ice::Int devNum;
    ::Ice::Int totalDevNum;
    bool hasChild;
    ::Ice::Int grade;

    bool operator==(const CustomInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(uid != __rhs.uid)
        {
            return false;
        }
        if(pid != __rhs.pid)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(loginname != __rhs.loginname)
        {
            return false;
        }
        if(devNum != __rhs.devNum)
        {
            return false;
        }
        if(totalDevNum != __rhs.totalDevNum)
        {
            return false;
        }
        if(hasChild != __rhs.hasChild)
        {
            return false;
        }
        if(grade != __rhs.grade)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CustomInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(uid < __rhs.uid)
        {
            return true;
        }
        else if(__rhs.uid < uid)
        {
            return false;
        }
        if(pid < __rhs.pid)
        {
            return true;
        }
        else if(__rhs.pid < pid)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(loginname < __rhs.loginname)
        {
            return true;
        }
        else if(__rhs.loginname < loginname)
        {
            return false;
        }
        if(devNum < __rhs.devNum)
        {
            return true;
        }
        else if(__rhs.devNum < devNum)
        {
            return false;
        }
        if(totalDevNum < __rhs.totalDevNum)
        {
            return true;
        }
        else if(__rhs.totalDevNum < totalDevNum)
        {
            return false;
        }
        if(hasChild < __rhs.hasChild)
        {
            return true;
        }
        else if(__rhs.hasChild < hasChild)
        {
            return false;
        }
        if(grade < __rhs.grade)
        {
            return true;
        }
        else if(__rhs.grade < grade)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CustomInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CustomInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CustomInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CustomInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::CustomTree::CustomInfo> CustomInfos;
void __writeCustomInfos(::IceInternal::BasicStream*, const ::CustomTree::CustomInfo*, const ::CustomTree::CustomInfo*);
void __readCustomInfos(::IceInternal::BasicStream*, CustomInfos&);

typedef ::std::vector< ::Ice::Long> IDS;

typedef ::std::vector<bool> ChildTags;

typedef ::std::map< ::Ice::Long, ::CustomTree::CustomInfos> CustomInfosMap;
void __writeCustomInfosMap(::IceInternal::BasicStream*, const CustomInfosMap&);
void __readCustomInfosMap(::IceInternal::BasicStream*, CustomInfosMap&);

typedef ::std::map< ::Ice::Long, ::CustomTree::CustomInfo> CustomInfoMap;
void __writeCustomInfoMap(::IceInternal::BasicStream*, const CustomInfoMap&);
void __readCustomInfoMap(::IceInternal::BasicStream*, CustomInfoMap&);

}

namespace CustomTree
{

class Callback_CustomTreeService_GetChildUid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetChildUid_Base> Callback_CustomTreeService_GetChildUidPtr;

class Callback_CustomTreeService_GetAllChildUid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAllChildUid_Base> Callback_CustomTreeService_GetAllChildUidPtr;

class Callback_CustomTreeService_GetAllChildIdLimit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAllChildIdLimit_Base> Callback_CustomTreeService_GetAllChildIdLimitPtr;

class Callback_CustomTreeService_GetChildInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetChildInfo_Base> Callback_CustomTreeService_GetChildInfoPtr;

class Callback_CustomTreeService_GetAllChildInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAllChildInfo_Base> Callback_CustomTreeService_GetAllChildInfoPtr;

class Callback_CustomTreeService_GetParentUid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetParentUid_Base> Callback_CustomTreeService_GetParentUidPtr;

class Callback_CustomTreeService_GetAllParentUid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAllParentUid_Base> Callback_CustomTreeService_GetAllParentUidPtr;

class Callback_CustomTreeService_GetAllParentInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAllParentInfo_Base> Callback_CustomTreeService_GetAllParentInfoPtr;

class Callback_CustomTreeService_IsParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_IsParent_Base> Callback_CustomTreeService_IsParentPtr;

class Callback_CustomTreeService_GetAtoBUid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAtoBUid_Base> Callback_CustomTreeService_GetAtoBUidPtr;

class Callback_CustomTreeService_GetAstoBInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetAstoBInfo_Base> Callback_CustomTreeService_GetAstoBInfoPtr;

class Callback_CustomTreeService_Search_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_Search_Base> Callback_CustomTreeService_SearchPtr;

class Callback_CustomTreeService_SearchByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_SearchByName_Base> Callback_CustomTreeService_SearchByNamePtr;

class Callback_CustomTreeService_GetCustomInfoByIDs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_GetCustomInfoByIDs_Base> Callback_CustomTreeService_GetCustomInfoByIDsPtr;

class Callback_CustomTreeService_IsChilds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CustomTreeService_IsChilds_Base> Callback_CustomTreeService_IsChildsPtr;

}

namespace IceProxy
{

namespace CustomTree
{

class CustomTreeService : virtual public ::IceProxy::Ice::Object
{
public:

    bool GetChildUid(::Ice::Long uid, ::CustomTree::IDS& uids)
    {
        return GetChildUid(uid, uids, 0);
    }
    bool GetChildUid(::Ice::Long uid, ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return GetChildUid(uid, uids, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid)
    {
        return begin_GetChildUid(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetChildUid(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildUid(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetChildUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetChildUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildUid(uid, &__ctx, __del, __cookie);
    }

    bool end_GetChildUid(::CustomTree::IDS& uids, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetChildUid(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllChildUid(::Ice::Long uid, ::CustomTree::IDS& uids)
    {
        return GetAllChildUid(uid, uids, 0);
    }
    bool GetAllChildUid(::Ice::Long uid, ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return GetAllChildUid(uid, uids, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid)
    {
        return begin_GetAllChildUid(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetAllChildUid(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildUid(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetAllChildUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAllChildUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildUid(uid, &__ctx, __del, __cookie);
    }

    bool end_GetAllChildUid(::CustomTree::IDS& uids, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllChildUid(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, ::CustomTree::IDS& eids)
    {
        return GetAllChildIdLimit(id, begin, limit, eids, 0);
    }
    bool GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, ::CustomTree::IDS& eids, const ::Ice::Context& __ctx)
    {
        return GetAllChildIdLimit(id, begin, limit, eids, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, const ::Ice::Context& __ctx)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, const ::CustomTree::Callback_CustomTreeService_GetAllChildIdLimitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long id, ::Ice::Int begin, ::Ice::Int limit, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAllChildIdLimitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildIdLimit(id, begin, limit, &__ctx, __del, __cookie);
    }

    bool end_GetAllChildIdLimit(::CustomTree::IDS& eids, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, ::CustomTree::IDS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetChildInfo(::Ice::Long uid, ::CustomTree::CustomInfos& Infos)
    {
        return GetChildInfo(uid, Infos, 0);
    }
    bool GetChildInfo(::Ice::Long uid, ::CustomTree::CustomInfos& Infos, const ::Ice::Context& __ctx)
    {
        return GetChildInfo(uid, Infos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid)
    {
        return begin_GetChildInfo(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetChildInfo(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildInfo(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetChildInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetChildInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetChildInfo(uid, &__ctx, __del, __cookie);
    }

    bool end_GetChildInfo(::CustomTree::CustomInfos& Infos, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetChildInfo(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllChildInfo(::Ice::Long uid, ::CustomTree::CustomInfos& Infos)
    {
        return GetAllChildInfo(uid, Infos, 0);
    }
    bool GetAllChildInfo(::Ice::Long uid, ::CustomTree::CustomInfos& Infos, const ::Ice::Context& __ctx)
    {
        return GetAllChildInfo(uid, Infos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid)
    {
        return begin_GetAllChildInfo(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetAllChildInfo(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildInfo(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetAllChildInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAllChildInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllChildInfo(uid, &__ctx, __del, __cookie);
    }

    bool end_GetAllChildInfo(::CustomTree::CustomInfos& Infos, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllChildInfo(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long GetParentUid(::Ice::Long uid)
    {
        return GetParentUid(uid, 0);
    }
    ::Ice::Long GetParentUid(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return GetParentUid(uid, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid)
    {
        return begin_GetParentUid(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetParentUid(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetParentUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetParentUid(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetParentUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetParentUid(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetParentUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetParentUid(uid, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_GetParentUid(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long GetParentUid(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetParentUid(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllParentUid(::Ice::Long puid, ::CustomTree::IDS& uids)
    {
        return GetAllParentUid(puid, uids, 0);
    }
    bool GetAllParentUid(::Ice::Long puid, ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return GetAllParentUid(puid, uids, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid)
    {
        return begin_GetAllParentUid(puid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid, const ::Ice::Context& __ctx)
    {
        return begin_GetAllParentUid(puid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentUid(puid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentUid(puid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid, const ::CustomTree::Callback_CustomTreeService_GetAllParentUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentUid(puid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long puid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAllParentUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentUid(puid, &__ctx, __del, __cookie);
    }

    bool end_GetAllParentUid(::CustomTree::IDS& uids, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllParentUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllParentUid(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllParentInfo(::Ice::Long uid, ::CustomTree::CustomInfos& infos)
    {
        return GetAllParentInfo(uid, infos, 0);
    }
    bool GetAllParentInfo(::Ice::Long uid, ::CustomTree::CustomInfos& infos, const ::Ice::Context& __ctx)
    {
        return GetAllParentInfo(uid, infos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid)
    {
        return begin_GetAllParentInfo(uid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid, const ::Ice::Context& __ctx)
    {
        return begin_GetAllParentInfo(uid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentInfo(uid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid, const ::CustomTree::Callback_CustomTreeService_GetAllParentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentInfo(uid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long uid, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAllParentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllParentInfo(uid, &__ctx, __del, __cookie);
    }

    bool end_GetAllParentInfo(::CustomTree::CustomInfos& infos, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllParentInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllParentInfo(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool IsParent(::Ice::Long uidA, ::Ice::Long uidB)
    {
        return IsParent(uidA, uidB, 0);
    }
    bool IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx)
    {
        return IsParent(uidA, uidB, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB)
    {
        return begin_IsParent(uidA, uidB, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx)
    {
        return begin_IsParent(uidA, uidB, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsParent(uidA, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsParent(uidA, uidB, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::CustomTree::Callback_CustomTreeService_IsParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsParent(uidA, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_IsParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsParent(uidA, uidB, &__ctx, __del, __cookie);
    }

    bool end_IsParent(const ::Ice::AsyncResultPtr&);
    
private:

    bool IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, ::CustomTree::IDS& uids)
    {
        return GetAtoBUid(uidA, uidB, uids, 0);
    }
    bool GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return GetAtoBUid(uidA, uidB, uids, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB)
    {
        return begin_GetAtoBUid(uidA, uidB, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx)
    {
        return begin_GetAtoBUid(uidA, uidB, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAtoBUid(uidA, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAtoBUid(uidA, uidB, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, const ::CustomTree::Callback_CustomTreeService_GetAtoBUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAtoBUid(uidA, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long uidA, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAtoBUidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAtoBUid(uidA, uidB, &__ctx, __del, __cookie);
    }

    bool end_GetAtoBUid(::CustomTree::IDS& uids, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAtoBUid(::Ice::Long, ::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAtoBUid(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, ::CustomTree::CustomInfosMap& InfosMap)
    {
        return GetAstoBInfo(uids, uidB, InfosMap, 0);
    }
    bool GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, ::CustomTree::CustomInfosMap& InfosMap, const ::Ice::Context& __ctx)
    {
        return GetAstoBInfo(uids, uidB, InfosMap, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB)
    {
        return begin_GetAstoBInfo(uids, uidB, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, const ::Ice::Context& __ctx)
    {
        return begin_GetAstoBInfo(uids, uidB, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAstoBInfo(uids, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAstoBInfo(uids, uidB, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, const ::CustomTree::Callback_CustomTreeService_GetAstoBInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAstoBInfo(uids, uidB, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS& uids, ::Ice::Long uidB, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetAstoBInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAstoBInfo(uids, uidB, &__ctx, __del, __cookie);
    }

    bool end_GetAstoBInfo(::CustomTree::CustomInfosMap& InfosMap, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, ::CustomTree::CustomInfosMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, ::CustomTree::CustomInfos& Infos)
    {
        return Search(uid, name, num, Infos, 0);
    }
    bool Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, ::CustomTree::CustomInfos& Infos, const ::Ice::Context& __ctx)
    {
        return Search(uid, name, num, Infos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num)
    {
        return begin_Search(uid, name, num, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx)
    {
        return begin_Search(uid, name, num, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Search(uid, name, num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Search(uid, name, num, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::CustomTree::Callback_CustomTreeService_SearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Search(uid, name, num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Search(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_SearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Search(uid, name, num, &__ctx, __del, __cookie);
    }

    bool end_Search(::CustomTree::CustomInfos& Infos, const ::Ice::AsyncResultPtr&);
    
private:

    bool Search(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Search(::Ice::Long, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, ::CustomTree::CustomInfos& Infos)
    {
        return SearchByName(uid, name, num, Infos, 0);
    }
    bool SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, ::CustomTree::CustomInfos& Infos, const ::Ice::Context& __ctx)
    {
        return SearchByName(uid, name, num, Infos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num)
    {
        return begin_SearchByName(uid, name, num, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx)
    {
        return begin_SearchByName(uid, name, num, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SearchByName(uid, name, num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SearchByName(uid, name, num, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::CustomTree::Callback_CustomTreeService_SearchByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SearchByName(uid, name, num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long uid, const ::std::string& name, ::Ice::Int num, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_SearchByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SearchByName(uid, name, num, &__ctx, __del, __cookie);
    }

    bool end_SearchByName(::CustomTree::CustomInfos& Infos, const ::Ice::AsyncResultPtr&);
    
private:

    bool SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetCustomInfoByIDs(const ::CustomTree::IDS& uids, ::CustomTree::CustomInfoMap& infoMap)
    {
        return GetCustomInfoByIDs(uids, infoMap, 0);
    }
    bool GetCustomInfoByIDs(const ::CustomTree::IDS& uids, ::CustomTree::CustomInfoMap& infoMap, const ::Ice::Context& __ctx)
    {
        return GetCustomInfoByIDs(uids, infoMap, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids)
    {
        return begin_GetCustomInfoByIDs(uids, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return begin_GetCustomInfoByIDs(uids, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCustomInfoByIDs(uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCustomInfoByIDs(uids, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids, const ::CustomTree::Callback_CustomTreeService_GetCustomInfoByIDsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCustomInfoByIDs(uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_GetCustomInfoByIDsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCustomInfoByIDs(uids, &__ctx, __del, __cookie);
    }

    bool end_GetCustomInfoByIDs(::CustomTree::CustomInfoMap& infoMap, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetCustomInfoByIDs(const ::CustomTree::IDS&, ::CustomTree::CustomInfoMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetCustomInfoByIDs(const ::CustomTree::IDS&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, ::CustomTree::ChildTags& tags)
    {
        return IsChilds(uid, uids, tags, 0);
    }
    bool IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, ::CustomTree::ChildTags& tags, const ::Ice::Context& __ctx)
    {
        return IsChilds(uid, uids, tags, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids)
    {
        return begin_IsChilds(uid, uids, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx)
    {
        return begin_IsChilds(uid, uids, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsChilds(uid, uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsChilds(uid, uids, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, const ::CustomTree::Callback_CustomTreeService_IsChildsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsChilds(uid, uids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long uid, const ::CustomTree::IDS& uids, const ::Ice::Context& __ctx, const ::CustomTree::Callback_CustomTreeService_IsChildsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsChilds(uid, uids, &__ctx, __del, __cookie);
    }

    bool end_IsChilds(::CustomTree::ChildTags& tags, const ::Ice::AsyncResultPtr&);
    
private:

    bool IsChilds(::Ice::Long, const ::CustomTree::IDS&, ::CustomTree::ChildTags&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_IsChilds(::Ice::Long, const ::CustomTree::IDS&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CustomTreeService> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CustomTreeService*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<CustomTreeService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

public: 

    GNS_API::CALLER m_caller;

    GNS_API::CALLEE m_callee;

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CustomTree
{

class CustomTreeService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool GetChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*) = 0;

    virtual bool GetAllChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*) = 0;

    virtual bool GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, ::CustomTree::IDS&, const ::Ice::Context*) = 0;

    virtual bool GetChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*) = 0;

    virtual bool GetAllChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*) = 0;

    virtual ::Ice::Long GetParentUid(::Ice::Long, const ::Ice::Context*) = 0;

    virtual bool GetAllParentUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*) = 0;

    virtual bool GetAllParentInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*) = 0;

    virtual bool IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual bool GetAtoBUid(::Ice::Long, ::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*) = 0;

    virtual bool GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, ::CustomTree::CustomInfosMap&, const ::Ice::Context*) = 0;

    virtual bool Search(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*) = 0;

    virtual bool SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*) = 0;

    virtual bool GetCustomInfoByIDs(const ::CustomTree::IDS&, ::CustomTree::CustomInfoMap&, const ::Ice::Context*) = 0;

    virtual bool IsChilds(::Ice::Long, const ::CustomTree::IDS&, ::CustomTree::ChildTags&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CustomTree
{

class CustomTreeService : virtual public ::IceDelegate::CustomTree::CustomTreeService,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool GetChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool GetAllChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual ::Ice::Long GetParentUid(::Ice::Long, const ::Ice::Context*);

    virtual bool GetAllParentUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllParentInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual bool GetAtoBUid(::Ice::Long, ::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, ::CustomTree::CustomInfosMap&, const ::Ice::Context*);

    virtual bool Search(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool GetCustomInfoByIDs(const ::CustomTree::IDS&, ::CustomTree::CustomInfoMap&, const ::Ice::Context*);

    virtual bool IsChilds(::Ice::Long, const ::CustomTree::IDS&, ::CustomTree::ChildTags&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CustomTree
{

class CustomTreeService : virtual public ::IceDelegate::CustomTree::CustomTreeService,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool GetChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool GetAllChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual ::Ice::Long GetParentUid(::Ice::Long, const ::Ice::Context*);

    virtual bool GetAllParentUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAllParentInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Context*);

    virtual bool GetAtoBUid(::Ice::Long, ::Ice::Long, ::CustomTree::IDS&, const ::Ice::Context*);

    virtual bool GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, ::CustomTree::CustomInfosMap&, const ::Ice::Context*);

    virtual bool Search(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Context*);

    virtual bool GetCustomInfoByIDs(const ::CustomTree::IDS&, ::CustomTree::CustomInfoMap&, const ::Ice::Context*);

    virtual bool IsChilds(::Ice::Long, const ::CustomTree::IDS&, ::CustomTree::ChildTags&, const ::Ice::Context*);
};

}

}

namespace CustomTree
{

class CustomTreeService : virtual public ::Ice::Object
{
public:

    typedef CustomTreeServicePrx ProxyType;
    typedef CustomTreeServicePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool GetChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetChildUid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllChildUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllChildUid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllChildIdLimit(::Ice::Long, ::Ice::Int, ::Ice::Int, ::CustomTree::IDS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllChildIdLimit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetChildInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllChildInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllChildInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long GetParentUid(::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetParentUid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllParentUid(::Ice::Long, ::CustomTree::IDS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllParentUid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllParentInfo(::Ice::Long, ::CustomTree::CustomInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllParentInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool IsParent(::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___IsParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAtoBUid(::Ice::Long, ::Ice::Long, ::CustomTree::IDS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAtoBUid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAstoBInfo(const ::CustomTree::IDS&, ::Ice::Long, ::CustomTree::CustomInfosMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAstoBInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool Search(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Search(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SearchByName(::Ice::Long, const ::std::string&, ::Ice::Int, ::CustomTree::CustomInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SearchByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetCustomInfoByIDs(const ::CustomTree::IDS&, ::CustomTree::CustomInfoMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetCustomInfoByIDs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool IsChilds(::Ice::Long, const ::CustomTree::IDS&, ::CustomTree::ChildTags&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___IsChilds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const CustomTreeService& l, const CustomTreeService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CustomTreeService& l, const CustomTreeService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CustomTree
{

template<class T>
class CallbackNC_CustomTreeService_GetChildUid : public Callback_CustomTreeService_GetChildUid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&);

    CallbackNC_CustomTreeService_GetChildUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetChildUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, uids);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetChildUidPtr
newCallback_CustomTreeService_GetChildUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetChildUid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetChildUidPtr
newCallback_CustomTreeService_GetChildUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetChildUid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetChildUid : public Callback_CustomTreeService_GetChildUid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&, const CT&);

    Callback_CustomTreeService_GetChildUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetChildUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetChildUidPtr
newCallback_CustomTreeService_GetChildUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetChildUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetChildUidPtr
newCallback_CustomTreeService_GetChildUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetChildUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAllChildUid : public Callback_CustomTreeService_GetAllChildUid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&);

    CallbackNC_CustomTreeService_GetAllChildUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, uids);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAllChildUidPtr
newCallback_CustomTreeService_GetAllChildUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildUid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAllChildUidPtr
newCallback_CustomTreeService_GetAllChildUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildUid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAllChildUid : public Callback_CustomTreeService_GetAllChildUid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&, const CT&);

    Callback_CustomTreeService_GetAllChildUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAllChildUidPtr
newCallback_CustomTreeService_GetAllChildUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAllChildUidPtr
newCallback_CustomTreeService_GetAllChildUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAllChildIdLimit : public Callback_CustomTreeService_GetAllChildIdLimit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&);

    CallbackNC_CustomTreeService_GetAllChildIdLimit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS eids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildIdLimit(eids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, eids);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, eids);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAllChildIdLimitPtr
newCallback_CustomTreeService_GetAllChildIdLimit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildIdLimit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAllChildIdLimitPtr
newCallback_CustomTreeService_GetAllChildIdLimit(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildIdLimit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAllChildIdLimit : public Callback_CustomTreeService_GetAllChildIdLimit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&, const CT&);

    Callback_CustomTreeService_GetAllChildIdLimit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS eids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildIdLimit(eids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, eids, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, eids, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAllChildIdLimitPtr
newCallback_CustomTreeService_GetAllChildIdLimit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildIdLimit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAllChildIdLimitPtr
newCallback_CustomTreeService_GetAllChildIdLimit(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildIdLimit<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetChildInfo : public Callback_CustomTreeService_GetChildInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&);

    CallbackNC_CustomTreeService_GetChildInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetChildInfo(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, Infos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetChildInfoPtr
newCallback_CustomTreeService_GetChildInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetChildInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetChildInfoPtr
newCallback_CustomTreeService_GetChildInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetChildInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetChildInfo : public Callback_CustomTreeService_GetChildInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&, const CT&);

    Callback_CustomTreeService_GetChildInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetChildInfo(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetChildInfoPtr
newCallback_CustomTreeService_GetChildInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetChildInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetChildInfoPtr
newCallback_CustomTreeService_GetChildInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetChildInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAllChildInfo : public Callback_CustomTreeService_GetAllChildInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&);

    CallbackNC_CustomTreeService_GetAllChildInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildInfo(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, Infos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAllChildInfoPtr
newCallback_CustomTreeService_GetAllChildInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAllChildInfoPtr
newCallback_CustomTreeService_GetAllChildInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllChildInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAllChildInfo : public Callback_CustomTreeService_GetAllChildInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&, const CT&);

    Callback_CustomTreeService_GetAllChildInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllChildInfo(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAllChildInfoPtr
newCallback_CustomTreeService_GetAllChildInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAllChildInfoPtr
newCallback_CustomTreeService_GetAllChildInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllChildInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetParentUid : public Callback_CustomTreeService_GetParentUid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_CustomTreeService_GetParentUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_GetParentUid(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetParentUidPtr
newCallback_CustomTreeService_GetParentUid(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetParentUid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetParentUidPtr
newCallback_CustomTreeService_GetParentUid(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetParentUid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetParentUid : public Callback_CustomTreeService_GetParentUid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_CustomTreeService_GetParentUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_GetParentUid(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetParentUidPtr
newCallback_CustomTreeService_GetParentUid(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetParentUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetParentUidPtr
newCallback_CustomTreeService_GetParentUid(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetParentUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAllParentUid : public Callback_CustomTreeService_GetAllParentUid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&);

    CallbackNC_CustomTreeService_GetAllParentUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllParentUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, uids);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAllParentUidPtr
newCallback_CustomTreeService_GetAllParentUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllParentUid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAllParentUidPtr
newCallback_CustomTreeService_GetAllParentUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllParentUid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAllParentUid : public Callback_CustomTreeService_GetAllParentUid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&, const CT&);

    Callback_CustomTreeService_GetAllParentUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllParentUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAllParentUidPtr
newCallback_CustomTreeService_GetAllParentUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllParentUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAllParentUidPtr
newCallback_CustomTreeService_GetAllParentUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllParentUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAllParentInfo : public Callback_CustomTreeService_GetAllParentInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&);

    CallbackNC_CustomTreeService_GetAllParentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllParentInfo(infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, infos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, infos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAllParentInfoPtr
newCallback_CustomTreeService_GetAllParentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllParentInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAllParentInfoPtr
newCallback_CustomTreeService_GetAllParentInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAllParentInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAllParentInfo : public Callback_CustomTreeService_GetAllParentInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&, const CT&);

    Callback_CustomTreeService_GetAllParentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllParentInfo(infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, infos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, infos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAllParentInfoPtr
newCallback_CustomTreeService_GetAllParentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllParentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAllParentInfoPtr
newCallback_CustomTreeService_GetAllParentInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAllParentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_IsParent : public Callback_CustomTreeService_IsParent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_CustomTreeService_IsParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_IsParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_IsParentPtr
newCallback_CustomTreeService_IsParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_IsParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_IsParentPtr
newCallback_CustomTreeService_IsParent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_IsParent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_IsParent : public Callback_CustomTreeService_IsParent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_CustomTreeService_IsParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_IsParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_IsParentPtr
newCallback_CustomTreeService_IsParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_IsParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_IsParentPtr
newCallback_CustomTreeService_IsParent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_IsParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAtoBUid : public Callback_CustomTreeService_GetAtoBUid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&);

    CallbackNC_CustomTreeService_GetAtoBUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAtoBUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, uids);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAtoBUidPtr
newCallback_CustomTreeService_GetAtoBUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAtoBUid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAtoBUidPtr
newCallback_CustomTreeService_GetAtoBUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAtoBUid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAtoBUid : public Callback_CustomTreeService_GetAtoBUid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::IDS&, const CT&);

    Callback_CustomTreeService_GetAtoBUid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::IDS uids;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAtoBUid(uids, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, uids, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAtoBUidPtr
newCallback_CustomTreeService_GetAtoBUid(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAtoBUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAtoBUidPtr
newCallback_CustomTreeService_GetAtoBUid(T* instance, void (T::*cb)(bool, const ::CustomTree::IDS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAtoBUid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetAstoBInfo : public Callback_CustomTreeService_GetAstoBInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfosMap&);

    CallbackNC_CustomTreeService_GetAstoBInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfosMap InfosMap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAstoBInfo(InfosMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, InfosMap);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, InfosMap);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetAstoBInfoPtr
newCallback_CustomTreeService_GetAstoBInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfosMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAstoBInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetAstoBInfoPtr
newCallback_CustomTreeService_GetAstoBInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfosMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetAstoBInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetAstoBInfo : public Callback_CustomTreeService_GetAstoBInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfosMap&, const CT&);

    Callback_CustomTreeService_GetAstoBInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfosMap InfosMap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAstoBInfo(InfosMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, InfosMap, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, InfosMap, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetAstoBInfoPtr
newCallback_CustomTreeService_GetAstoBInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfosMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAstoBInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetAstoBInfoPtr
newCallback_CustomTreeService_GetAstoBInfo(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfosMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetAstoBInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_Search : public Callback_CustomTreeService_Search_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&);

    CallbackNC_CustomTreeService_Search(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_Search(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, Infos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_SearchPtr
newCallback_CustomTreeService_Search(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_Search<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_SearchPtr
newCallback_CustomTreeService_Search(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_Search<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_Search : public Callback_CustomTreeService_Search_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&, const CT&);

    Callback_CustomTreeService_Search(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_Search(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_SearchPtr
newCallback_CustomTreeService_Search(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_Search<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_SearchPtr
newCallback_CustomTreeService_Search(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_Search<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_SearchByName : public Callback_CustomTreeService_SearchByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&);

    CallbackNC_CustomTreeService_SearchByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_SearchByName(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, Infos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_SearchByNamePtr
newCallback_CustomTreeService_SearchByName(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_SearchByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_SearchByNamePtr
newCallback_CustomTreeService_SearchByName(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_SearchByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_SearchByName : public Callback_CustomTreeService_SearchByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfos&, const CT&);

    Callback_CustomTreeService_SearchByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfos Infos;
        bool __ret;
        try
        {
            __ret = __proxy->end_SearchByName(Infos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, Infos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_SearchByNamePtr
newCallback_CustomTreeService_SearchByName(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_SearchByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_SearchByNamePtr
newCallback_CustomTreeService_SearchByName(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_SearchByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_GetCustomInfoByIDs : public Callback_CustomTreeService_GetCustomInfoByIDs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfoMap&);

    CallbackNC_CustomTreeService_GetCustomInfoByIDs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfoMap infoMap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetCustomInfoByIDs(infoMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, infoMap);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, infoMap);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_GetCustomInfoByIDsPtr
newCallback_CustomTreeService_GetCustomInfoByIDs(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfoMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetCustomInfoByIDs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_GetCustomInfoByIDsPtr
newCallback_CustomTreeService_GetCustomInfoByIDs(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfoMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_GetCustomInfoByIDs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_GetCustomInfoByIDs : public Callback_CustomTreeService_GetCustomInfoByIDs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::CustomInfoMap&, const CT&);

    Callback_CustomTreeService_GetCustomInfoByIDs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::CustomInfoMap infoMap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetCustomInfoByIDs(infoMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, infoMap, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, infoMap, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_GetCustomInfoByIDsPtr
newCallback_CustomTreeService_GetCustomInfoByIDs(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::CustomInfoMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetCustomInfoByIDs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_GetCustomInfoByIDsPtr
newCallback_CustomTreeService_GetCustomInfoByIDs(T* instance, void (T::*cb)(bool, const ::CustomTree::CustomInfoMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_GetCustomInfoByIDs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CustomTreeService_IsChilds : public Callback_CustomTreeService_IsChilds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::CustomTree::ChildTags&);

    CallbackNC_CustomTreeService_IsChilds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::ChildTags tags;
        bool __ret;
        try
        {
            __ret = __proxy->end_IsChilds(tags, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tags);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, tags);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CustomTreeService_IsChildsPtr
newCallback_CustomTreeService_IsChilds(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::ChildTags&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_IsChilds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CustomTreeService_IsChildsPtr
newCallback_CustomTreeService_IsChilds(T* instance, void (T::*cb)(bool, const ::CustomTree::ChildTags&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CustomTreeService_IsChilds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CustomTreeService_IsChilds : public Callback_CustomTreeService_IsChilds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::CustomTree::ChildTags&, const CT&);

    Callback_CustomTreeService_IsChilds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CustomTree::CustomTreeServicePrx __proxy = ::CustomTree::CustomTreeServicePrx::uncheckedCast(__result->getProxy());
        ::CustomTree::ChildTags tags;
        bool __ret;
        try
        {
            __ret = __proxy->end_IsChilds(tags, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tags, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, tags, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CustomTreeService_IsChildsPtr
newCallback_CustomTreeService_IsChilds(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::CustomTree::ChildTags&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_IsChilds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CustomTreeService_IsChildsPtr
newCallback_CustomTreeService_IsChilds(T* instance, void (T::*cb)(bool, const ::CustomTree::ChildTags&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CustomTreeService_IsChilds<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
